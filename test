  public ActionResult AcceptPEPDeterminationFormCR(PEPEntity pepdetails)
        {
            TransactionOptions TransOpt = new TransactionOptions();
            TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;
            var pep = new PEPEntity();
            GetMasterDataListForPepDetermination();
            if (string.IsNullOrEmpty(pepdetails.PepDeterminationComments))
            {
                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");
                ModelState.AddModelError("PepDeterminationComments", "Enter comments");
                pep = _pepservice.GetSinglePEPbyidforCR(pepdetails.PepId, pepdetails.CRId);
                pep.changedprops = JsonConvert.SerializeObject(pep.changedpropertiesforCR);
                pep.PepDeterminationComments = null;
                pep.CRId = pepdetails.CRId;
                pep.success = false;
                pep.searchFlag = "block";
            }
            else {
                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
                {
                    try
                    {
                        var existingPep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                        var goingToBeChangedRow = existingPep;
                        Mapper.CreateMap<PEPEntity, PepHistoryEntity>();
                        var mappedEntity = Mapper.Map<PEPEntity, PepHistoryEntity>(goingToBeChangedRow);
                        mappedEntity.CreatedBy = (string)Session["userId"];
                        mappedEntity.CreatedTS = DateTime.Now;
                        mappedEntity.UpdatedBy = null;
                        mappedEntity.UpdatedTS = null;
                        var addedToPepHistory = _pepservice.AddNewPepHistory(mappedEntity);

                        var result = _pepservice.AcceptPEPDeterminationFormCR(pepdetails);

                        if (result == 1)
                        {
                            pep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                            pep.success = true;
                            pep.searchFlag = "block";
                            pep.CRId = pepdetails.CRId;
                            pep.CrNo = pepdetails.CrNo;
                            Dictionary<string, List<string>> addpro = new Dictionary<string, List<string>>();
                            addpro.Add("prop", new List<string> { "prop1" });
                            pep.changedprops = JsonConvert.SerializeObject(addpro);
                            if (pepdetails.PepRequestStatus == "CR")
                            {
                                ModelState.AddModelError("Success", "CR Accepted!");
                            }
                            else
                            {
                                ModelState.AddModelError("Success", "PEP Request Cancelled!");
                            }
                            EmailNotification.CRAccepted(pep);
                        }
                        else
                        {

                            ModelState.AddModelError("Success", "CR Cannot be accepted, Please take action on CR raised prior to this!");
                            pep = _pepservice.GetSinglePEPbyidforCR(pepdetails.PepId, pepdetails.CRId);
                            pep.changedprops = JsonConvert.SerializeObject(pep.changedpropertiesforCR);
                            pep.CRId = pepdetails.CRId;
                            pep.success = true;
                            pep.searchFlag = "block";

                        }
                        trans.Complete();
                    }
                    catch (Exception ex)
                    {
                        trans.Dispose();
                        if (pepdetails.PepRequestStatus == "CR")
                        {
                            ModelState.AddModelError("Success", "CR Not Accepted!");
                        }
                        else
                        {
                            ModelState.AddModelError("Success", "PEP Request  Not Cancelled!");
                        }
                        pep = _pepservice.GetSinglePEPbyidforCR(pepdetails.PepId, pepdetails.CRId);
                        pep.changedprops = JsonConvert.SerializeObject(pep.changedpropertiesforCR);
                        pep.CRId = pepdetails.CRId;
                        pep.success = true;
                        pep.searchFlag = "block";

                    }
                }
            }
            return View("GetPEPDeterminationCRFormForCPT", pep);

        }
        --------------------------------
       [CustomActionLoggingFilter]

        public ActionResult CreatePepDeterminationFormCR(PEPEntity pepdetails)

        {

            if ((pepdetails.AttachhmentList !=null) && (pepdetails.Uploadfiles != null))

            {

                if ((pepdetails.Uploadfiles.Count + pepdetails.AttachhmentList.Count) > 5)

                {

                    ModelState.AddModelError("Attachment", "Attachments cannot be more than 5");

                }

            }

            else if (pepdetails.Uploadfiles != null && pepdetails.Uploadfiles.Count > 5)

                {

                ModelState.AddModelError("Attachment", "Attachments cannot be more than 5");

            }


            if ((pepdetails.Uploadfiles != null) && (pepdetails.Uploadfiles[0] != null))

            {

                var contentlengthofattachment = pepdetails.Uploadfiles.Sum(x => x.ContentLength);

                if (contentlengthofattachment > 25000 * 1024)

                {

                    ModelState.AddModelError("AttachmentSave", "The size of your attachments exceeds the total max size of 25MB");


                }


            }

            if (pepdetails.PrimarypepCountryLOB != null)

            {

                ModelState["PrimarypepCountryLOB"].Errors.Clear();

            }


            if (pepdetails.PrimarypepAssociatedCountryLOB != null)

            {

                ModelState["PrimarypepAssociatedCountryLOB"].Errors.Clear();

            }


            if (pepdetails.EntityFormationCountryLOB != null)

            {

                ModelState["EntityFormationCountryLOB"].Errors.Clear();

            }


            if (pepdetails.CountryofcitizenshipLOB != null)

            {

                ModelState["CountryofcitizenshipLOB"].Errors.Clear();

            }


            GetMasterDataListForPepDetermination();

            foreach (string csv in pepdetails.PrimarypepCountryLOBCSV)

            {

                if (pepdetails.PrimarypepCountryLOB != null)

                    pepdetails.PrimarypepCountryLOB.Add(csv.Split(',').ToList());

            }


            foreach (string csv in pepdetails.PrimarypepAssociatedCountryLOBCSV)

            {

                if (pepdetails.PrimarypepAssociatedCountryLOB != null)

                    pepdetails.PrimarypepAssociatedCountryLOB.Add(csv.Split(',').ToList());

            }


　

　

            if (pepdetails.ECN != null)

            {

                int counter = 0;

                foreach (var ecn in pepdetails.ECN)

                {

                    if ((pepdetails.Flagged[counter] == "Y") && (string.IsNullOrWhiteSpace(pepdetails.DateFlagged[counter])))

                    {

                        ModelState.AddModelError("Flagged", "Please provide flagged date");


                    }

                    counter++;


                }

            }


　

　

            //if (pepdetails.AdditionalEcn != null)

            //{

            //    foreach (var addecn in pepdetails.AdditionalEcn)

            //    {

            //        if (pepdetails.ECNID1 == addecn)

            //        { 

            //            ModelState.AddModelError("ECNID1", "Same ECN has been added as a seconday ECN. Please change either.");

            //            continue;

            //        }

            //    }

            //}


            //if (pepdetails.ECN[0] == "")

            //{

            //    ModelState.AddModelError("ECN" + 0.ToString(), "Enter Ecn");

            //}


            HashSet<string> setEcn = new HashSet<string>();

            //int e = -1;

            for (int j = 0; j < pepdetails.ECN.Count; j++)

            {

                var regexvalidator = new RegexStringValidator("^[0-9]{0,255}$");

                try

                {

                    regexvalidator.Validate(pepdetails.ECN[j]);

                    //check for duplicate ECNs

                    if (!string.IsNullOrWhiteSpace(pepdetails.ECN[j]))

                    {

                        if (setEcn.Contains(pepdetails.ECN[j]))

                        {

                            ModelState.AddModelError("ECN" + j.ToString(), "ECN can not be duplicate");

                        }

                        else

                        {

                            setEcn.Add(pepdetails.ECN[j]);

                        }

                    }

                }

                catch

                {

                    ModelState.AddModelError("ECN" + j.ToString(), "ECN must be numeric");

                }

            }


            if ((pepdetails.LOB.Count == 1) && (pepdetails.LOB[0] == "-1"))

            {

                ModelState.AddModelError("LOB", "At least one LOB is required");

            }


            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)

            {

                if (pepdetails.PrimaryPepFirstName[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepFirstName" + i.ToString(), "Enter First Name");

                }

                if (pepdetails.PrimaryPepLastName[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepLastName" + i.ToString(), "Enter Last Name");

                }

                if (pepdetails.PrimaryPepAKAName[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepAKAName" + i.ToString(), "Enter AKA Name");

                }

                if (pepdetails.PrimaryPepPosition[i] == "-1")

                {

                    ModelState.AddModelError("PrimaryPepPosition" + i.ToString(), "Select position");

                }

                if ((pepdetails.PrimaryPepPosition[i] == "36") && (pepdetails.PrimaryPepPositionOpenField[i] == ""))

                {

                    ModelState.AddModelError("PrimaryPepPositionOpenField" + i.ToString(), "Enter the position");

                }


                if (pepdetails.PrimaryPepAssociation[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepAssociation" + i.ToString(), "Select association");

                }

                if (pepdetails.PepAssociatedCountry[i] == "-1")

                {

                    ModelState.AddModelError("PepAssociatedCountry" + i.ToString(), "Select associated country");

                }

                if (pepdetails.PrimaryPepCountry[i] == "-1")

                {

                    ModelState.AddModelError("PrimaryPepCountry" + i.ToString(), "Select country");

                }


                if ((pepdetails.PrimaryPepCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepBSAApproval[i] == "-1"))

                {

                    ModelState.AddModelError("PrimaryPepBSAApproval" + i.ToString(), "Select BSA Approval Status");

                }


                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimarypepCountryLOBCSV[i] == ""))

                {

                    ModelState.AddModelError("PrimarypepCountryLOB" + i.ToString(), "Select LOB");

                }


                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimaryPepCountryLobDate[i] == ""))

                {

                    ModelState.AddModelError("PrimaryPepCountryLobDate" + i.ToString(), "Select Date");

                }


　

　

                if ((pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "-1"))

                {

                    ModelState.AddModelError("PrimaryPepAssociatedCountryBSAApproval" + i.ToString(), "Select BSA Approval Status");

                }


                if ((pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "1") && (pepdetails.PrimarypepAssociatedCountryLOBCSV[i] == ""))

                {

                    ModelState.AddModelError("PrimarypepAssociatedCountryLOB" + i.ToString(), "Select LOB");

                }

            }


            //if (pepdetails.WFBranchId == -1)

            //{

            //    ModelState.AddModelError("WFBranchId", "Select Branch");

            //}


            if (pepdetails.ServiceRequestTypeId == -1)

            {

                ModelState.AddModelError("ServiceRequestTypeId", "Select Request Type");

            }


            if (pepdetails.BookingOfficeId == -1)

            {

                ModelState.AddModelError("BookingOfficeId", "Select Booking office");

            }


            if ((pepdetails.CustomerType == "Entity") && (pepdetails.PEPEntityName == null))

            {

                ModelState.AddModelError("PEPEntityName", "Enter Entity name");

            }


            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountry == "-1"))

            {

                ModelState.AddModelError("EntityFormationCountry", "Select Entity formation country");

            }


　

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualFirstName == null))

            {

                ModelState.AddModelError("IndividualFirstName", "Enter First name");

            }


            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualLastName == null))

            {

                ModelState.AddModelError("IndividualLastName", "Enter Last name");

            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualAKAName == null))

            {

                ModelState.AddModelError("IndividualAKAName", "Enter AKA name ");

            }


            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipId == -1))

            {

                ModelState.AddModelError("CountryofcitizenshipId", "Select Country of citizenship");

            }


            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipBSAApproval == "-1") && (pepdetails.CountryofcitizenshipRiskDesignation == "High"))

            {

                ModelState.AddModelError("CountryofcitizenshipBSAApproval", "Select BSA approval Status");

            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipLOB == null) && (pepdetails.CountryofcitizenshipBSAApproval == "1"))

            {

                ModelState.AddModelError("CountryofcitizenshipLOB", "Select LOB");

            }


            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryBSAApproval == "-1") && (pepdetails.EntityFormationCountryRiskDesignation == "High"))

            {

                ModelState.AddModelError("EntityFormationCountryBSAApproval", "Select BSA approval Status");

            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryLOB == null) && (pepdetails.EntityFormationCountryBSAApproval == "1"))

            {

                ModelState.AddModelError("EntityFormationCountryLOB", "Select LOB");

            }


            if (ModelState.IsValid)

            {

                TransactionOptions TransOpt = new TransactionOptions();

                TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;


                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))

                {

                    var statusList = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);

                    PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "CR").FirstOrDefault();

                    if (pepdetails.PreviousPepRequestStatusid == null)

                    {

                        pepdetails.PreviousPepRequestStatusid = pepdetails.PepRequestStatusId;

                    }


                    pepdetails.CreatedBy = (string)Session["userId"];

                    pepdetails.CreatedTS = DateTime.Now;


                    if (pepdetails.PepLevelId == -1)

                        pepdetails.PepLevelId = null;

                    if (pepdetails.ReasonNotPepId == -1)

                        pepdetails.ReasonNotPepId = null;

                    if (pepdetails.WFBranchId == -1)

                        pepdetails.WFBranchId = null;


                    try

                    {

                        int ecnCounter = 1;


                        CustomerEntity cust = new CustomerEntity();

                        cust.CustomerName = pepdetails.Customer_Name;

                        cust.CustomerStatus = Int32.Parse(pepdetails.CustomerStatusId);

                        cust.CreatedBy = (string)Session["userId"];

                        cust.CreatedTS = DateTime.Now;


                        List<CustomerEntity> customerwithBSAApprovalCountry = new List<CustomerEntity>();


                        if (pepdetails.CustomerType == "Entity")

                        {

                            cust.IsEntity = true;

                            cust.EntityName = pepdetails.PEPEntityName;

                            cust.EntityFormationCountry = Int32.Parse(pepdetails.EntityFormationCountry);


　

                            if (pepdetails.EntityFormationCountryRiskDesignation == "High")

                            {

                                if (!string.IsNullOrWhiteSpace(pepdetails.EntityFormationCountryBSAApproval) && (pepdetails.EntityFormationCountryBSAApproval != "-1"))

                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.EntityFormationCountryBSAApproval);


                            }


　

                        }

                        else

                        {

                            cust.IsEntity = false;

                            cust.IndividualFirstName = pepdetails.IndividualFirstName;

                            cust.IndividualLastName = pepdetails.IndividualLastName;

                            cust.IndividualLastName2 = pepdetails.IndividualLastName2;

                            cust.IndividualMiddleName = pepdetails.IndividualMiddleName;

                            cust.IndividualAKAName = pepdetails.IndividualAKAName;

                            cust.IndividualDoB = pepdetails.DateofBirth;

                            cust.IndividualCitizenshipCountry = pepdetails.CountryofcitizenshipId;


                            if (pepdetails.CountryofcitizenshipRiskDesignation == "High")

                            {

                                if (!string.IsNullOrWhiteSpace(pepdetails.CountryofcitizenshipBSAApproval) && (pepdetails.CountryofcitizenshipBSAApproval != "-1"))

                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.CountryofcitizenshipBSAApproval);


                            }


                        }


　

                        cust = _pepservice.AddNewCustomer(cust);

                        pepdetails.CustomerId = cust.CustomerID;


                        if (cust.CountryBSAApprovalId == 1)

                            customerwithBSAApprovalCountry.Add(cust);


　

                        if ((pepdetails.EntityFormationCountryLOB != null) && (pepdetails.CustomerType == "Entity"))

                        {

                            int p = 0;

                            foreach (var addlob in pepdetails.EntityFormationCountryLOB)

                            {

                                if (addlob == "-1")

                                {

                                    //p--;

                                    continue;

                                }

                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();

                                custcountrylob.CustomerId = cust.CustomerID;

                                custcountrylob.LobId = Int32.Parse(addlob);

                                custcountrylob.CreatedBy = (string)Session["userId"];

                                custcountrylob.CreatedTS = DateTime.Now;

                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);

                            }

                            p++;

                        }


                        else if ((pepdetails.CountryofcitizenshipLOB != null) && (pepdetails.CustomerType == "Individual"))

                        {

                            int p = 0;

                            foreach (var addlob in pepdetails.CountryofcitizenshipLOB)

                            {

                                if (addlob == "-1")

                                {

                                    //p--;

                                    continue;

                                }

                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();

                                custcountrylob.CustomerId = cust.CustomerID;

                                custcountrylob.LobId = Int32.Parse(addlob);

                                custcountrylob.CreatedBy = (string)Session["userId"];

                                custcountrylob.CreatedTS = DateTime.Now;

                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);


                            }

                            p++;

                        }


　

                        if (pepdetails.PepTypeId == -1)

                        {

                            pepdetails.PepTypeId = null;

                        }


　

                        pepdetails.PepRequestStatusId = statusEntity.PEPRequestStatusID;

                        pepdetails.PepRequestStatus = "CR";

                        var crs = _pepservice.GEtCrsforpepid(pepdetails.PepId);

                        if (crs.Count() == 0)

                        {

                            pepdetails.CrNo = 1;


                        }

                        else {

                            pepdetails.CrNo = (crs.ToList().Last().CrNo + 1);

                        }

                        var pepCR = _pepservice.AddNewChangeRequest(pepdetails);


                        //var pepprevious = _pepservice.GetSinglePEPbyid(pepdetails.PepId);

                        //if (pepprevious.PreviousPepRequestStatusid == null)

                        // {

                        //pepdetails.PreviousPepRequestStatusid = pepprevious.PepRequestStatusId;


                        //}


　

                        var result = _pepservice.UpdateCRforPEP(pepdetails);


                        pepdetails.CRId = pepCR.ChangeRequestId;

                        _pepservice.AssignPepRequest(pepdetails);


　

                        for (int i = 0; i < pepdetails.ECN.Count; i++)

                        {


                            EcnEntity ecna = new EcnEntity();

                            ecna.PEPID = pepdetails.PepId;

                            ecna.ECN = pepdetails.ECN[i];

                            if (pepdetails.Flagged[i] == "Y")

                            {

                                ecna.IsFlagged = true;

                                ecna.DateFlagged = Convert.ToDateTime(pepdetails.DateFlagged[i]);

                            }

                            if (pepdetails.Flagged[i] == "N")

                            {

                                ecna.IsFlagged = false;

                            }

                            ecna.PepRequestStatusID = statusEntity.PEPRequestStatusID;

                            ecna.EcnSeqVal = ecnCounter.ToString();

                            ecna.EcnSeqValNum = ecnCounter.ToString();

                            ecna.CreatedBy = (string)Session["userId"];

                            ecna.CreatedTS = DateTime.Now;

                            ecna.ChangeRequestID = pepCR.ChangeRequestId;


                            ecna = _pepservice.AddNewEcn(ecna);

                            ecnCounter++;

                        }


　

                        //Add new Lob

                        if (pepdetails.LOB != null)

                        {

                            foreach (var addlob in pepdetails.LOB)

                            {

                                if (addlob == "-1")

                                    continue;

                                LobPepEntity lobpep = new LobPepEntity();

                                lobpep.PepId = pepdetails.PepId;

                                lobpep.LobId = Int32.Parse(addlob);

                                /*lobpep.Lobflag = 1;*/// 1 for LOB normal

                                lobpep.PepRequestStatusID = statusEntity.PEPRequestStatusID;

                                lobpep.ChangeRequestID = pepCR.ChangeRequestId;

                                lobpep.CreatedBy = (string)Session["userId"];

                                lobpep.CreatedTS = DateTime.Now;

                                lobpep = _pepservice.AddNewLobPep(lobpep);

                            }

                        }


　

                        List<PrimaryPepEntity> lppe = new List<PrimaryPepEntity>();

                        List<PrimaryPepEntity> lppe1 = new List<PrimaryPepEntity>();


                        // Add new Primary Pep

                        if (pepdetails.PrimaryPepFirstName != null)

                        {

                            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)

                            {

                                PrimaryPepEntity primarypep = new PrimaryPepEntity();

                                primarypep.PepId = pepdetails.PepId;

                                primarypep.FirstName = pepdetails.PrimaryPepFirstName[i];

                                primarypep.LastName = pepdetails.PrimaryPepLastName[i];

                                primarypep.MiddleName = pepdetails.PrimaryPepMiddleName[i];

                                primarypep.LastName2 = pepdetails.PrimaryPepLastName2[i];

                                primarypep.AKAName = pepdetails.PrimaryPepAKAName[i];

                                primarypep.PrimaryPepPositionOpenField = pepdetails.PrimaryPepPositionOpenField[i];


                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociation[i]) && (pepdetails.PrimaryPepAssociation[i] != "-1"))

                                    primarypep.PrimaryPepAssociationId = Int32.Parse(pepdetails.PrimaryPepAssociation[i]);


                                if (!string.IsNullOrWhiteSpace(pepdetails.PepAssociatedCountry[i]) && (pepdetails.PepAssociatedCountry[i] != "-1"))

                                    primarypep.PrimaryPepAssociatedCountryId = Int32.Parse(pepdetails.PepAssociatedCountry[i]);


                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepPosition[i]) && (pepdetails.PrimaryPepPosition[i] != "-1"))

                                    primarypep.PrimaryPepPositionId = Int32.Parse(pepdetails.PrimaryPepPosition[i]);


                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepCountry[i]) && (pepdetails.PrimaryPepCountry[i] != "-1"))

                                    primarypep.PrimaryPepCountryId = Int32.Parse(pepdetails.PrimaryPepCountry[i]);


                                if (pepdetails.PrimaryPepCountryRiskDesignation[i] == "High")

                                {

                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))

                                        primarypep.CountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepBSAApproval[i]);

                                    if (primarypep.CountryBSAApprovalId == 1)

                                    {

                                        if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))

                                            if (pepdetails.PrimaryPepCountryLobDate != null)

                                            {

                                                primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);

                                            }

                                        primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);

                                    }

                                }


　

                                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High")

                                {

                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))

                                        primarypep.AssociatedCountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]);

                                    //if (primarypep.AssociatedCountryBSAApprovalId == 1)

                                    //{

                                    //    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))

                                    //        if (pepdetails.PrimaryPepAssociatedCountryLobDate != null)

                                    //        {

                                    //            primarypep.AssociatedCountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepAssociatedCountryLobDate[i]);

                                    //        }

                                    //    primarypep.AssociatedCountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepAssociatedCountryLobDate[i]);

                                    //}

                                }


　

　

　

　

                                primarypep.CreatedBy = (string)Session["userId"];

                                primarypep.CreatedTS = DateTime.Now;

                                primarypep.PepRequestStatusID = statusEntity.PEPRequestStatusID;

                                primarypep.ChangeRequestID = pepCR.ChangeRequestId;

                                primarypep.PreviousPrimaryPepId = pepdetails.PrimaryPepId[i];

                                primarypep = _pepservice.AddNewPrimaryPep(primarypep);

                                if (primarypep.CountryBSAApprovalId == 1)

                                    lppe.Add(primarypep);

                                if (primarypep.AssociatedCountryBSAApprovalId == 1)

                                    lppe1.Add(primarypep);


                            }

                        }


　

                        if (pepdetails.PrimarypepCountryLOB != null)

                        {

                            int p = 0;

                            foreach (var addloblist in pepdetails.PrimarypepCountryLOB)

                            {

                                bool hasAnyValidLOB = false;

                                foreach (var addlob in addloblist)

                                {

                                    if (string.IsNullOrWhiteSpace(addlob))

                                    {

                                        continue;

                                    }

                                    PrimaryPepCountryLobEntity primarypeplob = new PrimaryPepCountryLobEntity();

                                    primarypeplob.PrimaryPepId = lppe[p].PrimaryPepId;

                                    primarypeplob.LobId = Int32.Parse(addlob);

                                    primarypeplob.CreatedBy = (string)Session["userId"];

                                    primarypeplob.CreatedTS = DateTime.Now;

                                    primarypeplob = _pepservice.AddNewPrimaryPepLob(primarypeplob);

                                    hasAnyValidLOB = true;

                                }

                                if (hasAnyValidLOB)

                                {

                                    p++;

                                }

                            }

                        }


                        if (pepdetails.PrimarypepAssociatedCountryLOB != null)

                        {

                            int p = 0;

                            foreach (var addloblist in pepdetails.PrimarypepAssociatedCountryLOB)

                            {

                                bool hasAnyValidLOB = false;

                                foreach (var addlob in addloblist)

                                {

                                    if (string.IsNullOrWhiteSpace(addlob))

                                    {

                                        continue;

                                    }

                                    PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob = new PrimaryPepAssociatedCountryLobEntity();

                                    primarypepassociatedcountrylob.PrimaryPepId = lppe1[p].PrimaryPepId;

                                    primarypepassociatedcountrylob.LobId = Int32.Parse(addlob);

                                    primarypepassociatedcountrylob.CreatedBy = (string)Session["userId"];

                                    primarypepassociatedcountrylob.CreatedTS = DateTime.Now;

                                    primarypepassociatedcountrylob = _pepservice.AddNewPrimaryPepAssociatedCountryLob(primarypepassociatedcountrylob);

                                    hasAnyValidLOB = true;

                                }

                                if (hasAnyValidLOB)

                                {

                                    p++;

                                }

                            }

                        }


                        if (pepdetails.AttachhmentList == null)

                        {

                            pepdetails.AttachhmentList = new List<AttachmentEntity>();


                        }


                        //Add Uploaded Attachment

                        if (pepdetails.Uploadfiles != null && pepdetails.Uploadfiles.Count > 0)

                        {

                            for (int i = 0; i < pepdetails.Uploadfiles.Count; i++)

                            {

                                if (pepdetails.Uploadfiles[i] != null)

                                {

                                    var storagePath = SaveUploadedFileToStore(pepdetails.Uploadfiles[i]);


                                    AttachmentEntity attachment = new AttachmentEntity();

                                    attachment.FileStoragePath = storagePath;

                                    attachment.FileName = System.IO.Path.GetFileName(pepdetails.Uploadfiles[i].FileName);


                                    attachment.PepId = pepdetails.PepId;

                                    attachment.CreatedBy = (string)Session["userId"];

                                    attachment.CreatedTS = DateTime.Now;

                                    attachment.PepRequestStatusID = statusEntity.PEPRequestStatusID;

                                    attachment.ChangeRequestID = pepCR.ChangeRequestId;

                                    attachment = _pepservice.AddNewAttachment(attachment);


                                    pepdetails.AttachhmentList.Add(attachment);

                                }

                            }

                        }


                        trans.Complete();


                    }

                    catch (Exception ex)

                    {

                        trans.Dispose();

                        pepdetails.success = false;

                        pepdetails.searchFlag = "none";

                        ModelState.AddModelError("Failure", "CR could not be created!");

                        pepdetails.PEPRequestStatu = _pepservice.GetAllPEPDetails().Where(i => i.PepId == pepdetails.PepId).Select(i => i.PEPRequestStatu).FirstOrDefault();

                        pepdetails.PepRequestStatus = pepdetails.PEPRequestStatu.StatusName;


                        if (pepdetails.LOB == null)

                        {

                            pepdetails.LOB = new List<string>();

                            pepdetails.LOB.Add("");

                        }


                        if (pepdetails.MajorLOB == null)

                        {

                            pepdetails.MajorLOB = new List<string>();

                            pepdetails.MajorLOB.Add("");

                        }

                        if (pepdetails.PrimaryPepCountry == null)

                        {

                            pepdetails.PrimaryPepCountry = new List<string>();

                            pepdetails.PrimaryPepCountry.Add("");

                        }


                        if (pepdetails.PrimaryPepCountryRiskDesignation == null)

                        {

                            pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();

                            pepdetails.PrimaryPepCountryRiskDesignation.Add("");

                        }


                        if (pepdetails.PepAssociatedCountry == null)

                        {

                            pepdetails.PepAssociatedCountry = new List<string>();

                            pepdetails.PepAssociatedCountry.Add("");

                        }


                        if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)

                        {

                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();

                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");

                        }

                        return View("PEPDeterminationForm", pepdetails);

                    }

                }

                var pepfordetermination = _pepservice.GetSinglePep(pepdetails.PepId.Value);

                pepdetails.PepDeterminationComments = pepfordetermination.PepDeterminationComments;

                pepdetails.IsPep = pepfordetermination.IsPep;

                pepdetails.IsHoganFlagSet = pepfordetermination.IsHoganFlagSet;

                pepdetails.ReasonNotPepId = pepfordetermination.ReasonNotPepId;

                pepdetails.DeterminationUpdationDate = pepfordetermination.DeterminationUpdationDate;

                pepdetails.PepLevelId = pepfordetermination.PepLevelId;

                pepdetails.PepTypeId = pepfordetermination.PepTypeId;

                pepdetails.HoganFlagDate = pepfordetermination.HoganFlagDate;

                pepdetails.success = true;

                pepdetails.searchFlag = "none";

                ModelState.AddModelError("Success", "CR submitted successfully!");


                return View("PEPDeterminationForm", pepdetails);

            }

            else {

                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");

                if (pepdetails.AttachhmentList == null)

                {

                    pepdetails.AttachhmentList = new List<AttachmentEntity>();


                }

                if (pepdetails.PepId == null)

                    pepdetails.InitialRequestDate = DateTime.Now;

                pepdetails.success = false;

                pepdetails.searchFlag = "none";

                if (pepdetails.LOB == null)

                {

                    pepdetails.LOB = new List<string>();

                    pepdetails.LOB.Add("");

                }


                if (pepdetails.MajorLOB == null)

                {

                    pepdetails.MajorLOB = new List<string>();

                    pepdetails.MajorLOB.Add("");

                }

                if (pepdetails.PrimaryPepCountry == null)

                {

                    pepdetails.PrimaryPepCountry = new List<string>();

                    pepdetails.PrimaryPepCountry.Add("");

                }

                if (pepdetails.PrimaryPepCountryRiskDesignation == null)

                {

                    pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();

                    pepdetails.PrimaryPepCountryRiskDesignation.Add("");

                }


                if (pepdetails.PepAssociatedCountry == null)

                {

                    pepdetails.PepAssociatedCountry = new List<string>();

                    pepdetails.PepAssociatedCountry.Add("");

                }

                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)

                {

                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();

                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");

                }

                //var pepfordetermination = _pepservice.GetAllPEPDetails().Where(i => i.PepId == pepdetails.PepId).FirstOrDefault();

                //pepdetails.IsPep = pepfordetermination.IsPep;

                //pepdetails.IsHoganFlagSet = pepfordetermination.IsHoganFlagSet;

                //pepdetails.ReasonNotPepId = pepfordetermination.ReasonNotPepId;

                //pepdetails.DeterminationUpdationDate = pepfordetermination.DeterminationUpdationDate;

                //pepdetails.PepLevelId = pepfordetermination.PepLevelId;

                //pepdetails.PepTypeId = pepfordetermination.PepTypeId;

                //pepdetails.HoganFlagDate = pepfordetermination.HoganFlagDate;


                return View("PEPDeterminationForm", pepdetails);

            }


        }
        ----------
         [CustomActionLoggingFilter]

        public ActionResult UpdatePEPDeterminationForm(PEPEntity pepdetails)

        {

            if ((pepdetails.AttachhmentList != null) && (pepdetails.Uploadfiles != null))

            {

                if ((pepdetails.Uploadfiles.Count + pepdetails.AttachhmentList.Count) > 5)

                {

                    ModelState.AddModelError("Attachment", "Attachments cannot be more than 5");

                }

            }

            else if (pepdetails.Uploadfiles != null && pepdetails.Uploadfiles.Count > 5)

            {

                ModelState.AddModelError("Attachment", "Attachments cannot be more than 5");

            }


            if ((pepdetails.Uploadfiles != null) && (pepdetails.Uploadfiles[0] != null))

            {

                var contentlengthofattachment = pepdetails.Uploadfiles.Sum(x => x.ContentLength);

                if (contentlengthofattachment > 25000 * 1024)

                {

                    ModelState.AddModelError("AttachmentSave", "The size of your attachments exceeds the total max size of 25MB");


                }


            }

            if (pepdetails.PrimarypepCountryLOB != null)

            {

                ModelState["PrimarypepCountryLOB"].Errors.Clear();

            }


            if (pepdetails.PrimarypepAssociatedCountryLOB != null)

            {

                ModelState["PrimarypepAssociatedCountryLOB"].Errors.Clear();

            }


            if (pepdetails.EntityFormationCountryLOB != null)

            {

                ModelState["EntityFormationCountryLOB"].Errors.Clear();

            }


            if (pepdetails.CountryofcitizenshipLOB != null)

            {

                ModelState["CountryofcitizenshipLOB"].Errors.Clear();

            }


            GetMasterDataListForPepDetermination();

            foreach (string csv in pepdetails.PrimarypepCountryLOBCSV)

            {

                if (pepdetails.PrimarypepCountryLOB != null)

                    pepdetails.PrimarypepCountryLOB.Add(csv.Split(',').ToList());

            }


            foreach (string csv in pepdetails.PrimarypepAssociatedCountryLOBCSV)

            {

                if (pepdetails.PrimarypepAssociatedCountryLOB != null)

                    pepdetails.PrimarypepAssociatedCountryLOB.Add(csv.Split(',').ToList());

            }


　

            if (pepdetails.ECN != null)

            {

                int counter = 0;

                foreach (var ecn in pepdetails.ECN)

                {

                    if ((pepdetails.Flagged[counter] == "Y") && (string.IsNullOrWhiteSpace(pepdetails.DateFlagged[counter])))

                    {

                        ModelState.AddModelError("Flagged" + counter.ToString(), "Please provide flagged date");


                    }

                    counter++;


                }

            }


            if (pepdetails.ECN != null)

            {

                if ((pepdetails.ECN[0] == "") && (pepdetails.PrimaryEcnNotProvided == false))

                {

                    ModelState.AddModelError("PrimaryEcnNotProvided", "Either provide ECN or check this checkbox");

                }

            }

            if (pepdetails.ECN != null)

            {

                if ((pepdetails.ECN[0] != "") && (pepdetails.PrimaryEcnNotProvided == true))

                {

                    ModelState.AddModelError("PrimaryEcnNotProvided", "ECN is already provided, uncheck this checkbox");

                }

            }


            HashSet<string> setEcn = new HashSet<string>();

            for (int j = 0; j < pepdetails.ECN.Count; j++)

            {

                var regexvalidator = new RegexStringValidator("^[0-9]{0,255}$");

                try

                {

                    regexvalidator.Validate(pepdetails.ECN[j]);

                    //check for duplicate ECNs

                    if (!string.IsNullOrWhiteSpace(pepdetails.ECN[j]))

                    {

                        if (setEcn.Contains(pepdetails.ECN[j]))

                        {

                            ModelState.AddModelError("ECN" + j.ToString(), "ECN can not be duplicate");

                        }

                        else

                        {

                            setEcn.Add(pepdetails.ECN[j]);

                        }

                    }

                }

                catch

                {

                    ModelState.AddModelError("ECN" + j.ToString(), "ECN must be numeric");

                }

            }


            if ((pepdetails.LOB.Count == 1) && (pepdetails.LOB[0] == "-1"))

            {

                ModelState.AddModelError("LOB", "At least one LOB is required");

            }


            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)

            {

                if (pepdetails.PrimaryPepFirstName[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepFirstName" + i.ToString(), "Enter First Name");

                }

                if (pepdetails.PrimaryPepLastName[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepLastName" + i.ToString(), "Enter Last Name");

                }

                if (pepdetails.PrimaryPepAKAName[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepAKAName" + i.ToString(), "Enter AKA Name");

                }

                if (pepdetails.PrimaryPepPosition[i] == "-1")

                {

                    ModelState.AddModelError("PrimaryPepPosition" + i.ToString(), "Select position");

                }

                if ((pepdetails.PrimaryPepPosition[i] == "36") && (pepdetails.PrimaryPepPositionOpenField[i] == ""))

                {

                    ModelState.AddModelError("PrimaryPepPositionOpenField" + i.ToString(), "Enter the position");

                }


                if (pepdetails.PrimaryPepAssociation[i] == "")

                {

                    ModelState.AddModelError("PrimaryPepAssociation" + i.ToString(), "Select association");

                }

                if (pepdetails.PepAssociatedCountry[i] == "-1")

                {

                    ModelState.AddModelError("PepAssociatedCountry" + i.ToString(), "Select associated country");

                }

                if (pepdetails.PrimaryPepCountry[i] == "-1")

                {

                    ModelState.AddModelError("PrimaryPepCountry" + i.ToString(), "Select country");

                }


                if ((pepdetails.PrimaryPepCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepBSAApproval[i] == "-1"))

                {

                    ModelState.AddModelError("PrimaryPepBSAApproval" + i.ToString(), "Select BSA Approval Status");

                }


                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimarypepCountryLOBCSV[i] == ""))

                {

                    ModelState.AddModelError("PrimarypepCountryLOB" + i.ToString(), "Select LOB");

                }


                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimaryPepCountryLobDate[i] == ""))

                {

                    ModelState.AddModelError("PrimaryPepCountryLobDate" + i.ToString(), "Select Date");

                }


　

　

                if ((pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "-1"))

                {

                    ModelState.AddModelError("PrimaryPepAssociatedCountryBSAApproval" + i.ToString(), "Select BSA Approval Status");

                }


                if ((pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "1") && (pepdetails.PrimarypepAssociatedCountryLOBCSV[i] == ""))

                {

                    ModelState.AddModelError("PrimarypepAssociatedCountryLOB" + i.ToString(), "Select LOB");

                }

            }


            //if (pepdetails.WFBranchId == -1)

            //{

            //    ModelState.AddModelError("WFBranchId", "Select Branch");

            //}


            if (pepdetails.ServiceRequestTypeId == -1)

            {

                ModelState.AddModelError("ServiceRequestTypeId", "Select Request Type");

            }


            if (pepdetails.BookingOfficeId == -1)

            {

                ModelState.AddModelError("BookingOfficeId", "Select Booking office");

            }


            if ((pepdetails.CustomerType == "Entity") && (pepdetails.PEPEntityName == null))

            {

                ModelState.AddModelError("PEPEntityName", "Enter Entity name");

            }


            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountry == "-1"))

            {

                ModelState.AddModelError("EntityFormationCountry", "Select Entity formation country");

            }


　

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualFirstName == null))

            {

                ModelState.AddModelError("IndividualFirstName", "Enter First name");

            }


            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualLastName == null))

            {

                ModelState.AddModelError("IndividualLastName", "Enter Last name");

            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualAKAName == null))

            {

                ModelState.AddModelError("IndividualAKAName", "Enter AKA name ");

            }


            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipId == -1))

            {

                ModelState.AddModelError("CountryofcitizenshipId", "Select Country of citizenship");

            }


            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipBSAApproval == "-1") && (pepdetails.CountryofcitizenshipRiskDesignation == "High"))

            {

                ModelState.AddModelError("CountryofcitizenshipBSAApproval", "Select BSA approval Status");

            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipLOB == null) && (pepdetails.CountryofcitizenshipBSAApproval == "1"))

            {

                ModelState.AddModelError("CountryofcitizenshipLOB", "Select LOB");

            }


            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryBSAApproval == "-1") && (pepdetails.EntityFormationCountryRiskDesignation == "High"))

            {

                ModelState.AddModelError("EntityFormationCountryBSAApproval", "Select BSA approval Status");

            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryLOB == null) && (pepdetails.EntityFormationCountryBSAApproval == "1"))

            {

                ModelState.AddModelError("EntityFormationCountryLOB", "Select LOB");

            }


            if (pepdetails.BtnSubmit == "Submit")

            {


                if ((pepdetails.Pep == "Y") && (pepdetails.PepTypeId == -1))

                {

                    ModelState.AddModelError("PepTypeId", "Enter Pep Type ");

                }

                if ((pepdetails.Pep == "Y") && (pepdetails.PepLevelId == -1))

                {

                    ModelState.AddModelError("PepLevelId", "Select Pep Level");

                }


                if ((pepdetails.Pep == "Y") && ((pepdetails.HoganFlagged == "") || (pepdetails.HoganFlagged == null)))

                {

                    ModelState.AddModelError("HoganFlagged", "Select one");

                }

                if ((pepdetails.Pep == "Y") && (pepdetails.HoganFlagged == "Y") && (pepdetails.HoganFlagDate == null))

                {

                    ModelState.AddModelError("HoganFlagDate", "Select Flag date");

                }


                if ((pepdetails.Pep == "N") && (pepdetails.ReasonNotPepId == -1))

                {

                    ModelState.AddModelError("ReasonNotPepId", "Select a reason");

                }

                if (pepdetails.PepDeterminationComments == null)

                {

                    ModelState.AddModelError("PepDeterminationComments", "Enter comments");

                }

                if ((pepdetails.Pep == null) || (pepdetails.Pep == ""))

                {

                    ModelState.AddModelError("Pep", "Select one");

                }


            }


　

            if (pepdetails.BtnSubmit == "Reject")

            {

                if (pepdetails.PepDeterminationComments == null)

                {

                    ModelState.AddModelError("PepDeterminationComments", "Enter comments");

                }

            }


　

            if (ModelState.IsValid)

            {

                ModelState.Clear();

                TransactionOptions TransOpt = new TransactionOptions();

                TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;


                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))

                {

                    var existingPep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);


                    //add the row to be updated in history table.

                    var goingToBeChangedRow = existingPep;

                    Mapper.CreateMap<PEPEntity, PepHistoryEntity>();

                    var mappedEntity = Mapper.Map<PEPEntity, PepHistoryEntity>(goingToBeChangedRow);

                    mappedEntity.CreatedBy = (string)Session["userId"];

                    mappedEntity.CreatedTS = DateTime.Now;

                    mappedEntity.UpdatedBy = null;

                    mappedEntity.UpdatedTS = null;

                    var addedToPepHistory = _pepservice.AddNewPepHistory(mappedEntity);


                    if (pepdetails.BtnSubmit == "Reject")

                    {


                        existingPep.IsPep = null;

                        pepdetails.Pep = null;


                        existingPep.PepTypeId = null;

                        existingPep.PepLevelId = null;

                        existingPep.IsHoganFlagSet = null;

                        existingPep.HoganFlagDate = null;


                        pepdetails.PepTypeId = null;

                        pepdetails.PepLevelId = null;

                        pepdetails.HoganFlagged = null;

                        pepdetails.HoganFlagDate = null;


                        existingPep.ReasonNotPepId = null;

                        pepdetails.ReasonNotPepId = null;


                    }

                    else {


                        if (pepdetails.Pep == "Y")

                        {

                            existingPep.IsPep = true;

                            existingPep.Pep = pepdetails.Pep;

                            existingPep.PepTypeId = pepdetails.PepTypeId;

                            existingPep.PepLevelId = pepdetails.PepLevelId;

                            if (pepdetails.HoganFlagged == "Y")

                            {

                                pepdetails.IsHoganFlagSet = true;


                            }

                            else if (pepdetails.HoganFlagged == "N")

                            {

                                pepdetails.IsHoganFlagSet = false;


                            }

                            existingPep.IsHoganFlagSet = pepdetails.IsHoganFlagSet;

                            existingPep.HoganFlagged = pepdetails.HoganFlagged;

                            existingPep.HoganFlagDate = pepdetails.HoganFlagDate;

                            existingPep.ReasonNotPepId = null;

                        }

                        else if (pepdetails.Pep == "N")

                        {

                            existingPep.IsPep = false;

                            existingPep.Pep = pepdetails.Pep;

                            existingPep.ReasonNotPepId = pepdetails.ReasonNotPepId;

                            existingPep.PepTypeId = null;

                            existingPep.PepLevelId = null;

                            existingPep.HoganFlagged = pepdetails.HoganFlagged;

                            existingPep.IsHoganFlagSet = null;

                            existingPep.HoganFlagDate = null;

                        }


                        else if ((pepdetails.Pep == "") || (pepdetails.Pep == null))

                        {

                            existingPep.IsPep = null;

                            existingPep.Pep = pepdetails.Pep;

                            existingPep.PepTypeId = null;

                            existingPep.PepLevelId = null;

                            existingPep.IsHoganFlagSet = null;

                            existingPep.HoganFlagged = pepdetails.HoganFlagged;

                            existingPep.HoganFlagDate = null;

                            existingPep.ReasonNotPepId = null;

                        }


　

                    }

                    existingPep.PepDeterminationComments = pepdetails.PepDeterminationComments;

                    existingPep.DeterminationUpdationDate = DateTime.Now;


                    //Update the related rows in different pep related tables except attachment

                    _pepservice.UpdateRowsFromRelatedTablesForRejectionWorkflow(pepdetails.PepId.Value);


                    //todo: check on following three

                    //existingPep.CreatedBy = (string)Session["userId"];

                    existingPep.UpdatedBy = (string)Session["userId"];

                    existingPep.UpdatedTS = DateTime.Now;


                    if (pepdetails.PepLevelId == -1)

                        existingPep.PepLevelId = null;

                    if (pepdetails.ReasonNotPepId == -1)

                        existingPep.ReasonNotPepId = null;

                    if (pepdetails.PepTypeId == -1)

                        existingPep.PepTypeId = null;

                    if (pepdetails.WFBranchId == -1)

                        pepdetails.WFBranchId = null;


                    existingPep.RequestorComments = pepdetails.RequestorComments;

                    existingPep.WFBranchId = pepdetails.WFBranchId;

                    existingPep.BookingOfficeId = pepdetails.BookingOfficeId;

                    existingPep.WCISNumber = pepdetails.WCISNumber;

                    existingPep.ServiceRequestTypeId = pepdetails.ServiceRequestTypeId;


　

                    var statusList = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);

                    PEPRequestStatuEntity statusPendingEntity = statusList.Where(x => x.StatusName == "Pending").FirstOrDefault();


　

                    if (pepdetails.BtnSubmit == "Submit")

                    {

                        PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Completed").FirstOrDefault();

                        existingPep.PepRequestStatusId = statusEntity.PEPRequestStatusID;

                        pepdetails.PepRequestStatus = "Completed";


                    }

                    //else if (pepdetails.BtnSubmit == "Save")

                    //{


                    //    PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Pending").FirstOrDefault();

                    //    existingPep.PepRequestStatusId = statusEntity.PEPRequestStatusID;

                    //    pepdetails.PepRequestStatus = "Pending";


　

                    //}

                    else if (pepdetails.BtnSubmit == "Reject")

                    {

                        PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Rejected").FirstOrDefault();

                        existingPep.PepRequestStatusId = statusEntity.PEPRequestStatusID;

                        pepdetails.PepRequestStatus = "Rejected";


　

　

                        //Get the request assignment table row.


                        var reqassignmentDetail = _pepservice.GetSingleRequestAssignmentRowbyid(existingPep.PepId, "PEP");

                        var reqassignmentDetailUpdate = _pepservice.GetSingleRequestAssignmentRowbyid(existingPep.PepId, "PEP");


　

                        UserEntity userEn = _userservice.FindUserByEmailID(existingPep.CreatedBy);

                        reqassignmentDetail.UserId = userEn.UserID;

                        reqassignmentDetail.ReassignedDate = DateTime.Now;

                        reqassignmentDetail.UpdatedBy = (string)Session["userId"];

                        reqassignmentDetail.UpdatedTS = DateTime.Now;


　

                        //add a new row.


                        var addedRow = _pepservice.AddNew(reqassignmentDetail);


                        //Update the request assignment table row.

                        var rowToBeEndDated = reqassignmentDetailUpdate;

                        rowToBeEndDated.EndDate = DateTime.Now;

                        rowToBeEndDated.UpdatedBy = (string)Session["userId"];

                        rowToBeEndDated.UpdatedTS = DateTime.Now;


                        int result = _pepservice.UpdateRequestAssignmentRow(rowToBeEndDated);


                    }


                    try

                    {

                        int ecnCounter = 1;


                        CustomerEntity cust = new CustomerEntity();

                        cust.CustomerName = pepdetails.Customer_Name;

                        cust.CustomerStatus = Int32.Parse(pepdetails.CustomerStatusId);

                        cust.CreatedBy = (string)Session["userId"];

                        cust.CreatedTS = DateTime.Now;


                        List<CustomerEntity> customerwithBSAApprovalCountry = new List<CustomerEntity>();


                        if (pepdetails.CustomerType == "Entity")

                        {

                            cust.IsEntity = true;

                            cust.EntityName = pepdetails.PEPEntityName;

                            cust.EntityFormationCountry = Int32.Parse(pepdetails.EntityFormationCountry);


　

                            if (pepdetails.EntityFormationCountryRiskDesignation == "High")

                            {

                                if (!string.IsNullOrWhiteSpace(pepdetails.EntityFormationCountryBSAApproval) && (pepdetails.EntityFormationCountryBSAApproval != "-1"))

                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.EntityFormationCountryBSAApproval);


                            }


　

                        }

                        else

                        {

                            cust.IsEntity = false;

                            cust.IndividualFirstName = pepdetails.IndividualFirstName;

                            cust.IndividualLastName = pepdetails.IndividualLastName;

                            cust.IndividualLastName2 = pepdetails.IndividualLastName2;

                            cust.IndividualMiddleName = pepdetails.IndividualMiddleName;

                            cust.IndividualAKAName = pepdetails.IndividualAKAName;

                            cust.IndividualDoB = pepdetails.DateofBirth;

                            cust.IndividualCitizenshipCountry = pepdetails.CountryofcitizenshipId;


                            if (pepdetails.CountryofcitizenshipRiskDesignation == "High")

                            {

                                if (!string.IsNullOrWhiteSpace(pepdetails.CountryofcitizenshipBSAApproval) && (pepdetails.CountryofcitizenshipBSAApproval != "-1"))

                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.CountryofcitizenshipBSAApproval);


                            }


                        }


　

                        cust = _pepservice.AddNewCustomer(cust);

                        existingPep.CustomerId = cust.CustomerID;


                        if (cust.CountryBSAApprovalId == 1)

                            customerwithBSAApprovalCountry.Add(cust);


　

                        if ((pepdetails.EntityFormationCountryLOB != null) && (pepdetails.CustomerType == "Entity"))

                        {

                            foreach (var addlob in pepdetails.EntityFormationCountryLOB)

                            {

                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();

                                custcountrylob.CustomerId = cust.CustomerID;

                                custcountrylob.LobId = Int32.Parse(addlob);

                                custcountrylob.CreatedBy = (string)Session["userId"];

                                custcountrylob.CreatedTS = DateTime.Now;

                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);

                            }

                        }


                        else if ((pepdetails.CountryofcitizenshipLOB != null) && (pepdetails.CustomerType == "Individual"))

                        {

                            foreach (var addlob in pepdetails.CountryofcitizenshipLOB)

                            {

                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();

                                custcountrylob.CustomerId = cust.CustomerID;

                                custcountrylob.LobId = Int32.Parse(addlob);

                                custcountrylob.CreatedBy = (string)Session["userId"];

                                custcountrylob.CreatedTS = DateTime.Now;

                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);


                            }

                        }


                        //Update the record in PEP table.

                        int updatePEPRecord = _pepservice.Update(existingPep);


　

　

                        for (int i = 0; i < pepdetails.ECN.Count; i++)

                        {


                            EcnEntity ecna = new EcnEntity();

                            ecna.PEPID = pepdetails.PepId;

                            ecna.ECN = pepdetails.ECN[i];

                            if (i == 0)

                            {

                                ecna.PrimaryEcnNotProvided = pepdetails.PrimaryEcnNotProvided;

                            }

                            if (pepdetails.Flagged[i] == "Y")

                            {

                                ecna.IsFlagged = true;

                                ecna.DateFlagged = Convert.ToDateTime(pepdetails.DateFlagged[i]);

                            }

                            if (pepdetails.Flagged[i] == "N")

                            {

                                ecna.IsFlagged = false;

                            }

                            ecna.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;

                            ecna.EcnSeqVal = ecnCounter.ToString();

                            ecna.EcnSeqValNum = ecnCounter.ToString();

                            ecna.CreatedBy = (string)Session["userId"];

                            ecna.CreatedTS = DateTime.Now;


                            ecna = _pepservice.AddNewEcn(ecna);

                            ecnCounter++;

                        }


　

                        //Add new Lob

                        if (pepdetails.LOB != null)

                        {

                            foreach (var addlob in pepdetails.LOB)

                            {

                                if (addlob == "-1")

                                    continue;

                                LobPepEntity lobpep = new LobPepEntity();

                                lobpep.PepId = pepdetails.PepId;

                                lobpep.LobId = Int32.Parse(addlob);


                                lobpep.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;

                                lobpep.CreatedBy = (string)Session["userId"];

                                lobpep.CreatedTS = DateTime.Now;

                                lobpep = _pepservice.AddNewLobPep(lobpep);

                            }

                        }


　

                        List<PrimaryPepEntity> lppe = new List<PrimaryPepEntity>();

                        List<PrimaryPepEntity> lppe1 = new List<PrimaryPepEntity>();


                        // Add new Primary Pep

                        if (pepdetails.PrimaryPepFirstName != null)

                        {

                            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)

                            {

                                PrimaryPepEntity primarypep = new PrimaryPepEntity();

                                primarypep.PepId = pepdetails.PepId;

                                primarypep.FirstName = pepdetails.PrimaryPepFirstName[i];

                                primarypep.LastName = pepdetails.PrimaryPepLastName[i];

                                primarypep.MiddleName = pepdetails.PrimaryPepMiddleName[i];

                                primarypep.LastName2 = pepdetails.PrimaryPepLastName2[i];

                                primarypep.AKAName = pepdetails.PrimaryPepAKAName[i];

                                primarypep.PrimaryPepPositionOpenField = pepdetails.PrimaryPepPositionOpenField[i];


                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociation[i]) && (pepdetails.PrimaryPepAssociation[i] != "-1"))

                                    primarypep.PrimaryPepAssociationId = Int32.Parse(pepdetails.PrimaryPepAssociation[i]);


                                if (!string.IsNullOrWhiteSpace(pepdetails.PepAssociatedCountry[i]) && (pepdetails.PepAssociatedCountry[i] != "-1"))

                                    primarypep.PrimaryPepAssociatedCountryId = Int32.Parse(pepdetails.PepAssociatedCountry[i]);


                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepPosition[i]) && (pepdetails.PrimaryPepPosition[i] != "-1"))

                                    primarypep.PrimaryPepPositionId = Int32.Parse(pepdetails.PrimaryPepPosition[i]);


                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepCountry[i]) && (pepdetails.PrimaryPepCountry[i] != "-1"))

                                    primarypep.PrimaryPepCountryId = Int32.Parse(pepdetails.PrimaryPepCountry[i]);


                                if (pepdetails.PrimaryPepCountryRiskDesignation[i] == "High")

                                {

                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))

                                        primarypep.CountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepBSAApproval[i]);

                                    if (primarypep.CountryBSAApprovalId == 1)

                                    {

                                        if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))

                                            if (pepdetails.PrimaryPepCountryLobDate != null)

                                            {

                                                primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);

                                            }

                                        primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);

                                    }

                                }


　

                                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High")

                                {

                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))

                                        primarypep.AssociatedCountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]);

                                }


                                primarypep.CreatedBy = (string)Session["userId"];

                                primarypep.CreatedTS = DateTime.Now;

                                primarypep.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;

                                primarypep = _pepservice.AddNewPrimaryPep(primarypep);

                                if (primarypep.CountryBSAApprovalId == 1)

                                    lppe.Add(primarypep);

                                if (primarypep.AssociatedCountryBSAApprovalId == 1)

                                    lppe1.Add(primarypep);


                            }

                        }


　

                        if (pepdetails.PrimarypepCountryLOB != null)

                        {

                            int p = 0;

                            foreach (var addloblist in pepdetails.PrimarypepCountryLOB)

                            {

                                bool hasAnyValidLOB = false;

                                foreach (var addlob in addloblist)

                                {

                                    if (string.IsNullOrWhiteSpace(addlob))

                                    {

                                        continue;

                                    }

                                    PrimaryPepCountryLobEntity primarypeplob = new PrimaryPepCountryLobEntity();

                                    primarypeplob.PrimaryPepId = lppe[p].PrimaryPepId;

                                    primarypeplob.LobId = Int32.Parse(addlob);

                                    primarypeplob.CreatedBy = (string)Session["userId"];

                                    primarypeplob.CreatedTS = DateTime.Now;

                                    primarypeplob = _pepservice.AddNewPrimaryPepLob(primarypeplob);

                                    hasAnyValidLOB = true;


                                }

                                if (hasAnyValidLOB)

                                {

                                    p++;

                                }

                            }

                        }


　

                        if (pepdetails.PrimarypepAssociatedCountryLOB != null)

                        {

                            int p = 0;

                            foreach (var addloblist in pepdetails.PrimarypepAssociatedCountryLOB)

                            {

                                bool hasAnyValidLOB = false;

                                foreach (var addlob in addloblist)

                                {

                                    if (string.IsNullOrWhiteSpace(addlob))

                                    {

                                        continue;

                                    }

                                    PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob = new PrimaryPepAssociatedCountryLobEntity();

                                    primarypepassociatedcountrylob.PrimaryPepId = lppe1[p].PrimaryPepId;

                                    primarypepassociatedcountrylob.LobId = Int32.Parse(addlob);

                                    primarypepassociatedcountrylob.CreatedBy = (string)Session["userId"];

                                    primarypepassociatedcountrylob.CreatedTS = DateTime.Now;

                                    primarypepassociatedcountrylob = _pepservice.AddNewPrimaryPepAssociatedCountryLob(primarypepassociatedcountrylob);

                                    hasAnyValidLOB = true;


                                }

                                if (hasAnyValidLOB)

                                {

                                    p++;

                                }

                            }

                        }


                        if (pepdetails.AttachhmentList == null)

                        {

                            pepdetails.AttachhmentList = new List<AttachmentEntity>();

                        }


　

                        //Add Uploaded Attachment

                        if (pepdetails.Uploadfiles != null && pepdetails.Uploadfiles.Count > 0)

                        {

                            for (int i = 0; i < pepdetails.Uploadfiles.Count; i++)

                            {

                                if (pepdetails.Uploadfiles[i] != null)

                                {

                                    //var existingAttachment = _pepservice.GetAttachmentRelatedtoPepId(pepdetails.PepId.Value);


                                    ////if exists then end date it.

                                    //if (existingAttachment != null)

                                    //{

                                    //    existingAttachment.EndDate = DateTime.Now;

                                    //    existingAttachment.UpdatedBy = (string)Session["userId"];

                                    //    existingAttachment.UpdatedTS = DateTime.Now;

                                    //    var result = _pepservice.UpdateAttachment(existingAttachment);

                                    //}


                                    var storagePath = SaveUploadedFileToStore(pepdetails.Uploadfiles[i]);


                                    AttachmentEntity attachment = new AttachmentEntity();

                                    attachment.FileStoragePath = storagePath;

                                    attachment.FileName = System.IO.Path.GetFileName(pepdetails.Uploadfiles[i].FileName);


                                    attachment.PepId = pepdetails.PepId;

                                    attachment.CreatedBy = (string)Session["userId"];

                                    attachment.CreatedTS = DateTime.Now;

                                    attachment.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;

                                    attachment = _pepservice.AddNewAttachment(attachment);

                                    pepdetails.AttachhmentList.Add(attachment);

                                }

                            }

                        }


                        if (pepdetails.BtnSubmit == "Submit")

                        {


                            if (pepdetails.PepRequestStatus.Equals("Completed"))

                            {

                                EmailNotification.PEPStatusChangedtoCompleted(existingPep);

                            }

                        }

                        if (pepdetails.BtnSubmit == "Reject")

                        {

                            if (pepdetails.PepRequestStatus.Equals("Rejected"))

                            {

                                EmailNotification.PEPStatusChangedtoRejected(existingPep);

                            }

                        }


                        trans.Complete();

                        pepdetails.success = true;

                        //todo: check the status and accordingly show the message.

                        ModelState.AddModelError("Success", "Form updated successfully!");

                        return View("PEPDeterminationForm", pepdetails);


　

　

                        //pepdetails.success = true;

                        //pepdetails.searchFlag = "none";

                        //ModelState.AddModelError("Success", "Form submitted successfully!");

                        //return View("PEPDeterminationForm", pepdetails);

                    }

                    catch (Exception ex)

                    {


                        //InitializePepDetails(PEPDetails);

                        //PEPDetails.success = false;

                        //ModelState.AddModelError("Failure", "PEP details not updated");

                        //return View("PEPDeterminationForm", PEPDetails);


　

                        trans.Dispose();

                        pepdetails.success = false;

                        //pepdetails.searchFlag = "none";

                        ModelState.AddModelError("Failure", "PEP Request could not be updated!");

                        if (pepdetails.AttachhmentList == null)

                        {

                            pepdetails.AttachhmentList = new List<AttachmentEntity>();

                        }

                        if (pepdetails.LOB == null)

                        {

                            pepdetails.LOB = new List<string>();

                            pepdetails.LOB.Add("");

                        }


                        if (pepdetails.MajorLOB == null)

                        {

                            pepdetails.MajorLOB = new List<string>();

                            pepdetails.MajorLOB.Add("");

                        }

                        if (pepdetails.PrimaryPepCountry == null)

                        {

                            pepdetails.PrimaryPepCountry = new List<string>();

                            pepdetails.PrimaryPepCountry.Add("");

                        }


                        if (pepdetails.PrimaryPepCountryRiskDesignation == null)

                        {

                            pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();

                            pepdetails.PrimaryPepCountryRiskDesignation.Add("");

                        }


                        if (pepdetails.PepAssociatedCountry == null)

                        {

                            pepdetails.PepAssociatedCountry = new List<string>();

                            pepdetails.PepAssociatedCountry.Add("");

                        }


                        if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)

                        {

                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();

                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");

                        }

                        return View("PEPDeterminationForm", pepdetails);

                    }

                }

            }

            else {

                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");

                if (pepdetails.PepId == null)

                    pepdetails.InitialRequestDate = DateTime.Now;

                if (pepdetails.AttachhmentList == null)

                {

                    pepdetails.AttachhmentList = new List<AttachmentEntity>();

                }

                pepdetails.success = false;

                //pepdetails.searchFlag = "none";

                if (pepdetails.LOB == null)

                {

                    pepdetails.LOB = new List<string>();

                    pepdetails.LOB.Add("");

                }


                if (pepdetails.MajorLOB == null)

                {

                    pepdetails.MajorLOB = new List<string>();

                    pepdetails.MajorLOB.Add("");

                }

                if (pepdetails.PrimaryPepCountry == null)

                {

                    pepdetails.PrimaryPepCountry = new List<string>();

                    pepdetails.PrimaryPepCountry.Add("");

                }

                if (pepdetails.PrimaryPepCountryRiskDesignation == null)

                {

                    pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();

                    pepdetails.PrimaryPepCountryRiskDesignation.Add("");

                }


                if (pepdetails.PepAssociatedCountry == null)

                {

                    pepdetails.PepAssociatedCountry = new List<string>();

                    pepdetails.PepAssociatedCountry.Add("");

                }

                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)

                {

                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();

                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");

                }


                return View("PEPDeterminationForm", pepdetails);

            }

        }
        -----
        deatils:
        
        
        using AutoMapper;

using System;

using System.Collections.Generic;

using System.ComponentModel;

using System.Linq;

using System.Reflection;

using WF.ERMT.Application.Core.Interfaces.Business;

using WF.ERMT.Application.Core.Interfaces.DataAccess;

using WF.ERMT.Application.DataAccess.Interfaces;

using WF.ERMT.Application.DataAccess.UnitOfWork;

using WF.ERMT.Application.DataEntities.EntityFramework;

//using WF.ERMT.Application.DataEntities.DataEntities;

using WF.ERMT.Application.Entities.CustomEntities;


namespace WF.ERMT.Application.Business

{

    public class PEPDetails : IPEPDetailsBusiness

    {

        private readonly IPepHistoryDataAccess pephistorydataaccess;

        private readonly ICustomerCountryLobDataAccess customercountrylobdataaccess;

        private readonly IPrimaryPepLobDataAccess primarypeplobdataaccess;

        private readonly IPrimaryPepAssociatedCountryLobDataAccess primarypepassociatedcountrylobdataaccess;

        private readonly IPrimaryPepDataAccess primarypepdataaccess;

        private readonly ILobPepDataAccess lobpepdataaccess;

        private readonly ICustomerDataAccess customerdataaccess;

        private readonly IPEPDetailsDataAccess pepdetailsdataccess;

        private readonly IEcnDataAccess ecndataaccess;

        private readonly IAttachmentDataAccess attachmentdataaccess;

        private readonly IUnitOfWork unitOfWork;

        private readonly IUserDetailsDataAccess userDetailsDataAccess;

        private readonly IRequestAssignmentDataAccess requestAssignmentDataAccess;

        private readonly IChangeRequestDataAccess changeRequestDataAccess;

        private readonly IRequestAutoAssignmentDataAccess requestAutoAssignmentDataAccess;


　

        private readonly IHolidayCalenderDataAccess holidayCalenderDataAccess;


        public PEPDetails(IPEPDetailsDataAccess pepdetailsdataccess, IEcnDataAccess ecndataaccess, IAttachmentDataAccess attachmentdataaccess, ILobPepDataAccess lobpepdataaccess, IRequestAssignmentDataAccess requestAssignmentDataAccess, IPrimaryPepDataAccess primarypepdataaccess, ICustomerDataAccess customerdataaccess, IChangeRequestDataAccess changeRequestDataAccess, IPrimaryPepLobDataAccess primarypeplobdataaccess, IPrimaryPepAssociatedCountryLobDataAccess primarypepassociatedcountrylobdataaccess, ICustomerCountryLobDataAccess customercountrylobdataaccess, IRequestAutoAssignmentDataAccess requestAutoAssignmentDataAccess, IUserDetailsDataAccess userdetailsDataAccess, IPepHistoryDataAccess pephistorydataaccess, IHolidayCalenderDataAccess holidayCalenderDataAccess, IUnitOfWork unitofwork)

        {

            this.pepdetailsdataccess = pepdetailsdataccess;

            this.ecndataaccess = ecndataaccess;

            this.unitOfWork = unitofwork;

            this.attachmentdataaccess = attachmentdataaccess;

            this.lobpepdataaccess = lobpepdataaccess;

            this.userDetailsDataAccess = userdetailsDataAccess;

            this.requestAssignmentDataAccess = requestAssignmentDataAccess;

            this.primarypepdataaccess = primarypepdataaccess;

            this.customerdataaccess = customerdataaccess;

            this.changeRequestDataAccess = changeRequestDataAccess;

            this.primarypeplobdataaccess = primarypeplobdataaccess;

            this.primarypepassociatedcountrylobdataaccess = primarypepassociatedcountrylobdataaccess;

            this.customercountrylobdataaccess = customercountrylobdataaccess;

            this.requestAutoAssignmentDataAccess = requestAutoAssignmentDataAccess;

            this.pephistorydataaccess = pephistorydataaccess;

            this.holidayCalenderDataAccess = holidayCalenderDataAccess;

        }


        public PEPEntity AddNew(PEPEntity PEP)

        {

            Mapper.CreateMap<PEPEntity, CDDGPep>();

            var a = Mapper.Map<PEPEntity, CDDGPep>(PEP);

            var result = pepdetailsdataccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            PEP.PepId = result.PepId;

            return PEP;

        }


        public EcnEntity AddNewEcn(EcnEntity Ecn)

        {

            Mapper.CreateMap<EcnEntity, CDDGEcn>();

            var a = Mapper.Map<EcnEntity, CDDGEcn>(Ecn);

            var result = ecndataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            Ecn.ECNID = result.EcnId;

            return Ecn;

        }


　

        public PepHistoryEntity AddNewPepHistory(PepHistoryEntity pep)

        {

            Mapper.CreateMap<PepHistoryEntity, CDDGPepHistory>();

            var a = Mapper.Map<PepHistoryEntity, CDDGPepHistory>(pep);

            var result = pephistorydataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            pep.PepHistoryId = result.PepHistoryId;

            return pep;

        }


　

　

        public LobPepEntity AddNewLobPep(LobPepEntity LobPep)

        {

            Mapper.CreateMap<LobPepEntity, CDDGLobPep>();

            var a = Mapper.Map<LobPepEntity, CDDGLobPep>(LobPep);

            var result = lobpepdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            LobPep.LobPepId = result.LobPepId;

            return LobPep;

        }


        public PrimaryPepCountryLobEntity AddNewPrimaryPepCountryLob(PrimaryPepCountryLobEntity PrimaryPepLob)

        {

            Mapper.CreateMap<PrimaryPepCountryLobEntity, CDDGPrimaryPepCountryLob>();

            var a = Mapper.Map<PrimaryPepCountryLobEntity, CDDGPrimaryPepCountryLob>(PrimaryPepLob);

            var result = primarypeplobdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            PrimaryPepLob.PrimaryPepLobId = result.PrimaryPepLobId;

            return PrimaryPepLob;

        }


        public PrimaryPepAssociatedCountryLobEntity AddNewPrimaryPepAssociatedCountryLob(PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob)

        {

            Mapper.CreateMap<PrimaryPepAssociatedCountryLobEntity, CDDGPrimaryPepAssociatedCountryLob>();

            var a = Mapper.Map<PrimaryPepAssociatedCountryLobEntity, CDDGPrimaryPepAssociatedCountryLob>(primarypepassociatedcountrylob);

            var result = primarypepassociatedcountrylobdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            primarypepassociatedcountrylob.PrimaryPepLobId = result.PrimaryPepLobId;

            return primarypepassociatedcountrylob;

        }


        public CustomerCountryLobEntity AddNewCustomerCountryLob(CustomerCountryLobEntity custcountrylob)

        {

            Mapper.CreateMap<CustomerCountryLobEntity, CDDGCustomerCountryLob>();

            var a = Mapper.Map<CustomerCountryLobEntity, CDDGCustomerCountryLob>(custcountrylob);

            var result = customercountrylobdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            custcountrylob.CustomerId = result.CustomerId;

            return custcountrylob;

        }


　

        public CustomerEntity AddNewCustomer(CustomerEntity customer)

        {

            Mapper.CreateMap<CustomerEntity, CDDGCustomer>();

            var a = Mapper.Map<CustomerEntity, CDDGCustomer>(customer);

            var result = customerdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            customer.CustomerID = result.CustomerID;

            return customer;

        }


        public PrimaryPepEntity AddNewPrimaryPep(PrimaryPepEntity PrimaryPep)

        {

            Mapper.CreateMap<PrimaryPepEntity, CDDGPrimaryPep>();

            var a = Mapper.Map<PrimaryPepEntity, CDDGPrimaryPep>(PrimaryPep);

            var result = primarypepdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            PrimaryPep.PrimaryPepId = result.PrimaryPepId;

            return PrimaryPep;

        }


        public AttachmentEntity AddNewAttachment(AttachmentEntity attachment)

        {

            Mapper.CreateMap<AttachmentEntity, CDDGAttachment>();

            var a = Mapper.Map<AttachmentEntity, CDDGAttachment>(attachment);

            var result = attachmentdataaccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            attachment.AttachmentID = result.AttachmentID;

            return attachment;

        }


        public int Delete(PEPEntity PEP)

        {

            var a = Mapper.Map<CDDGPep>(PEP);

            var result = pepdetailsdataccess.Delete(a);

            return result;

        }


        public DashBoardViewModel GetAllPendingApprovalPEPForms()

        {

            DashBoardViewModel dashboard = new DashBoardViewModel();


            var pepList = pepdetailsdataccess.FindAllBy(x => x.DeterminationUpdationDate == null && x.EndDate == null);

            Mapper.CreateMap<CDDGPep, PEPEntity>();

            var pepDetails = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<PEPEntity>>(pepList);


　

　

　

　

　

            return dashboard;

        }


        public IEnumerable<EcnEntity> GetEcnByPepId(int? pepid)

        {

            var ecnList = ecndataaccess.FindAllBy(x => x.PepId == pepid && x.EndDate == null);

            Mapper.CreateMap<CDDGEcn, EcnEntity>();

            var result = Mapper.Map<IEnumerable<CDDGEcn>, IEnumerable<EcnEntity>>(ecnList);

            // var list = Mapper.Map<IEnumerable<PEPEntity>>(pepList);

            return result;

        }


        public IEnumerable<PEPEntity> GetAllPEPDetails()

        {

            var pepList = pepdetailsdataccess.GetAll();

            Mapper.CreateMap<CDDGPep, PEPEntity>();

            var result = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<PEPEntity>>(pepList);

            // var list = Mapper.Map<IEnumerable<PEPEntity>>(pepList);


            return result;

        }


        public DashBoardViewModel GetAllPEPFormsCreatedByLOBUser(string userId)

        {

            DashBoardViewModel dashBoard = new DashBoardViewModel();

            DisplayPepInformationListViewModel peplist = new DisplayPepInformationListViewModel();

            List<DisplayListViewModel> pepDetails = new List<DisplayListViewModel>();


            var pepList = pepdetailsdataccess.FindAllBy(x => x.PepRequestStatusId != 4 && x.CreatedBy == userId && x.EndDate == null);

            foreach (var cddg in pepList)

            {

                cddg.CDDGEcns = cddg.CDDGEcns.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                cddg.CDDGLobPeps = cddg.CDDGLobPeps.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                cddg.CDDGAttachments = cddg.CDDGAttachments.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                cddg.CDDGPrimaryPeps = cddg.CDDGPrimaryPeps.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                foreach (var l in cddg.CDDGPrimaryPeps)

                {

                    l.CDDGPrimaryPepCountryLobs = l.CDDGPrimaryPepCountryLobs.Where(x => x.EndDate == null).ToList();

                }

                // cddg.CDDGRequestAssignments = cddg.CDDGRequestAssignments.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            }

            Mapper.CreateMap<CDDGPep, DisplayListViewModel>();

            Mapper.CreateMap<PEPEntity, CDDGPep>();


            //All pending requests

            //DisplayPepInformationListViewModel peplist1 = new DisplayPepInformationListViewModel();

            //var pepids1 = pepList.Where(x => x.PepRequestStatusId == 1).Select(x => x.PepId).ToList();

            //var pepdetails1 = GetPepDetailsFromPepIds(pepids1);

            //pepDetails = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepdetails1);

            //pepDetails = GetSLADetails(pepDetails);


            //pepDetails.Where(x => x.Status != null && x.Status.ToUpper() == "COMPLETED").ToList().ForEach(x => x.SLAExpiryTime = "0");

            //peplist1.PepList = pepDetails;

            //peplist1.HeaderInfo = "Pending Requests";

            //dashBoard.UserPendingRequests = peplist1;


            ////All CR requests

            //DisplayPepInformationListViewModel peplist2 = new DisplayPepInformationListViewModel();

            //var pepids2 = pepList.Where(x => x.PepRequestStatusId == 2).Select(x => x.PepId).ToList();

            ////var pepdetails2 = GetPepDetailsFromPepIds(pepids2);

            //List<int?> pepids = pepids2.Select(i => (int?)i).ToList();

            //List<DisplayListViewModel> pepDetailsCR = new List<DisplayListViewModel>(); ;


            //var pepdetailscr = GetPEPCRDetails(pepids);

            //List<int> pepwithcrs = pepdetailscr.Select(x => x.ChangeRequestId).ToList();


            //foreach (var crid in pepwithcrs)

            //{


            //    var pep = GetSinglePEPbyidforCRbyCRid(crid);

            //    var crnoid = changeRequestDataAccess.FindSingleBy(x => x.ChangeRequestId == crid);


　

            //    //int pepidcurrent = pep.PepId;

            //    var display = Mapper.Map<CDDGPep, DisplayListViewModel>(pep);


            //    //List<int> pepwithcrs1 = pepdetailscr.Where(x => x.PepId == pep.PepId).Select(x => x.ChangeRequestId).ToList();

            //    //Dictionary<int?, List<int>> pepwithcr = new Dictionary<int?, List<int>>();

            //    //pepwithcr.Add(pep.PepId, pepwithcrs1);

            //    display.ChangeRequestId = crid;

            //    display.pepidwithcrid = pep.PepId.ToString() + "- " + crnoid.CrNo.ToString();


            //    //display.pepidwithcrid = pepwithcr;

            //    pepDetailsCR.Add(display);


            //}


　

            //// var pepdetailscr = GetPEPCRDetails(pepids);


            ////  var cpmpletepepdetailsforCR = Mapper.Map<IEnumerable<PEPEntity>, IEnumerable<CDDGPep>>(pepforCR);

            ////pepDetails = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepforCR);

            //var pepidsforcancelled = pepList.Where(x => x.PepRequestStatusId == 3 || x.PepRequestStatusId == 6).Select(x => x.PepId).ToList();

            //var pepdetailscancelled = GetPepDetailsFromPepIds(pepidsforcancelled);


            //var pepDetailscancelled = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepdetailscancelled);

            //pepDetailsCR.AddRange(pepDetailscancelled);

            //pepDetailsCR = GetSLADetails(pepDetailsCR);

            //peplist2.HeaderInfo = "Change/Canceled Requests";

            //peplist2.PepList = pepDetailsCR.OrderBy(x => x.CreatedTS).ToList();

            //dashBoard.UserCRRequests = peplist2;


            ////SLA

            //var pepIdsforSLA = pepList.Select(j => j.PepId).ToList();

            //var holidaylist = holidayCalenderDataAccess.GetAll().Select(i => i.HolidayDate).ToList();

            //int countdate = 0;

            //Dictionary<string, List<string>> pepwithCounterDate = new Dictionary<string, List<string>>();

            //List<string> counterdate = new List<string>();

            //pepList.ToList().ForEach(y =>

            //{

            //    for (DateTime date = y.CreatedTS; date.Date <= y.CreatedTS.AddHours(72); date = date.AddDays(1))

            //    {

            //        foreach (DateTime holidaydate in holidaylist)

            //        {

            //            if (holidaydate.ToString("d").Equals(date.ToString("d")))

            //            {

            //                countdate++;

            //                counterdate.Add(countdate.ToString());

            //            }

            //        }

            //    }

            //    if (counterdate.Count > 0)

            //    {

            //        if (!pepwithCounterDate.Keys.Contains(y.PepId.ToString()))

            //        {

            //            pepwithCounterDate.Add(y.PepId.ToString(), counterdate);

            //            int index = pepIdsforSLA.IndexOf(y.PepId);

            //            pepIdsforSLA.RemoveAt(index);

            //        }

            //    }


            //    countdate = 0;

            //    counterdate = new List<string>();

            //});


            //List<int> pepIDlistSLAsaturday;

            //List<int> pepIDlistSLAsunday;

            //List<int> pepIDlistSLA;

            //List<int> pepIDSLAsaturday = new List<int>();

            //List<int> pepIDSLAsunday = new List<int>();

            //List<int> pepIDSLA = new List<int>();

            //if (pepwithCounterDate.Count > 0)

            //{

            //    foreach (var pepid in pepwithCounterDate)

            //    {


            //        pepIDSLAsaturday = pepList.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(2 + Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

            //        pepIDSLAsunday = pepList.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(1 + Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

            //        pepIDSLA = pepList.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.AddDays(Int32.Parse(pepid.Value.Last())).AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


            //    }


            //}

            //pepIDlistSLAsaturday = pepList.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(2, 0, 0, 0)).AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

            //pepIDlistSLAsunday = pepList.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(1, 0, 0, 0)).AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

            //pepIDlistSLA = pepList.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


            //if (pepIDSLAsaturday.Count > 0)

            //    pepIDlistSLAsaturday.AddRange(pepIDSLAsaturday);

            //if (pepIDSLAsunday.Count > 0)

            //    pepIDlistSLAsunday.AddRange(pepIDSLAsunday);

            //if (pepIDSLA.Count > 0)

            //    pepIDlistSLA.AddRange(pepIDSLA);


            //pepIDlistSLA.AddRange(pepIDlistSLAsaturday);

            //pepIDlistSLA.AddRange(pepIDlistSLAsunday);


            //List<CDDGPep> peplist4 = GetPepDetailsFromPepIds(pepIDlistSLA);

            //DisplayPepInformationListViewModel peplist3 = new DisplayPepInformationListViewModel();

            //pepDetails = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(peplist4);

            //pepDetails = GetSLADetails(pepDetails);

            //peplist3.HeaderInfo = "Requests Approaching SLA";

            //peplist3.PepList = pepDetails.OrderBy(x => x.CreatedTS).ToList();

            //dashBoard.UserSLARequests = peplist3;


            //Rejected

            var pepIDlistRejected = pepList.Where(x => x.PepRequestStatusId == 5).Select(x => x.PepId).ToList();

            List<CDDGPep> peplist5 = GetPepDetailsFromPepIds(pepIDlistRejected);

            DisplayPepInformationListViewModel peplistR = new DisplayPepInformationListViewModel();

            pepDetails = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(peplist5);

            pepDetails = GetSLADetails(pepDetails);

            peplistR.HeaderInfo = "Rejected Requests";

            peplistR.PepList = pepDetails;

            dashBoard.UserRejectedRequests = peplistR;


　

            return dashBoard;

        }


        private List<DisplayListViewModel> GetSLADetails(List<DisplayListViewModel> pepDetails)

        {

            var holidaylist = holidayCalenderDataAccess.GetAll().Select(i => i.HolidayDate).ToList();

            int countdate = 0;

            var pepIdsforSLA = pepDetails.Select(x => x.PepId).ToList();

            Dictionary<string, List<string>> pepwithCounterDate = new Dictionary<string, List<string>>();

            List<string> counterdate = new List<string>();

            pepDetails.ToList().ForEach(y =>

            {

                for (DateTime date = y.CreatedTS; date <= y.CreatedTS.AddHours(72); date = date.AddDays(1))

                {

                    foreach (DateTime holidaydate in holidaylist)

                    {

                        if (holidaydate.ToString("d").Equals(date.ToString("d")))

                        {

                            countdate++;

                            counterdate.Add(countdate.ToString());

                        }

                    }

                }

                if (counterdate.Count > 0)

                {

                    if (!pepwithCounterDate.Keys.Contains(y.PepId.ToString()))

                    {

                        pepwithCounterDate.Add(y.PepId.ToString(), counterdate);

                        int index = pepIdsforSLA.IndexOf(y.PepId);

                        pepIdsforSLA.RemoveAt(index);

                    }

                    

                }


                countdate = 0;

                counterdate = new List<string>();

            });


            


            pepDetails.ToList().ForEach(x =>

            {

                if (x.CreatedTS.DayOfWeek.ToString() == "Saturday")

                {

                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {

                            if (x.PepId == Int32.Parse(pepid.Key))

                            {

                                x.SLAExpiryTime = x.CreatedTS.Add(new TimeSpan(/*2 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.Add(new TimeSpan(/*2 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                            else {

                                x.SLAExpiryTime = x.CreatedTS/*.Add(new TimeSpan(2, 0, 0, 0))*/.AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(2, 0, 0, 0))*/.AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                        }

                    }

                    else {

                        x.SLAExpiryTime = x.CreatedTS./*Add(new TimeSpan(2, 0, 0, 0)).*/AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                        x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(2, 0, 0, 0))*/.AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                    }

                }

                else if (x.CreatedTS.DayOfWeek.ToString() == "Sunday")

                {

                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {

                            if (x.PepId == Int32.Parse(pepid.Key))

                            {

                                x.SLAExpiryTime = x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                            else {

                                x.SLAExpiryTime = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                        }

                    }

                    else {

                        x.SLAExpiryTime = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                        x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                    }

                }

                else

                {

                    int countsladay =0;

                    for (DateTime date = x.CreatedTS; date <= x.CreatedTS.AddHours(72); date = date.AddDays(1))

                    {

                        if (date.DayOfWeek.ToString() == "Saturday")

                        {

                            countsladay = countsladay + 2;

                        }

                        //if (date.DayOfWeek.ToString() == "Sunday")

                        //{

                        //    countsladay++;

                        //}

                    }


                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {

                            if (x.PepId == Int32.Parse(pepid.Key))

                            {

                                x.SLAExpiryTime = x.CreatedTS.Add(new TimeSpan(Int32.Parse(pepid.Value.Last()) + countsladay, 0, 0, 0)).AddHours(72).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.Add(new TimeSpan(Int32.Parse(pepid.Value.Last()) + countsladay, 0, 0, 0)).AddHours(72).ToString("d");

                            }

                            else {

                                x.SLAExpiryTime = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("d");

                            }

                        }

                    }

                    else

                    {

                        x.SLAExpiryTime = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("h:mm tt");

                        x.SLAExpiryDate = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("d");

                    }

                }


　

            });


            return pepDetails;

        }


        private CDDGPep GetSinglePEPbyidforCRbyCRid(int crid)

        {

            CDDGPep cddgpep = new CDDGPep();

            var pep = changeRequestDataAccess.GetAll().Where(x => x.ChangeRequestId == crid && x.EndDate == null).FirstOrDefault();

            //int crcount = pep.Count();


　

            //foreach (CDDGChangeRequest crpep in pep)

            // {

            Mapper.CreateMap<CDDGChangeRequest, CDDGPep>();

            cddgpep = Mapper.Map<CDDGPep>(pep);


            cddgpep.CDDGEcns = ecndataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();

            cddgpep.CDDGLobPeps = lobpepdataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();

            cddgpep.CDDGAttachments = attachmentdataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();

            cddgpep.CDDGPrimaryPeps = primarypepdataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();


            cddgpep.CDDGRequestAssignments = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pep.PepId).ToList();

            cddgpep.CreatedTS = pepdetailsdataccess.FindSingleBy(x => x.PepId == pep.PepId).CreatedTS;


            return cddgpep;

            // }


　

　

　

            //Mapper.CreateMap<CDDGPep, PEPEntity>();

            //var result = Mapper.Map<PEPEntity>(cddgpep);

            //result.PepRequestStatus = result.PEPRequestStatu.StatusName;


            ////todo: change the Email to UserAcc.

            //var ue = userDetailsDataAccess.FindSingleBy(x => x.Email == result.CreatedBy);

            //Mapper.CreateMap<CDDGUser, UserEntity>();

            //var user = Mapper.Map<UserEntity>(ue);


            //result.RequestorFirstName = user.FirstName;

            //result.RequestorLastName = user.LastName;

            //result.RequestorAU = user.AU;

            //result.RequestorEmail = user.Email;


            //if (result.Ecns != null)

            //{


            //    result.ECN = new List<string>();

            //    result.Flagged = new List<string>();

            //    result.DateFlagged = new List<string>();

            //    foreach (var ecna in result.Ecns)

            //    {

            //        result.ECN.Add(ecna.ECN);

            //        if (ecna.IsFlagged == true)

            //        {

            //            result.Flagged.Add("Y");

            //            result.DateFlagged.Add(ecna.DateFlagged.ToString());

            //        }

            //        else if (ecna.IsFlagged == false)

            //        {

            //            result.Flagged.Add("N");

            //            result.DateFlagged.Add("");

            //        }

            //        else

            //        {

            //            result.Flagged.Add("");

            //            result.DateFlagged.Add("");

            //        }

            //    }


            //}


　

            //if ((result.Attachments != null) && (result.Attachments.Count > 0))

            //{

            //    result.Attachment = result.Attachments.ToList().First();

            //}


            //if (result.Customer != null)

            //{

            //    result.Customer_Name = result.Customer.CustomerName;

            //    result.CustomerStatusId = result.Customer.CustomerStatu.StatusId.ToString();

            //    if (result.Customer.IsEntity == true)

            //    {

            //        result.CustomerType = "Entity";

            //        result.PEPEntityName = result.Customer.EntityName;

            //        result.EntityFormationCountry = result.Customer.EntityFormationCountry.ToString();

            //    }

            //    else

            //    {

            //        result.CustomerType = "Individual";

            //        result.IndividualFirstName = result.Customer.IndividualFirstName;

            //        result.IndividualLastName = result.Customer.IndividualLastName;

            //        result.IndividualMiddleName = result.Customer.IndividualMiddleName;

            //        result.IndividualLastName2 = result.Customer.IndividualLastName2;

            //        result.IndividualAKAName = result.Customer.IndividualAKAName;

            //        result.DateofBirth = result.Customer.IndividualDoB;

            //        result.CountryofcitizenshipId = result.Customer.IndividualCitizenshipCountry;

            //    }


　

            //}


　

            //if (result.LobPeps != null)

            //{

            //    result.LOB = result.LobPeps.Select(x => x.Lob.LobId.ToString()).ToList();

            //    result.MajorLOB = result.LobPeps.Select(x => x.Lob.MajorLob.MajorLOBName).ToList();

            //}


            //if (pep.CDDGPrimaryPeps != null)

            //{

            //    result.PrimaryPepFirstName = pep.CDDGPrimaryPeps.Select(x => x.FirstName).ToList();

            //    result.PrimaryPepLastName = pep.CDDGPrimaryPeps.Select(x => x.LastName).ToList();

            //    result.PrimaryPepLastName2 = pep.CDDGPrimaryPeps.Select(x => x.LastName2).ToList();

            //    result.PrimaryPepMiddleName = pep.CDDGPrimaryPeps.Select(x => x.MiddleName).ToList();

            //    result.PrimaryPepAKAName = pep.CDDGPrimaryPeps.Select(x => x.AKAName).ToList();

            //    result.PrimaryPepPosition = pep.CDDGPrimaryPeps.Select(x => x.PrimaryPepPositionId.ToString()).ToList();

            //    result.PrimaryPepAssociation = pep.CDDGPrimaryPeps.Select(x => x.PrimaryPepAssociationId.ToString()).ToList();

            //    result.PepAssociatedCountry = pep.CDDGPrimaryPeps.Select(x => x.PrimaryPepAssociatedCountryId.ToString()).ToList();

            //    result.PrimaryPepCountry = pep.CDDGPrimaryPeps.Select(x => x.PrimaryPepCountryId.ToString()).ToList();

            //    result.PrimaryPepBSAApproval = pep.CDDGPrimaryPeps.Select(x => x.CountryBSAApprovalId.ToString()).ToList();

            //    //result.PrimaryPepCountryRiskDesignation = pep.CDDGPrimaryPeps.Select(x => x.CountryRiskDesignationId.ToString()).ToList();

            //    result.PrimaryPepCountryRiskDesignation = pep.CDDGPrimaryPeps.Select(x => x.CDDGCountry1.CDDGCountryRiskDesignation.RiskDesignation).ToList();

            //    result.PrimaryPepCountryLobDate = pep.CDDGPrimaryPeps.Select(x => x.CountryLobDate.ToString()).ToList();


            //    result.PrimarypepCountryLOB = new List<List<string>>();

            //    result.PrimarypepCountryLOBCSV = new List<string>();

            //    foreach (var l in pep.CDDGPrimaryPeps)

            //    {

            //        if (l.CDDGPrimaryPepCountryLobs != null)

            //        {

            //            var loblist = l.CDDGPrimaryPepCountryLobs.Select(x => x.LobId.ToString()).ToList();

            //            result.PrimarypepCountryLOB.Add(loblist);

            //            result.PrimarypepCountryLOBCSV.Add(String.Join(",", loblist.ToArray()));

            //        }

            //        else

            //        {

            //            result.PrimarypepCountryLOB.Add(new List<string>());

            //            result.PrimarypepCountryLOBCSV.Add("");

            //        }

            //    }


            //}

            //if (result.IsPep == true)

            //{

            //    result.Pep = "Y";

            //}

            //else if (result.IsPep == false)

            //{

            //    result.Pep = "N";

            //}


            ////result.PrimaryPepCountry = new List<string>();

            ////result.PrimaryPepBSAApproval = new List<string>();

            ////result.PrimaryPepCountryRiskDesignation = new List<string>();

            ////result.PrimaryPepCountryLobDate = new List<string>();


            ////List<string> changedproperties = ComparePEPs(pepid, result);

            ////result.changedpropertiesforCR = changedproperties;

            //return result;

        }


        private List<CDDGChangeRequest> GetPEPCRDetails(List<int?> pepids2)

        {

            return changeRequestDataAccess.GetAll().Where(x => pepids2.Contains(x.PepId) && x.EndDate == null).ToList();

        }


        private List<CDDGPep> GetPepDetailsFromPepIds(List<int> pepIDlistSLA)

        {

            return pepdetailsdataccess.GetAllPepWithChildDetails().Where(x => pepIDlistSLA.Contains(x.PepId)).ToList();

        }


　

        public SearchDetailsViewModel GetPEPSearchDetails(SearchPEPEntity searchDetails)

        {


            SearchDetailsViewModel result = new SearchDetailsViewModel();


            //var item = GetAllPEPDetails();

            var item = pepdetailsdataccess.GetAllPepWithChildDetails();


            //IEnumerable<CDDGPep> item = new List<CDDGPep>();


            item.ToList().ForEach(x =>

            {

                x.CDDGEcns = x.CDDGEcns.Where(i => i.PepRequestStatusID == 1 && i.PepId == x.PepId && i.EndDate == null).ToList();

                //x.CDDGLobPeps = x.CDDGLobPeps.Where(i => i.PepRequestStatusID == 1 && i.PepId == x.PepId && i.EndDate == null).ToList();

                //x.CDDGAttachments = x.CDDGAttachments.Where(i => i.PepRequestStatusID == 1 && i.PepId == x.PepId && i.EndDate == null).ToList();

                x.CDDGPrimaryPeps = x.CDDGPrimaryPeps.Where(i => i.PepRequestStatusID == 1 && i.PepId == x.PepId && i.EndDate == null).ToList();

                //foreach (var l in x.CDDGPrimaryPeps)

                //{

                //    l.CDDGPrimaryPepCountryLobs = l.CDDGPrimaryPepCountryLobs.Where(i => i.EndDate == null).ToList();

                //}


　

            });


            //foreach (var cddg in item)

            //{

            //    cddg.CDDGEcns = cddg.CDDGEcns.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            //    cddg.CDDGLobPeps = cddg.CDDGLobPeps.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            //    cddg.CDDGAttachments = cddg.CDDGAttachments.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            //    cddg.CDDGPrimaryPeps = cddg.CDDGPrimaryPeps.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            //    foreach (var l in cddg.CDDGPrimaryPeps)

            //    {

            //        l.CDDGPrimaryPepCountryLobs = l.CDDGPrimaryPepCountryLobs.Where(x => x.EndDate == null).ToList();

            //    }

            //    //cddg.CDDGRequestAssignments = cddg.CDDGRequestAssignments.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            //}


            if (searchDetails.filter == "Contains")

            {

                if (searchDetails.pepid != 0)

                {

                    if (!string.IsNullOrWhiteSpace(Convert.ToString(searchDetails.pepid)))

                    {

                        item = item.Where(s => s.PepId.ToString().Contains(Convert.ToString(searchDetails.pepid)));

                    }

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.ecn))

                {

                    item = item.Where(s => s.CDDGEcns.Count > 0 && s.CDDGEcns.Any(x => x.Ecn.ToLower().Contains(searchDetails.ecn.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.customername))

                {

                    item = item.Where(s => s.CDDGCustomer != null && s.CDDGCustomer.CustomerName.ToLower().Contains(searchDetails.customername.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.entity))

                {

                    item = item.Where(s => s.CDDGCustomer != null && (bool)s.CDDGCustomer.IsEntity ? s.CDDGCustomer.EntityName != null && s.CDDGCustomer.EntityName.ToLower().Contains(searchDetails.entity.ToLower()) : s.CDDGCustomer.IndividualFirstName != null && s.CDDGCustomer.IndividualFirstName.ToLower().Contains(searchDetails.entity.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.primarypep))

                {

                    item = item.Where(s => s.CDDGPrimaryPeps.Count > 0 && s.CDDGPrimaryPeps.Any(x => x.FirstName != null && x.FirstName.ToLower().Contains(searchDetails.primarypep.ToLower()) || x.LastName != null && x.LastName.ToLower().Contains(searchDetails.primarypep.ToLower()) || (x.MiddleName != null && x.MiddleName.ToLower().Contains(searchDetails.primarypep.ToLower())) || (x.LastName2 != null && x.LastName2.ToLower().Contains(searchDetails.primarypep.ToLower())) || x.AKAName != null && x.AKAName.ToLower().Contains(searchDetails.primarypep.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.wcis))

                {

                        item = item.Where(s => !string.IsNullOrWhiteSpace(s.WCISNumber) && s.WCISNumber.ToString().Contains(searchDetails.wcis));

                }

                

            }

            if (searchDetails.filter == "StartsWith")

            {

                if (searchDetails.pepid != 0)

                {

                    if (!string.IsNullOrWhiteSpace(Convert.ToString(searchDetails.pepid)))

                    {

                        item = item.Where(s => s.PepId.ToString().StartsWith(Convert.ToString(searchDetails.pepid)));

                    }

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.ecn))

                {

                    item = item.Where(s => s.CDDGEcns.Count > 0 && s.CDDGEcns.Any(x => x.Ecn.ToLower().StartsWith(searchDetails.ecn.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.customername))

                {

                    item = item.Where(s => s.CDDGCustomer != null && s.CDDGCustomer.CustomerName.ToLower().StartsWith(searchDetails.customername.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.entity))

                {

                    item = item.Where(s => s.CDDGCustomer != null && (bool)s.CDDGCustomer.IsEntity ? s.CDDGCustomer.EntityName != null && s.CDDGCustomer.EntityName.ToLower().StartsWith(searchDetails.entity.ToLower()) : s.CDDGCustomer.IndividualFirstName != null && s.CDDGCustomer.IndividualFirstName.ToLower().StartsWith(searchDetails.entity.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.primarypep))

                {

                    item = item.Where(s => s.CDDGPrimaryPeps.Count > 0 && s.CDDGPrimaryPeps.Any(x => x.FirstName != null && x.FirstName.ToLower().StartsWith(searchDetails.primarypep.ToLower()) || x.LastName != null && x.LastName.ToLower().StartsWith(searchDetails.primarypep.ToLower()) || (x.MiddleName != null && x.MiddleName.ToLower().StartsWith(searchDetails.primarypep.ToLower())) || (x.LastName2 != null && x.LastName2.ToLower().StartsWith(searchDetails.primarypep.ToLower())) || x.AKAName != null && x.AKAName.ToLower().StartsWith(searchDetails.primarypep.ToLower())));

                }


                if (!string.IsNullOrWhiteSpace(searchDetails.wcis))

                {

                    item = item.Where(s => !string.IsNullOrWhiteSpace(s.WCISNumber) && s.WCISNumber.ToString().StartsWith(searchDetails.wcis));

                }

                

            }

            if (searchDetails.filter == "EndsWith")

            {

                if (searchDetails.pepid != 0)

                {

                    if (!string.IsNullOrWhiteSpace(Convert.ToString(searchDetails.pepid)))

                    {

                        item = item.Where(s => s.PepId.ToString().EndsWith(Convert.ToString(searchDetails.pepid)));

                    }

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.ecn))

                {

                    item = item.Where(s => s.CDDGEcns.Count > 0 && s.CDDGEcns.Any(x => x.Ecn.ToLower().EndsWith(searchDetails.ecn.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.customername))

                {

                    item = item.Where(s => s.CDDGCustomer != null && s.CDDGCustomer.CustomerName.ToLower().EndsWith(searchDetails.customername.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.entity))

                {

                    item = item.Where(s => s.CDDGCustomer != null && (bool)s.CDDGCustomer.IsEntity ? s.CDDGCustomer.EntityName != null && s.CDDGCustomer.EntityName.ToLower().EndsWith(searchDetails.entity.ToLower()) : s.CDDGCustomer.IndividualFirstName != null && s.CDDGCustomer.IndividualFirstName.ToLower().EndsWith(searchDetails.entity.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.primarypep))

                {

                    item = item.Where(s => s.CDDGPrimaryPeps.Count > 0 && s.CDDGPrimaryPeps.Any(x => x.FirstName != null && x.FirstName.ToLower().EndsWith(searchDetails.primarypep.ToLower()) || x.LastName != null && x.LastName.ToLower().EndsWith(searchDetails.primarypep.ToLower()) || (x.MiddleName != null && x.MiddleName.ToLower().EndsWith(searchDetails.primarypep.ToLower())) || (x.LastName2 != null && x.LastName2.ToLower().EndsWith(searchDetails.primarypep.ToLower())) || x.AKAName != null && x.AKAName.ToLower().EndsWith(searchDetails.primarypep.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.wcis))

                {

                    item = item.Where(s => !string.IsNullOrWhiteSpace(s.WCISNumber) && s.WCISNumber.ToString().EndsWith(searchDetails.wcis));

                }

                

            }

            if (searchDetails.filter == "ExactMatch")

            {

                if (searchDetails.pepid != 0)

                {

                    if (!string.IsNullOrWhiteSpace(Convert.ToString(searchDetails.pepid)))

                    {

                        item = item.Where(s => s.PepId.ToString().Equals(Convert.ToString(searchDetails.pepid)));

                    }

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.ecn))

                {

                    item = item.Where(s => s.CDDGEcns.Count > 0 && s.CDDGEcns.Any(x => x.Ecn.ToLower().Equals(searchDetails.ecn.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.customername))

                {

                    item = item.Where(s => s.CDDGCustomer != null && s.CDDGCustomer.CustomerName.ToLower().Equals(searchDetails.customername.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.entity))

                {

                    item = item.Where(s => s.CDDGCustomer !=null && (bool)s.CDDGCustomer.IsEntity ? s.CDDGCustomer.EntityName != null && s.CDDGCustomer.EntityName.ToLower().Equals(searchDetails.entity.ToLower()) : s.CDDGCustomer.IndividualFirstName != null && s.CDDGCustomer.IndividualFirstName.ToLower().Equals(searchDetails.entity.ToLower()));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.primarypep))

                {

                    item = item.Where(s => s.CDDGPrimaryPeps.Count > 0 && s.CDDGPrimaryPeps.Any(x => x.FirstName !=null && x.FirstName.ToLower().Equals(searchDetails.primarypep.ToLower()) || x.LastName != null && x.LastName.ToLower().Equals(searchDetails.primarypep.ToLower()) || (x.MiddleName != null && x.MiddleName.ToLower().Equals(searchDetails.primarypep.ToLower())) || (x.LastName2 != null && x.LastName2.ToLower().Equals(searchDetails.primarypep.ToLower())) || x.AKAName != null && x.AKAName.ToLower().Equals(searchDetails.primarypep.ToLower())));

                }

                if (!string.IsNullOrWhiteSpace(searchDetails.wcis))

                {

                   item = item.Where(s => !string.IsNullOrWhiteSpace(s.WCISNumber) && s.WCISNumber.ToString().Equals(searchDetails.wcis));

                }

                

            }


            //if (searchDetails.typeofSearch == "CR")

            //{

            //    item = item.Where(x => x.CreatedBy == searchDetails.userid && x.EndDate == null).ToList();

            //}


            var pepDetails = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(item);


            var holidaylist = holidayCalenderDataAccess.GetAll().Select(i => i.HolidayDate).ToList();

            int countdate = 0;

            var pepIdsforSLA = pepDetails.Select(x => x.PepId).ToList();

            Dictionary<string, List<string>> pepwithCounterDate = new Dictionary<string, List<string>>();

            List<string> counterdate = new List<string>();

            pepDetails.ToList().ForEach(y =>

            {

                for (DateTime date = y.CreatedTS; date <= y.CreatedTS.AddHours(72); date = date.AddDays(1))

                {

                    foreach (DateTime holidaydate in holidaylist)

                    {

                        if (holidaydate.ToString("d").Equals(date.ToString("d")))

                        {

                            countdate++;

                            counterdate.Add(countdate.ToString());

                        }

                    }

                }

                if (counterdate.Count > 0)

                {

                    if (!pepwithCounterDate.Keys.Contains(y.PepId.ToString()))

                    {

                        pepwithCounterDate.Add(y.PepId.ToString(), counterdate);

                        int index = pepIdsforSLA.IndexOf(y.PepId);

                        pepIdsforSLA.RemoveAt(index);

                    }

                }


                countdate = 0;

                counterdate = new List<string>();

            });


　

　

            pepDetails.ToList().ForEach(x =>

            {

                if (x.CreatedTS.DayOfWeek.ToString() == "Saturday")

                {

                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {

                            if (x.PepId == Int32.Parse(pepid.Key))

                            {

                                x.SLAExpiryTime = x.CreatedTS.Add(new TimeSpan(/*2 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.Add(new TimeSpan(/*2 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                            else {

                                x.SLAExpiryTime = x.CreatedTS/*.Add(new TimeSpan(2, 0, 0, 0))*/.AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(2, 0, 0, 0))*/.AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                        }

                    }

                    else {

                        x.SLAExpiryTime = x.CreatedTS./*Add(new TimeSpan(2, 0, 0, 0)).*/AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                        x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(2, 0, 0, 0))*/.AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                    }

                }

                else if (x.CreatedTS.DayOfWeek.ToString() == "Sunday")

                {

                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {

                            if (x.PepId == Int32.Parse(pepid.Key))

                            {

                                x.SLAExpiryTime = x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last()), 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                            else {

                                x.SLAExpiryTime = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                            }

                        }

                    }

                    else {

                        x.SLAExpiryTime = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("h:mm tt");

                        x.SLAExpiryDate = x.CreatedTS/*.Add(new TimeSpan(1, 0, 0, 0))*/.AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)).ToString("d");

                    }

                }

                else 

                {

                    int countsladay = 0;

                    for (DateTime date = x.CreatedTS; date <= x.CreatedTS.AddHours(72); date = date.AddDays(1))

                    {

                        if (date.DayOfWeek.ToString() == "Saturday")

                        {

                            countsladay = countsladay + 2;

                        }

                        //if (date.DayOfWeek.ToString() == "Sunday")

                        //{

                        //    countsladay++;

                        //}

                    }


                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {

                            if (x.PepId == Int32.Parse(pepid.Key))

                            {

                                x.SLAExpiryTime = x.CreatedTS.Add(new TimeSpan(Int32.Parse(pepid.Value.Last()) + countsladay, 0, 0, 0)).AddHours(72).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.Add(new TimeSpan(Int32.Parse(pepid.Value.Last()) + countsladay, 0, 0, 0)).AddHours(72).ToString("d");

                            }

                            else {

                                x.SLAExpiryTime = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("h:mm tt");

                                x.SLAExpiryDate = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("d");

                            }

                        }

                    }

                    else

                    {

                        x.SLAExpiryTime = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("h:mm tt");

                        x.SLAExpiryDate = x.CreatedTS.AddHours(72).AddDays(countsladay).ToString("d");

                    }

                }


　

            });


　

            DisplayPepInformationListViewModel searchResults = new DisplayPepInformationListViewModel();

            searchResults.PepList = pepDetails.ToList();

            searchResults.HeaderInfo = "Search Results";


            result.SearchResult = searchResults;


　

　

            //var result1 = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<PEPEntity>>(item);

            //// var list = Mapper.Map<IEnumerable<PEPEntity>>(pepList);


            return result;

        }


        public PEPEntity GetSinglePEPbyid(int? pepid)

        {

            var pep = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid && x.EndDate == null);


            Mapper.CreateMap<CDDGPep, PEPEntity>();

            var result = Mapper.Map<PEPEntity>(pep);


            //filter after automapper is run, to avoid ef change detection issue during pep update

            result.Ecns = result.Ecns.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).ToList();

            result.LobPeps= result.LobPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).ToList();

            result.Attachments= result.Attachments.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).ToList();

            result.PrimaryPeps = result.PrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).ToList();


            result.PepRequestStatus = result.PEPRequestStatu.StatusName;


            //todo: change the Email to UserAcc.

            var ue = userDetailsDataAccess.FindSingleBy(x => x.LanID == result.CreatedBy);

            Mapper.CreateMap<CDDGUser, UserEntity>();

            var user = Mapper.Map<UserEntity>(ue);


            result.RequestorFirstName = user.FirstName;

            result.RequestorLastName = user.LastName;

            result.RequestorAU = user.AU;

            result.RequestorEmail = user.Email;


　

　

            if (result.Ecns != null && result.Ecns.Count > 0)

            {


                result.ECN = new List<string>();

                result.Flagged = new List<string>();

                result.DateFlagged = new List<string>();

                result.PrimaryEcnNotProvided = result.Ecns.ToList()[0].PrimaryEcnNotProvided;

                foreach (var ecna in result.Ecns)

                {

                    result.ECN.Add(ecna.ECN);

                    if (ecna.IsFlagged == true)

                    {

                        result.Flagged.Add("Y");

                        result.DateFlagged.Add(ecna.DateFlagged.HasValue ? ecna.DateFlagged.Value.ToShortDateString() : null);

                    }

                    else if (ecna.IsFlagged == false)

                    {

                        result.Flagged.Add("N");

                        result.DateFlagged.Add("");

                    }

                    else

                    {

                        result.Flagged.Add("");

                        result.DateFlagged.Add("");

                    }

                }


            }


　

            if ((result.Attachments != null) && (result.Attachments.Count > 0))

            {

                result.AttachhmentList = result.Attachments.ToList();

            }

            else {

                result.AttachhmentList = new List<AttachmentEntity>();

            }


            if (result.Customer != null)

            {

                result.Customer_Name = result.Customer.CustomerName;

                result.CustomerStatusId = result.Customer.CustomerStatu.StatusId.ToString();

                if (result.Customer.IsEntity == true)

                {

                    result.CustomerType = "Entity";

                    result.PEPEntityName = result.Customer.EntityName;

                    result.EntityFormationCountry = result.Customer.EntityFormationCountry.ToString();

                    result.EntityFormationCountryBSAApproval = result.Customer.CountryBSAApprovalId.ToString();

                    result.EntityFormationCountryRiskDesignation = result.Customer.Country.CountryRiskDesignation.RiskDesignation;


                    result.EntityFormationCountryLOB = new List<string>();

                    if (pep.CDDGCustomer.CDDGCustomerCountryLobs != null)

                    {

                        var loblist = pep.CDDGCustomer.CDDGCustomerCountryLobs.Select(x => x.LobId.ToString()).ToList();

                        result.EntityFormationCountryLOB = loblist;


                    }

                    else

                    {

                        result.EntityFormationCountryLOB = new List<string>();

                    }


                }

                else

                {

                    result.CustomerType = "Individual";

                    result.IndividualFirstName = result.Customer.IndividualFirstName;

                    result.IndividualLastName = result.Customer.IndividualLastName;

                    result.IndividualMiddleName = result.Customer.IndividualMiddleName;

                    result.IndividualLastName2 = result.Customer.IndividualLastName2;

                    result.IndividualAKAName = result.Customer.IndividualAKAName;

                    result.DateofBirth = result.Customer.IndividualDoB;

                    result.CountryofcitizenshipId = result.Customer.IndividualCitizenshipCountry;


                    result.CountryofcitizenshipBSAApproval = result.Customer.CountryBSAApprovalId.ToString();

                    if (result.Customer.Country1 != null)

                    {

                        result.CountryofcitizenshipRiskDesignation = result.Customer.Country1.CountryRiskDesignation.RiskDesignation;

                    }


                    result.CountryofcitizenshipLOB = new List<string>();

                    if (pep.CDDGCustomer.CDDGCustomerCountryLobs != null)

                    {

                        var loblist = pep.CDDGCustomer.CDDGCustomerCountryLobs.Select(x => x.LobId.ToString()).ToList();

                        result.CountryofcitizenshipLOB = loblist;


                    }

                    else

                    {

                        result.CountryofcitizenshipLOB = new List<string>();

                    }

                }


　

            }


　

            if (result.LobPeps != null)

            {

                result.LOB = result.LobPeps.Select(x => x.Lob.LobId.ToString()).ToList();

                result.MajorLOB = result.LobPeps.Select(x => x.Lob.MajorLob.MajorLOBName).ToList();

            }


            if (result.LOB.Count == 0)

            {

                result.LOB.Add(" ");

            }


            if (result.MajorLOB.Count == 0)

            {

                result.MajorLOB.Add(" ");

            }


            if (pep.CDDGPrimaryPeps != null)

            {

                result.PrimaryPepId=pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID==1).Select(x=>x.PrimaryPepId).ToList();

                result.PrimaryPepFirstName = pep.CDDGPrimaryPeps.Where(x=>x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.FirstName).ToList();

                result.PrimaryPepLastName = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.LastName).ToList();

                result.PrimaryPepLastName2 = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.LastName2).ToList();

                result.PrimaryPepMiddleName = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.MiddleName).ToList();

                result.PrimaryPepAKAName = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.AKAName).ToList();

                result.PrimaryPepPositionOpenField = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.PrimaryPepPositionOpenField).ToList();

                result.PrimaryPepPosition = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.PrimaryPepPositionId.ToString()).ToList();

                result.PrimaryPepAssociation = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Where(x=>x.PrimaryPepAssociationId!=null).Select(x => x.PrimaryPepAssociationId.ToString()).ToList();

                result.PepAssociatedCountry = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Where(x => x.PrimaryPepAssociatedCountryId != null).Select(x => x.PrimaryPepAssociatedCountryId.ToString()).ToList();

                result.PrimaryPepAssociatedCountryBSAApproval = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1)/*.Where(x => x.AssociatedCountryBSAApprovalId != null)*/.Select(x => x.AssociatedCountryBSAApprovalId.ToString()).ToList();

                result.PrimaryPepAssociatedCountryRiskDesignation = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Where(x => x.CDDGCountry != null).Select(x => x.CDDGCountry.CDDGCountryRiskDesignation.RiskDesignation).ToList();

                //result.PrimaryPepAssociatedCountryLobDate = pep.CDDGPrimaryPeps.Select(x => x.AssociatedCountryLobDate.ToString()).ToList();


                result.PrimaryPepCountry = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.PrimaryPepCountryId.ToString()).ToList();

                result.PrimaryPepBSAApproval = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1)/*.Where(x => x.CountryBSAApprovalId != null)*/.Select(x => x.CountryBSAApprovalId.ToString()).ToList();

                //result.PrimaryPepCountryRiskDesignation = pep.CDDGPrimaryPeps.Select(x => x.CountryRiskDesignationId.ToString()).ToList();

                result.PrimaryPepCountryRiskDesignation = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.CDDGCountry1.CDDGCountryRiskDesignation.RiskDesignation).ToList();

                result.PrimaryPepCountryLobDate = pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1).Select(x => x.CountryLobDate.HasValue ? x.CountryLobDate.Value.ToShortDateString() : null).ToList();


                result.PrimarypepCountryLOB = new List<List<string>>();

                result.PrimarypepCountryLOBCSV = new List<string>();

                result.PrimarypepAssociatedCountryLOB = new List<List<string>>();

                result.PrimarypepAssociatedCountryLOBCSV = new List<string>();

                foreach (var l in pep.CDDGPrimaryPeps.Where(x => x.EndDate == null && x.PepRequestStatusID == 1))

                {

                    if (l.CDDGPrimaryPepCountryLobs.Where(x => x.EndDate == null) != null)

                    {

                        var loblist = l.CDDGPrimaryPepCountryLobs.Where(x => x.EndDate == null).Select(x => x.LobId.ToString()).ToList();

                        result.PrimarypepCountryLOB.Add(loblist);

                        result.PrimarypepCountryLOBCSV.Add(String.Join(",", loblist.ToArray()));

                    }

                    else

                    {

                        result.PrimarypepCountryLOB.Add(new List<string>());

                        result.PrimarypepCountryLOBCSV.Add("");

                    }

                    if (l.CDDGPrimaryPepAssociatedCountryLobs.Where(x => x.EndDate == null) != null)

                    {

                        var loblist = l.CDDGPrimaryPepAssociatedCountryLobs.Where(x => x.EndDate == null).Select(x => x.LobId.ToString()).ToList();

                        result.PrimarypepAssociatedCountryLOB.Add(loblist);

                        result.PrimarypepAssociatedCountryLOBCSV.Add(String.Join(",", loblist.ToArray()));

                    }

                    else

                    {

                        result.PrimarypepAssociatedCountryLOB.Add(new List<string>());

                        result.PrimarypepAssociatedCountryLOBCSV.Add("");

                    }

                }


　

            }


            if (result.IsPep == true)

            {

                result.Pep = "Y";

            }

            else if (result.IsPep == false)

            {

                result.Pep = "N";

            }


            if(result.IsHoganFlagSet == true)

            {

                result.HoganFlagged = "Y";


            }

            else if (result.IsHoganFlagSet == false)

            {

                result.HoganFlagged = "N";

            }

            return result;

        }


        public void DeleteRowsFromRelatedTablesForRejectionWorkflow(int pepid)

        {

            int result = 0;

           

            var pep = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid && x.EndDate == null);


            for (int i = (pep.CDDGEcns.Count - 1); i >= 0; i--)

            {

                result = ecndataaccess.Delete(pep.CDDGEcns.ToList()[i]);

            }


            for (int i = (pep.CDDGLobPeps.Count - 1); i >= 0; i--)

            {

                result = lobpepdataaccess.Delete(pep.CDDGLobPeps.ToList()[i]);

            }


            for (int i = (pep.CDDGPrimaryPeps.Count - 1); i >= 0; i--)

            {

                for (int j = (pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepAssociatedCountryLobs.Count - 1); j >= 0; j--)

                {

                    result = primarypepassociatedcountrylobdataaccess.Delete(pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepAssociatedCountryLobs.ToList()[j]);

                }


                for (int k = (pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepCountryLobs.Count - 1); k >= 0; k--)

                {

                    result = primarypeplobdataaccess.Delete(pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepCountryLobs.ToList()[k]);

                }

                result = primarypepdataaccess.Delete(pep.CDDGPrimaryPeps.ToList()[i]);

            }


        }


　

        public void UpdateRowsFromRelatedTablesForRejectionWorkflow(int pepid)

        {

            var pep = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid && x.EndDate == null);


            pep.CDDGEcns.ToList().ForEach(x => x.EndDate = DateTime.Now);

            pep.CDDGEcns.ToList().ForEach(x => x.PepRequestStatusID = 5);


            foreach (CDDGEcn ecn in pep.CDDGEcns)

            {

                ecndataaccess.Update(ecn);

            }


            pep.CDDGLobPeps.ToList().ForEach(x => x.EndDate = DateTime.Now);

            pep.CDDGLobPeps.ToList().ForEach(x => x.PepRequestStatusID = 5);


            foreach (CDDGLobPep lobpep in pep.CDDGLobPeps)

            {

                lobpepdataaccess.Update(lobpep);

            }


            for (int i = (pep.CDDGPrimaryPeps.Count - 1); i >= 0; i--)

            {

                pep.CDDGPrimaryPeps.ToList().ForEach(x => x.EndDate = DateTime.Now);

                pep.CDDGPrimaryPeps.ToList().ForEach(x => x.PepRequestStatusID = 5);


　

                pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepAssociatedCountryLobs.ToList().ForEach(x => x.EndDate = DateTime.Now);

                //pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepAssociatedCountryLobs.ToList().ForEach(x => x.PepRequestStatusID = 5);

                for (int j = (pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepAssociatedCountryLobs.Count - 1); j >= 0; j--)

                {

                    primarypepassociatedcountrylobdataaccess.Update(pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepAssociatedCountryLobs.ToList()[j]);

                }


　

                pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepCountryLobs.ToList().ForEach(x => x.EndDate = DateTime.Now);

                //pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepCountryLobs.ToList().ForEach(x => x.PepRequestStatusID = 5);

                for (int k = (pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepCountryLobs.Count - 1); k >= 0; k--)

                {

                    primarypeplobdataaccess.Update(pep.CDDGPrimaryPeps.ToList()[i].CDDGPrimaryPepCountryLobs.ToList()[k]);

                }


                primarypepdataaccess.Update(pep.CDDGPrimaryPeps.ToList()[i]);

            }


        }


　

        public PEPEntity GetSinglePEPbyidforCR(int? pepid, int crid)

        {

            if (crid == 0)

            {

                var pepDB = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid);

                //if (pepDB.PepRequestStatusId == 6 || pepDB.PepRequestStatusId == 3)

                //{

                var peentitydetails = GetSinglePEPbyid(pepid);


                // }

                return peentitydetails;

            }


            else {

                var pepDBforComments = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid);

                CDDGPep cddgpep = new CDDGPep();

                var pep = changeRequestDataAccess.GetAll().Where(x => x.ChangeRequestId == crid && x.EndDate == null).FirstOrDefault();

                //int crcount = pep.Count();


　

                //foreach (CDDGChangeRequest crpep in pep)

                // {

                Mapper.CreateMap<CDDGChangeRequest, CDDGPep>();

                cddgpep = Mapper.Map<CDDGPep>(pep);


                cddgpep.CDDGEcns = ecndataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();

                cddgpep.CDDGLobPeps = lobpepdataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();

                cddgpep.CDDGAttachments = attachmentdataaccess.GetAll().Where(x => x.PepId == pep.PepId && (x.PepRequestStatusID == 2 || x.PepRequestStatusID == 1) /*&& x.ChangeRequestID == pep.ChangeRequestId*/).ToList();

                cddgpep.CDDGPrimaryPeps = primarypepdataaccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();

                foreach (var l in cddgpep.CDDGPrimaryPeps)

                {

                    l.CDDGPrimaryPepCountryLobs = l.CDDGPrimaryPepCountryLobs.Where(x => x.EndDate == null).ToList();

                    l.CDDGPrimaryPepAssociatedCountryLobs = l.CDDGPrimaryPepAssociatedCountryLobs.Where(x => x.EndDate == null).ToList();

                }

                //cddgpep.CDDGRequestAssignments = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pep.PepId && x.PepRequestStatusID == 2 && x.ChangeRequestID == pep.ChangeRequestId).ToList();


                // }


　

　

　

                Mapper.CreateMap<CDDGPep, PEPEntity>();

                var result = Mapper.Map<PEPEntity>(cddgpep);

                result.PepRequestStatus = result.PEPRequestStatu.StatusName;

                result.CrNo = pep.CrNo;

                result.PepDeterminationComments = pepDBforComments.PepDeterminationComments;

                result.IsPep = pepDBforComments.IsPep;

                result.IsHoganFlagSet = pepDBforComments.IsHoganFlagSet;

                result.ReasonNotPepId = pepDBforComments.ReasonNotPepId;

                result.DeterminationUpdationDate = pepDBforComments.DeterminationUpdationDate;

                result.PepLevelId = pepDBforComments.PepLevelId;

                result.PepTypeId = pepDBforComments.PepTypeId;

                result.HoganFlagDate = pepDBforComments.HoganFlagDate;


                //todo: change the Email to UserAcc.

                var ue = userDetailsDataAccess.FindSingleBy(x => x.LanID == result.CreatedBy);

                Mapper.CreateMap<CDDGUser, UserEntity>();

                var user = Mapper.Map<UserEntity>(ue);


                result.RequestorFirstName = user.FirstName;

                result.RequestorLastName = user.LastName;

                result.RequestorAU = user.AU;

                result.RequestorEmail = user.Email;


                if (result.Ecns != null && result.Ecns.Count > 0)

                {


                    result.ECN = new List<string>();

                    result.Flagged = new List<string>();

                    result.DateFlagged = new List<string>();

                    result.PrimaryEcnNotProvided = result.Ecns.ToList()[0].PrimaryEcnNotProvided;

                    foreach (var ecna in result.Ecns)

                    {

                        result.ECN.Add(ecna.ECN);

                        if (ecna.IsFlagged == true)

                        {

                            result.Flagged.Add("Y");

                            result.DateFlagged.Add(ecna.DateFlagged.HasValue ? ecna.DateFlagged.Value.ToShortDateString() : null);

                        }

                        else if (ecna.IsFlagged == false)

                        {

                            result.Flagged.Add("N");

                            result.DateFlagged.Add("");

                        }

                        else

                        {

                            result.Flagged.Add("");

                            result.DateFlagged.Add("");

                        }

                    }


                }


　

                if ((result.Attachments != null) && (result.Attachments.Count > 0))

                {

                    result.AttachhmentList = result.Attachments.ToList();

                }

                else {

                    result.AttachhmentList = new List<AttachmentEntity>();

                }


                if (result.Customer != null)

                {

                    result.Customer_Name = result.Customer.CustomerName;

                    result.CustomerStatusId = result.Customer.CustomerStatu.StatusId.ToString();

                    if (result.Customer.IsEntity == true)

                    {

                        result.CustomerType = "Entity";

                        result.PEPEntityName = result.Customer.EntityName;

                        result.EntityFormationCountry = result.Customer.EntityFormationCountry.ToString();

                        result.EntityFormationCountryBSAApproval = result.Customer.CountryBSAApprovalId.ToString();

                        result.EntityFormationCountryRiskDesignation = result.Customer.Country.CountryRiskDesignation.RiskDesignation;


                        result.EntityFormationCountryLOB = new List<string>();

                        if (pep.CDDGCustomer.CDDGCustomerCountryLobs != null)

                        {

                            var loblist = pep.CDDGCustomer.CDDGCustomerCountryLobs.Select(x => x.LobId.ToString()).ToList();

                            result.EntityFormationCountryLOB = loblist;


                        }

                        else

                        {

                            result.EntityFormationCountryLOB = new List<string>();

                        }


                    }

                    else

                    {

                        result.CustomerType = "Individual";

                        result.IndividualFirstName = result.Customer.IndividualFirstName;

                        result.IndividualLastName = result.Customer.IndividualLastName;

                        result.IndividualMiddleName = result.Customer.IndividualMiddleName;

                        result.IndividualLastName2 = result.Customer.IndividualLastName2;

                        result.IndividualAKAName = result.Customer.IndividualAKAName;

                        result.DateofBirth = result.Customer.IndividualDoB;

                        result.CountryofcitizenshipId = result.Customer.IndividualCitizenshipCountry;


                        result.CountryofcitizenshipBSAApproval = result.Customer.CountryBSAApprovalId.ToString();

                        result.CountryofcitizenshipRiskDesignation = result.Customer.Country1.CountryRiskDesignation.RiskDesignation;


                        result.CountryofcitizenshipLOB = new List<string>();

                        if (pep.CDDGCustomer.CDDGCustomerCountryLobs != null)

                        {

                            var loblist = pep.CDDGCustomer.CDDGCustomerCountryLobs.Select(x => x.LobId.ToString()).ToList();

                            result.CountryofcitizenshipLOB = loblist;


                        }

                        else

                        {

                            result.CountryofcitizenshipLOB = new List<string>();

                        }

                    }


　

                }


　

                if (result.LobPeps != null)

                {

                    result.LOB = result.LobPeps.Select(x => x.Lob.LobId.ToString()).ToList();

                    result.MajorLOB = result.LobPeps.Select(x => x.Lob.MajorLob.MajorLOBName).ToList();

                }


                if (cddgpep.CDDGPrimaryPeps != null)

                {

                    result.PrimaryPepId =  cddgpep.CDDGPrimaryPeps.Select(x => x.PrimaryPepId).ToList();

                    result.PrimaryPepFirstName = cddgpep.CDDGPrimaryPeps.Select(x => x.FirstName).ToList();

                    result.PrimaryPepLastName = cddgpep.CDDGPrimaryPeps.Select(x => x.LastName).ToList();

                    result.PrimaryPepLastName2 = cddgpep.CDDGPrimaryPeps.Select(x => x.LastName2).ToList();

                    result.PrimaryPepMiddleName = cddgpep.CDDGPrimaryPeps.Select(x => x.MiddleName).ToList();

                    result.PrimaryPepAKAName = cddgpep.CDDGPrimaryPeps.Select(x => x.AKAName).ToList();

                    result.PrimaryPepPositionOpenField = cddgpep.CDDGPrimaryPeps.Select(x => x.PrimaryPepPositionOpenField).ToList();

                    result.PrimaryPepPosition = cddgpep.CDDGPrimaryPeps.Select(x => x.PrimaryPepPositionId.ToString()).ToList();

                    result.PrimaryPepAssociation = cddgpep.CDDGPrimaryPeps.Select(x => x.PrimaryPepAssociationId.ToString()).ToList();

                    result.PepAssociatedCountry = cddgpep.CDDGPrimaryPeps.Select(x => x.PrimaryPepAssociatedCountryId.ToString()).ToList();

                    result.PrimaryPepAssociatedCountryBSAApproval = cddgpep.CDDGPrimaryPeps.Select(x => x.AssociatedCountryBSAApprovalId.ToString()).ToList();

                    result.PrimaryPepAssociatedCountryRiskDesignation = cddgpep.CDDGPrimaryPeps.Select(x => x.CDDGCountry.CDDGCountryRiskDesignation.RiskDesignation).ToList();

                    //result.PrimaryPepAssociatedCountryLobDate = pep.CDDGPrimaryPeps.Select(x => x.AssociatedCountryLobDate.ToString()).ToList();


                    result.PrimaryPepCountry = cddgpep.CDDGPrimaryPeps.Select(x => x.PrimaryPepCountryId.ToString()).ToList();

                    result.PrimaryPepBSAApproval = cddgpep.CDDGPrimaryPeps.Select(x => x.CountryBSAApprovalId.ToString()).ToList();

                    //result.PrimaryPepCountryRiskDesignation = pep.CDDGPrimaryPeps.Select(x => x.CountryRiskDesignationId.ToString()).ToList();

                    result.PrimaryPepCountryRiskDesignation = cddgpep.CDDGPrimaryPeps.Select(x => x.CDDGCountry1.CDDGCountryRiskDesignation.RiskDesignation).ToList();

                    result.PrimaryPepCountryLobDate = cddgpep.CDDGPrimaryPeps.Select(x => x.CountryLobDate.HasValue ? x.CountryLobDate.Value.ToShortDateString() : null).ToList();


                    result.PrimarypepCountryLOB = new List<List<string>>();

                    result.PrimarypepCountryLOBCSV = new List<string>();

                    result.PrimarypepAssociatedCountryLOB = new List<List<string>>();

                    result.PrimarypepAssociatedCountryLOBCSV = new List<string>();

                    foreach (var l in cddgpep.CDDGPrimaryPeps)

                    {

                        if (l.CDDGPrimaryPepCountryLobs != null)

                        {

                            var loblist = l.CDDGPrimaryPepCountryLobs.Select(x => x.LobId.ToString()).ToList();

                            result.PrimarypepCountryLOB.Add(loblist);

                            result.PrimarypepCountryLOBCSV.Add(String.Join(",", loblist.ToArray()));

                        }

                        else

                        {

                            result.PrimarypepCountryLOB.Add(new List<string>());

                            result.PrimarypepCountryLOBCSV.Add("");

                        }

                        if (l.CDDGPrimaryPepAssociatedCountryLobs != null)

                        {

                            var loblist = l.CDDGPrimaryPepAssociatedCountryLobs.Select(x => x.LobId.ToString()).ToList();

                            result.PrimarypepAssociatedCountryLOB.Add(loblist);

                            result.PrimarypepAssociatedCountryLOBCSV.Add(String.Join(",", loblist.ToArray()));

                        }

                        else

                        {

                            result.PrimarypepAssociatedCountryLOB.Add(new List<string>());

                            result.PrimarypepAssociatedCountryLOBCSV.Add("");

                        }

                    }


　

                }


　

                if (result.IsPep == true)

                {

                    result.Pep = "Y";

                }

                else if (result.IsPep == false)

                {

                    result.Pep = "N";

                }


                if (result.IsHoganFlagSet == true)

                {

                    result.HoganFlagged = "Y";


                }

                else if (result.IsHoganFlagSet == false)

                {

                    result.HoganFlagged = "N";

                }


　

                Dictionary<string,List<string>> changedproperties = ComparePEPs(pepid, result);

                result.changedpropertiesforCR = changedproperties;

                return result;

            }

        }


        private Dictionary<string, List<string>> ComparePEPs(int? pepid, PEPEntity pepentity2)

        {

            var pepentity1 = GetSinglePEPbyid(pepid);

            Dictionary<string, List<string>> result = new Dictionary<string, List<string>>();

            EqualityComparer equal = new EqualityComparer();

            if (!equal.Equals(pepentity1, pepentity2))

            {

                result = equal.ChangedProperties;

            }

            

            

            return result;

        }


　

        public int Update(PEPEntity PEP)

        {

            Mapper.CreateMap<PEPEntity, CDDGPep>();

            var a = Mapper.Map<CDDGPep>(PEP);

            var result = pepdetailsdataccess.Update(a);

            return result;

        }


　

        public int UpdateEcn(EcnEntity ECN)

        {

            Mapper.CreateMap<EcnEntity, CDDGEcn>();

            var a = Mapper.Map<CDDGEcn>(ECN);

            var result = ecndataaccess.Update(a);

            return result;

        }


        public AttachmentEntity GetAttachment(int id)

        {

            //Mapper.CreateMap<PEPEntity, CDDGPep>();

            //var a = Mapper.Map<CDDGPep>(id);

            var result = attachmentdataaccess.FindSingleBy(x => x.AttachmentID == id);

            var a = Mapper.Map<AttachmentEntity>(result);

            return a;

        }


        public AttachmentEntity GetAttachmentRelatedtoPepId(int id)

        {

            //Mapper.CreateMap<PEPEntity, CDDGPep>();

            //var a = Mapper.Map<CDDGPep>(id);

            var result = attachmentdataaccess.FindSingleBy(x => x.PepId == id && x.EndDate == null);

            var a = Mapper.Map<AttachmentEntity>(result);

            return a;

        }


        public int UpdateAttachment(AttachmentEntity attachment)

        {

            Mapper.CreateMap<AttachmentEntity, CDDGAttachment>();

            var a = Mapper.Map<CDDGAttachment>(attachment);

            var result = attachmentdataaccess.Update(a);

            return result;

        }

        public IEnumerable<PepHistoryViewModel> GetAllHistory(int pepId)

        {

            Mapper.CreateMap<CDDGPep, PepHistoryViewModel>();

            //var ecnforhistoryList = ecndataaccess.GetAll().Where(x => x.PepId == pepId && x.PepRequestStatusID == 1);

            //var pephistoryList = pepdetailsdataccess.GetAllPepWithChildDetails().Where(x => x.EndDate == null && x.PepId==pepId);


            var result = pepdetailsdataccess.GetPepWithChild(pepId);


            //var peplist = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<PepHistoryViewModel>>(pephistoryList);

            //var ecnlist = Mapper.Map<IEnumerable<CDDGEcn>, IEnumerable<EcnEntity>>(ecnforhistoryList);

            //if(peplist.ToList().Count>0 && ecnlist.ToList().Count>0)

            //    peplist.ToList().FirstOrDefault().Ecn = ecnlist.ToList();

            return result;

        }

     

         public IEnumerable<UserHistoryViewModel> GetUserCRHistory(int UserID)

        {

            Mapper.CreateMap<CDDGChangeRequest, UserHistoryViewModel>();

            var userhistoryList = changeRequestDataAccess.GetUserCRHistory(UserID);

            var list = Mapper.Map<IEnumerable<UserHistoryViewModel>>(userhistoryList);

            return list;

        }

     

        public DashBoardViewModel GetPDTManagerDashboardDetails()

        {

            DashBoardViewModel dashBoard = new DashBoardViewModel();


　

            #region User Wise Pending Peps

            List<consultantWisePepListViewModel> users = GetUserDetails("1");

            dashBoard.consultantWisePendingRequests = users;

            dashBoard.consultantWisePendingRequestsCount = users.Select(x => x.Requests.Count).Sum();


　

            #endregion


            #region User Wise CR

            users = GetUserDetails("2|6");

            dashBoard.consultantWiseCRRequests = users;

            dashBoard.consultantWiseCRRequestsCount = users.Select(x => x.Requests.Count).Sum();


            #endregion


            #region User Wise SLA

            users = GetUserDetails("SLA");

            dashBoard.consultantWiseSLARequests = users;

            dashBoard.consultantWiseSLARequestsCount = users.Select(x => x.Requests.Count).Sum();


            #endregion


            #region User Wise Rejected

            users = GetUserDetails("5");

            dashBoard.consultantWiseRejectedRequests = users;

            dashBoard.consultantWiseRejectedRequestsCount = users.Select(x => x.Requests.Count).Sum();


            #endregion


　

            return dashBoard;

        }


        private List<consultantWisePepListViewModel> GetUserDetails(string pepStatus)

        {

            List<CDDGPep> peplist;

            var ConpepList = requestAssignmentDataAccess.GetAll().Where(x=>x.EndDate==null).GroupBy(u => u.CDDGUser).Select(y => new { consultant = y.Key, /*Requests = y.Select(q => q.CDDGPep).ToList(),*/ ChangeRequest= y.Select(k=> new { pepid=k.PepId, crid= k.ChangeRequestID}) }).ToList();

           // var ConpepListCR = requestAssignmentDataAccess.GetAll().Where(x => x.EndDate == null && x.ChangeRequestID!=null).GroupBy(u => u.CDDGUser).Select(y => new { consultant = y.Key, Requests = y.Select(q => q.CDDGPep).ToList(), ChangRequest = y.Select(j => j.ChangeRequestID).ToList() }).ToList();

            Mapper.CreateMap<CDDGPep, consultantWisePepListViewModel>().ForMember(a => a.consultantName, b => b.MapFrom(c => c.CreatedBy));


            #region All Requests

            //Mapper.CreateMap<CDDGPep, DisplayListViewModel>().ForMember(a => a.Country, b => b.MapFrom(c => c.CDDGCountry)).ForMember(a => a.Customer, b => b.MapFrom(c => c.CDDGCustomer))

            //    .ForMember(a => a.PrimaryEcn, b => b.MapFrom(c => c.CDDGEcns.Where(e => e.EcnSeqValNum == 1.ToString()).Select(k => k.Ecn).FirstOrDefault()))

            // .ForMember(a => a.PrimaryPep, b => b.MapFrom(c => c.CDDGPrimaryPeps.Select(k => k.PrimaryPepId.ToString()).FirstOrDefault()))

            // .ForMember(a => a.AssignedTo, b => b.MapFrom(c => c.CDDGRequestAssignments.Select(k => k.CDDGUser.FirstName).FirstOrDefault()))

            // .ForMember(a => a.Status, b => b.MapFrom(c => c.CDDGPEPRequestStatu.StatusName))

            // .ForMember(a => a.Entity, b => b.MapFrom(c => c.CDDGPepType.PepType));


            List<consultantWisePepListViewModel> users = new List<consultantWisePepListViewModel>();


            foreach (var item in ConpepList)

            {

                List<CDDGPep> peprequests;

                List<CDDGPep> peprequestsCR;


                var pepwithcrs = item.ChangeRequest.Where(i => i.crid != null).Select(x => x.crid).ToList();


                var pepidsCr = changeRequestDataAccess.GetAll().Where(i => pepwithcrs.Contains(i.ChangeRequestId) && i.EndDate == null).Select(x => x.ChangeRequestId).ToList();

               // peprequestsCR = pepdetailsdataccess.GetAll().Where(x => pepidscr.Contains(x.PepId) && x.EndDate == null).ToList();


                //var crs = item.ChangRequest.Where(i => i != null);

                    var pepidsassigned = item.ChangeRequest.Where(i => i.crid == null).Select(x => x.pepid).ToList();

                    peprequests = pepdetailsdataccess.GetAll().Where(x => pepidsassigned.Contains(x.PepId) && x.EndDate == null).ToList();

                

               

              

                string headerMessage = null;

                consultantWisePepListViewModel Consultant = new consultantWisePepListViewModel();

                Consultant.consultantName = item.consultant.FirstName + " " + item.consultant.LastName;

                Consultant.consultantId = item.consultant.UserID;

                // provide filters 


                if (pepStatus.ToUpper().Contains("SLA"))

                {

                    peprequests.RemoveAll(x => x == null);

                    // peplist = item.Requests.ToList().Where(x => x.PepRequestStatusId != 4 && x.CreatedTS.AddDays(10) <= DateTime.Now.AddDays(-3)).ToList();

                    var pepIdsforSLA = peprequests.Where(x => x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2).Select(p => p.PepId).ToList();

                    var holidaylist = holidayCalenderDataAccess.GetAll().Select(i => i.HolidayDate).ToList();

                    int countdate = 0;

                    Dictionary<string, List<string>> pepwithCounterDate = new Dictionary<string, List<string>>();

                    List<string> counterdate = new List<string>();

                    int countsladay = 0;

                    peprequests.ToList().Where(x=>x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2).ToList().ForEach(y =>

                    {

                        for (DateTime date = y.CreatedTS; date <= y.CreatedTS.AddHours(72); date = date.AddDays(1))

                        {

                            foreach (DateTime holidaydate in holidaylist)

                            {

                                if (holidaydate.ToString("d").Equals(date.ToString("d")))

                                {

                                    countdate++;

                                    counterdate.Add(countdate.ToString());

                                }

                            }

                            if (date.DayOfWeek.ToString() == "Saturday")

                            {

                                countsladay = countsladay + 2;

                            }

                            //if (date.DayOfWeek.ToString() == "Sunday")

                            //{

                            //    countsladay++;

                            //}

                        }

                        if (counterdate.Count > 0)

                        {

                            pepwithCounterDate.Add(y.PepId.ToString(), counterdate);

                            int index = pepIdsforSLA.IndexOf(y.PepId);

                            pepIdsforSLA.RemoveAt(index);

                        }


                        countdate = 0;

                        counterdate = new List<string>();

                    });


                    List<int> pepIDlistSLAsaturday;

                    List<int> pepIDlistSLAsunday;

                    List<int> pepIDlistSLA;

                    List<int> pepIDSLAsaturday = new List<int>();

                    List<int> pepIDSLAsunday = new List<int>();

                    List<int> pepIDSLA = new List<int>();

                    if (pepwithCounterDate.Count > 0)

                    {

                        foreach (var pepid in pepwithCounterDate)

                        {


                            pepIDSLAsaturday = peprequests.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(/*2 + */Int32.Parse(pepid.Value.Last() + countsladay), 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                            pepIDSLAsunday = peprequests.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last() + countsladay), 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                            pepIDSLA = peprequests.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.AddDays(Int32.Parse(pepid.Value.Last())).AddHours(72).AddDays(countsladay) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


                        }


                    }

                    pepIDlistSLAsaturday = peprequests.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(/*2 +*/ countsladay, 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                    pepIDlistSLAsunday = peprequests.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(/*1 +*/ countsladay, 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                    pepIDlistSLA = peprequests.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.AddHours(72).AddDays(countsladay) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


                    if (pepIDSLAsaturday.Count > 0)

                        pepIDlistSLAsaturday.AddRange(pepIDSLAsaturday);

                    if (pepIDSLAsunday.Count > 0)

                        pepIDlistSLAsunday.AddRange(pepIDSLAsunday);

                    if (pepIDSLA.Count > 0)

                        pepIDlistSLA.AddRange(pepIDSLA);


                    pepIDlistSLA.AddRange(pepIDlistSLAsaturday);

                    pepIDlistSLA.AddRange(pepIDlistSLAsunday);


                    List<CDDGPep> peplist4SLA = GetPepDetailsFromPepIds(pepIDlistSLA);


                    headerMessage = "Total Requests Approching SLA for: ";

                    Consultant.Requests = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(peplist4SLA).ToList();

                    Consultant.headerMessage = headerMessage.ToUpper();

                    users.Add(Consultant);

                }

                else

                {

                    List<int?> pepStatuses = pepStatus.Split('|').Select(Int32.Parse).Cast<int?>().ToList();

                    peprequests.RemoveAll(x => x == null);

                    List<DisplayListViewModel> pepDetailsCR = new List<DisplayListViewModel>(); ;

                    if (pepStatuses.Contains(2) || pepStatuses.Contains(6) /*|| pepStatuses.Contains(3)*/)

                    {

                        DisplayPepInformationListViewModel peplist2 = new DisplayPepInformationListViewModel();

                        //var pepids2 = peprequestsCR.Where(x => x.PepRequestStatusId == 2).Select(x => x.PepId).ToList();

                        //var pepdetails2 = GetPepDetailsFromPepIds(pepids2);

                       // List<int?> pepids = pepids2.Select(i => (int?)i).ToList();


                        //var pepdetailscr = GetPEPCRDetails(pepids);

                       // List<int> pepwithcrs = pepdetailscr.Select(x => x.ChangeRequestId).ToList();

                        foreach (int crid in pepidsCr)

                        {


                            var pep = GetSinglePEPbyidforCRbyCRid(crid);

                            var crnoid = changeRequestDataAccess.FindSingleBy(x => x.ChangeRequestId == crid);


　

                            //int pepidcurrent = pep.PepId;

                            var display = Mapper.Map<CDDGPep, DisplayListViewModel>(pep);


                            //List<int> pepwithcrs1 = pepdetailscr.Where(x => x.PepId == pep.PepId).Select(x => x.ChangeRequestId).ToList();

                            //Dictionary<int?, List<int>> pepwithcr = new Dictionary<int?, List<int>>();

                            //pepwithcr.Add(pep.PepId, pepwithcrs1);

                            display.ChangeRequestId = crid;

                            display.pepidwithcrid = pep.PepId.ToString() + "- " + crnoid.CrNo.ToString();

                            display.AssignedTo = requestAssignmentDataAccess.FindSingleBy(x => x.ChangeRequestID == crid).CDDGUser.FirstName.ToString();

                            //display.pepidwithcrid = pepwithcr;

                            pepDetailsCR.Add(display);


                        }


                        var pepidsforcancelled = peprequests.Where(x => /*x.PepRequestStatusId == 3 ||*/ x.PepRequestStatusId == 6).Select(x => x.PepId).ToList();

                        var pepdetailscancelled = GetPepDetailsFromPepIds(pepidsforcancelled);


                        var pepDetailscancelled = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepdetailscancelled);

                        pepDetailsCR.AddRange(pepDetailscancelled);

                        Consultant.Requests = pepDetailsCR.OrderBy(x => x.CreatedTS).ToList();

                        headerMessage = "Total Requests for: ";

                        Consultant.headerMessage = headerMessage.ToUpper();

                        users.Add(Consultant);

                    }

                    else {

                        peprequests.RemoveAll(x => x == null);

                        peplist = peprequests.ToList().Where(x => x.EndDate == null && pepStatuses.Contains(x.PepRequestStatusId)).ToList();

                       // peplist= pepdetailsdataccess.GetAll().Where(i=> peplist.Contains(i.pepid))

                        headerMessage = "Total Requests for: ";

                        Consultant.Requests = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(peplist).ToList();

                        Consultant.headerMessage = headerMessage.ToUpper();

                        users.Add(Consultant);

                    }


　

                }


　

            }


            return users;

        }


　

　

        public DisplayPepInformationListViewModel GetOpenRequestPepListForUserId(int userId, string pepStatus)

        {

            string msg = null;

            IEnumerable<CDDGPep> pepRecords;


            DisplayPepInformationListViewModel pepList = new DisplayPepInformationListViewModel();

            var pepIdsassignedtouser = requestAssignmentDataAccess.GetAll().Where(x => x.CDDGUser.UserID == userId && x.EndDate == null && x.ChangeRequestID==null).Select(p => p.PepId).ToList();

            var pepIdsassignedtouserCR = requestAssignmentDataAccess.GetAll().Where(x => x.CDDGUser.UserID == userId && x.EndDate == null && x.ChangeRequestID!=null).Select(p => p.ChangeRequestID).ToList();

            var pepIds = pepdetailsdataccess.GetAll().Where(x => pepIdsassignedtouser.Contains(x.PepId) && x.EndDate == null).Select(p => p.PepId).ToList();

            var pepIdsCr = changeRequestDataAccess.GetAll().Where(i => pepIdsassignedtouserCR.Contains(i.ChangeRequestId) && i.EndDate == null).Select(x => x.ChangeRequestId).ToList(); 

            var pepIdsforSLA = pepdetailsdataccess.GetAll().Where(x => pepIdsassignedtouser.Contains(x.PepId) && x.EndDate == null && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2)).Select(p => p.PepId).ToList();

            var user = userDetailsDataAccess.GetAll().Where(x => x.UserID == userId).FirstOrDefault();


            if (pepStatus.ToUpper().Contains("SLA"))

            {

                //pepRecords = pepdetailsdataccess.GetAll().Where(x => pepIds.Contains(x.PepId) && x.CreatedTS.AddDays(10) <= DateTime.Now.AddDays(-3)).ToList();


                var holidaylist = holidayCalenderDataAccess.GetAll().Select(i => i.HolidayDate).ToList();


                int countdate = 0;

                Dictionary<string , List<string>> pepwithCounterDate = new Dictionary<string, List<string>>();

                List<string> counterdate = new List<string>();

                int countsladay = 0;

                pepdetailsdataccess.GetAll().ToList().Where(x => pepIds.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2)).ToList().ForEach(y =>

                {

                    for (DateTime date = y.CreatedTS; date <= y.CreatedTS.AddHours(72); date = date.AddDays(1))

                    {

                        foreach (DateTime holidaydate in holidaylist)

                        {

                            if (holidaydate.ToString("d").Equals(date.ToString("d")))

                            {

                                countdate++;

                                counterdate.Add(countdate.ToString());

                            }

                        }

                        if (date.DayOfWeek.ToString() == "Saturday")

                        {

                            countsladay = countsladay + 2;

                        }

                        //if (date.DayOfWeek.ToString() == "Sunday")

                        //{

                        //    countsladay++;

                        //}

                    }

                    if (counterdate.Count > 0)

                    {

                        pepwithCounterDate.Add(y.PepId.ToString(), counterdate);

                        int index= pepIdsforSLA.IndexOf(y.PepId);

                        pepIdsforSLA.RemoveAt(index);

                    }


                    countdate = 0;

                    counterdate = new List<string>();

                });


                List<int> pepIDlistSLAsaturday;

                List<int> pepIDlistSLAsunday;

                List<int> pepIDlistSLA;

                List<int> pepIDSLAsaturday =new List<int>();

                List<int> pepIDSLAsunday= new List<int>();

                List<int> pepIDSLA = new List<int>();

                if (pepwithCounterDate.Count > 0)

                {

                    foreach (var pepid in pepwithCounterDate)

                    {


                       pepIDSLAsaturday = pepdetailsdataccess.GetAll().ToList().Where(x => x.PepId== Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(/*2 +*/ Int32.Parse(pepid.Value.Last()) + countsladay, 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                       pepIDSLAsunday = pepdetailsdataccess.GetAll().ToList().Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last()) + countsladay, 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                       pepIDSLA = pepdetailsdataccess.GetAll().ToList().Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.AddDays(Int32.Parse(pepid.Value.Last())).AddHours(72).AddDays(countsladay) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                        

                    }


                }

                    pepIDlistSLAsaturday = pepdetailsdataccess.GetAll().ToList().Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(/*2 +*/ countsladay, 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                    pepIDlistSLAsunday = pepdetailsdataccess.GetAll().ToList().Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(/*1 +*/ countsladay, 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                    pepIDlistSLA = pepdetailsdataccess.GetAll().ToList().Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.AddHours(72).AddDays(countsladay) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


                if(pepIDSLAsaturday.Count>0)

                pepIDlistSLAsaturday.AddRange(pepIDSLAsaturday);

                if (pepIDSLAsunday.Count > 0)

                    pepIDlistSLAsunday.AddRange(pepIDSLAsunday);

                if (pepIDSLA.Count > 0)

                    pepIDlistSLA.AddRange(pepIDSLA);


　

　

                pepIDlistSLA.AddRange(pepIDlistSLAsaturday);

                pepIDlistSLA.AddRange(pepIDlistSLAsunday);


                List<CDDGPep> peplist4SLA = GetPepDetailsFromPepIds(pepIDlistSLA);


                pepList.HeaderInfo = "Requests Approaching SLA";

                pepList.PepList = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(peplist4SLA).ToList();

                pepList.PepList = GetSLADetails(pepList.PepList.ToList());

            }

            else

            {

                List<int?> pepStatuses = pepStatus.Split('|').Select(Int32.Parse).Cast<int?>().ToList();

                List<DisplayListViewModel> pepDetailsCR = new List<DisplayListViewModel>(); ;

                if (pepStatuses.Contains(2) || pepStatuses.Contains(6) /*|| pepStatuses.Contains(3)*/)

                {

                    DisplayPepInformationListViewModel peplist2 = new DisplayPepInformationListViewModel();

                    //var pepids2 = pepdetailsdataccess.GetAll().Where(x => pepIdsCr.Contains(x.PepId) && x.PepRequestStatusId == 2).Select(x => x.PepId).ToList();

                    //var pepdetails2 = GetPepDetailsFromPepIds(pepids2);

                   // List<int?> pepids = pepids2.Select(i => (int?)i).ToList();


                   // var pepdetailscr = GetPEPCRDetails(pepids);

                    //List<int> pepwithcrs = pepdetailscr.Select(x => x.ChangeRequestId).ToList();

                    foreach (var crid in pepIdsCr)

                    {


                        var pep = GetSinglePEPbyidforCRbyCRid(crid);

                        var crnoid = changeRequestDataAccess.FindSingleBy(x => x.ChangeRequestId == crid);


　

                        //int pepidcurrent = pep.PepId;

                        var display = Mapper.Map<CDDGPep, DisplayListViewModel>(pep);


                        //List<int> pepwithcrs1 = pepdetailscr.Where(x => x.PepId == pep.PepId).Select(x => x.ChangeRequestId).ToList();

                        //Dictionary<int?, List<int>> pepwithcr = new Dictionary<int?, List<int>>();

                        //pepwithcr.Add(pep.PepId, pepwithcrs1);

                        display.ChangeRequestId = crid;

                        display.pepidwithcrid = pep.PepId.ToString() + "- " + crnoid.CrNo.ToString();

                        display.AssignedTo = requestAssignmentDataAccess.FindSingleBy(x => x.ChangeRequestID == crid).CDDGUser.FirstName.ToString();

                        //display.pepidwithcrid = pepwithcr;

                        pepDetailsCR.Add(display);


                    }


                    var pepidsforcancelled = pepdetailsdataccess.GetAll().Where(x => pepIds.Contains(x.PepId) && (/*x.PepRequestStatusId == 3 || */x.PepRequestStatusId == 6 )).Select(x => x.PepId).ToList();

                    var pepdetailscancelled = GetPepDetailsFromPepIds(pepidsforcancelled);


                    var pepDetailscancelled = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepdetailscancelled);

                    pepDetailsCR.AddRange(pepDetailscancelled);

                    pepDetailsCR = GetSLADetails(pepDetailsCR);

                    pepList.HeaderInfo = "Change/Canceled Request";

                    pepList.PepList = pepDetailsCR.OrderBy(x => x.CreatedTS).ToList();

                }

                else {

                    pepRecords = pepdetailsdataccess.GetAll().Where(x => pepIds.Contains(x.PepId) && pepStatuses.Contains(x.PepRequestStatusId)).ToList();

                    pepList.PepList = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(pepRecords).ToList();

                    pepList.PepList = GetSLADetails(pepList.PepList.ToList());


                }


            }


            pepList.HeaderInfo = msg + user.FirstName.ToUpper() + " " + user.LastName.ToUpper();


            return pepList;

        }


        public DashBoardViewModel GetPDTDashboardDetails(int userId)

        {

            DashBoardViewModel dashBoard = new DashBoardViewModel();


            var pepInitial = requestAssignmentDataAccess.GetAll().Where(x => x.UserId == userId && x.EndDate == null && x.ChangeRequestID == null).Select(x => x.PepId).ToList();

            var pepCrs = requestAssignmentDataAccess.GetAll().Where(x => x.UserId == userId && x.EndDate == null && x.ChangeRequestID != null).Select(x => x.ChangeRequestID).ToList();

            var pepList = pepdetailsdataccess.GetAllPepWithChildDetails().Where(x => pepInitial.Contains(x.PepId) && x.PepRequestStatusId != 4).ToList();

            var pepListCR = changeRequestDataAccess.GetAll().Where(i => pepCrs.Contains(i.ChangeRequestId) && i.EndDate == null).Select(x => x.ChangeRequestId).ToList();

            //todo: work around for demo. Need to be worked on.

            // var pepList = pepdetailsdataccess.FindAllBy(x => x.PepRequestStatusId != 4 && x.CreatedBy == "heena.solanki@wellsfargo.com" && x.EndDate == null).ToList();

            foreach (var cddg in pepList)

            {

                cddg.CDDGEcns = cddg.CDDGEcns.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                cddg.CDDGLobPeps = cddg.CDDGLobPeps.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                cddg.CDDGAttachments = cddg.CDDGAttachments.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                cddg.CDDGPrimaryPeps = cddg.CDDGPrimaryPeps.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

                foreach (var l in cddg.CDDGPrimaryPeps)

                {

                    l.CDDGPrimaryPepCountryLobs = l.CDDGPrimaryPepCountryLobs.Where(x => x.EndDate == null).ToList();

                }

                //cddg.CDDGRequestAssignments = cddg.CDDGRequestAssignments.Where(x => x.PepRequestStatusID == 1 && x.PepId == cddg.PepId && x.EndDate == null).ToList();

            }


            #region User  Pending Peps          


            DisplayPepInformationListViewModel list = new DisplayPepInformationListViewModel();

            list.PepList = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(pepList.Where(x => x.PepRequestStatusId == 1)).ToList();

            list.PepList = GetSLADetails(list.PepList.ToList());


            list.HeaderInfo = "Pending Requests ";

            dashBoard.UserPendingRequests = list;


            #endregion


            #region User Wise CR

            //list = new DisplayPepInformationListViewModel();

            //list.PepList = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(pepList.Where(x => x.PepRequestStatusId == 2 || x.PepRequestStatusId == 3 || x.PepRequestStatusId == 6)).ToList();


            DisplayPepInformationListViewModel peplist2 = new DisplayPepInformationListViewModel();

           // var pepids2 = pepListCR.Where(x => x.PepRequestStatusId == 2).Select(x => x.PepId).ToList();

            //var pepdetails2 = GetPepDetailsFromPepIds(pepids2);

            //List<int?> pepids = pepids2.Select(i => (int?)i).ToList();

            List<DisplayListViewModel> pepDetailsCR = new List<DisplayListViewModel>();


            //var pepdetailscr = GetPEPCRDetails(pepids);


            //List<int> pepwithcrs = pepdetailscr.Select(x => x.ChangeRequestId).ToList();

            foreach (var crid in pepListCR)

            {


                var pep = GetSinglePEPbyidforCRbyCRid(crid);

                var crnoid = changeRequestDataAccess.FindSingleBy(x => x.ChangeRequestId == crid);


　

                //int pepidcurrent = pep.PepId;

                var display = Mapper.Map<CDDGPep, DisplayListViewModel>(pep);


                //List<int> pepwithcrs1 = pepdetailscr.Where(x => x.PepId == pep.PepId).Select(x => x.ChangeRequestId).ToList();

                //Dictionary<int?, List<int>> pepwithcr = new Dictionary<int?, List<int>>();

                //pepwithcr.Add(pep.PepId, pepwithcrs1);

                display.ChangeRequestId = crid;

                display.pepidwithcrid = pep.PepId.ToString() + "- " + crnoid.CrNo.ToString();

                display.AssignedTo = requestAssignmentDataAccess.FindSingleBy(x => x.ChangeRequestID == crid).CDDGUser.FirstName.ToString();

                //display.pepidwithcrid = pepwithcr;

                pepDetailsCR.Add(display);


            }

            //foreach (var crid in pepwithcrs)

            //{

            //    var pep = GetSinglePEPbyidforCRbyCRid(crid);

            //    var display = Mapper.Map<CDDGPep, DisplayListViewModel>(pep);


            //    List<int> pepwithcrs1 = pepdetailscr.Where(x => x.PepId == pep.PepId).Select(x => x.ChangeRequestId).ToList();

            //    Dictionary<int?, List<int>> pepwithcr = new Dictionary<int?, List<int>>();

            //    pepwithcr.Add(pep.PepId, pepwithcrs1);

            //    display.ChangeRequestId = crid;

            //    display.pepidwithcrid = pepwithcr;

            //    pepDetailsCR.Add(display);

            //    //pepforCR.Add(pep);

            //}


            // var pepdetailscr = GetPEPCRDetails(pepids);


            //  var cpmpletepepdetailsforCR = Mapper.Map<IEnumerable<PEPEntity>, IEnumerable<CDDGPep>>(pepforCR);

            //pepDetails = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepforCR);

            var pepidsforcancelled = pepList.Where(x => /*x.PepRequestStatusId == 3 ||*/ x.PepRequestStatusId == 6).Select(x => x.PepId).ToList();

            var pepdetailscancelled = GetPepDetailsFromPepIds(pepidsforcancelled);


            var pepDetailscancelled = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(pepdetailscancelled);

            pepDetailsCR.AddRange(pepDetailscancelled);

            pepDetailsCR = GetSLADetails(pepDetailsCR);

            peplist2.PepList = pepDetailsCR.OrderBy(x => x.CreatedTS).ToList();

            peplist2.HeaderInfo = "Change/Canceled Requests";

            dashBoard.UserCRRequests = peplist2;


　

            // plist.HeaderInfo = "Change/Canceled Requests";

            //dashBoard.UserCRRequests = list;


            #endregion


            #region User SLA

            list = new DisplayPepInformationListViewModel();

            //list.PepList = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(pepList.Where(x => x.CreatedTS.AddDays(10) <= DateTime.Now.AddDays(-3))).ToList();


            var pepIdsforSLA = pepList.Where(x => x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2).Select(j => j.PepId).ToList();

            var holidaylist = holidayCalenderDataAccess.GetAll().Select(i => i.HolidayDate).ToList();

            int countdate = 0;

            Dictionary<string, List<string>> pepwithCounterDate = new Dictionary<string, List<string>>();

            List<string> counterdate = new List<string>();

            int countsladay =0;

            pepList.ToList().Where(x => x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2).ToList().ForEach(y =>

            {

                for (DateTime date = y.CreatedTS; date <= y.CreatedTS.AddHours(72); date = date.AddDays(1))

                {

                    foreach (DateTime holidaydate in holidaylist)

                    {

                        if (holidaydate.ToString("d").Equals(date.ToString("d")))

                        {

                            countdate++;

                            counterdate.Add(countdate.ToString());

                        }

                    }


                    if (date.DayOfWeek.ToString() == "Saturday")

                    {

                        countsladay = countsladay + 2;

                    }

                    //if (date.DayOfWeek.ToString() == "Sunday")

                    //{

                    //    countsladay++;

                    //}

                }

                if (counterdate.Count > 0)

                {

                    pepwithCounterDate.Add(y.PepId.ToString(), counterdate);

                    int index = pepIdsforSLA.IndexOf(y.PepId);

                    pepIdsforSLA.RemoveAt(index);

                }


                countdate = 0;

                counterdate = new List<string>();

            });


           


            List<int> pepIDlistSLAsaturday;

            List<int> pepIDlistSLAsunday;

            List<int> pepIDlistSLA;

            List<int> pepIDSLAsaturday = new List<int>();

            List<int> pepIDSLAsunday = new List<int>();

            List<int> pepIDSLA = new List<int>();

            if (pepwithCounterDate.Count > 0)

            {

                foreach (var pepid in pepwithCounterDate)

                {


                    pepIDSLAsaturday = pepList.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(/*2 +*/ Int32.Parse(pepid.Value.Last()+ countsladay), 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                    pepIDSLAsunday = pepList.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(/*1 +*/ Int32.Parse(pepid.Value.Last()+ countsladay), 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

                    pepIDSLA = pepList.Where(x => x.PepId == Int32.Parse(pepid.Key) && x.CreatedTS.AddDays(Int32.Parse(pepid.Value.Last()+ countsladay)).AddHours(72) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


                }


            }

            pepIDlistSLAsaturday = pepList.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Saturday").Where(x => x.CreatedTS.Add(new TimeSpan(/*2 +*/ countsladay, 0, 0, 0)).AddHours(120).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

            pepIDlistSLAsunday = pepList.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.DayOfWeek.ToString() == "Sunday").Where(x => x.CreatedTS.Add(new TimeSpan(/*1 +*/ countsladay, 0, 0, 0)).AddHours(96).Subtract(new TimeSpan(0, x.CreatedTS.TimeOfDay.Hours, x.CreatedTS.TimeOfDay.Minutes, x.CreatedTS.TimeOfDay.Seconds)) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();

            pepIDlistSLA = pepList.Where(x => pepIdsforSLA.Contains(x.PepId) && (x.PepRequestStatusId == 1 || x.PepRequestStatusId == 2) && x.CreatedTS.AddHours(72).AddDays(countsladay) <= DateTime.Now.AddHours(24)).ToList().Select(x => x.PepId).ToList();


            if (pepIDSLAsaturday.Count > 0)

                pepIDlistSLAsaturday.AddRange(pepIDSLAsaturday);

            if (pepIDSLAsunday.Count > 0)

                pepIDlistSLAsunday.AddRange(pepIDSLAsunday);

            if (pepIDSLA.Count > 0)

                pepIDlistSLA.AddRange(pepIDSLA);


            pepIDlistSLA.AddRange(pepIDlistSLAsaturday);

            pepIDlistSLA.AddRange(pepIDlistSLAsunday);


            List<CDDGPep> peplist4SLA = GetPepDetailsFromPepIds(pepIDlistSLA);

            list.PepList = Mapper.Map<List<CDDGPep>, List<DisplayListViewModel>>(peplist4SLA);

            list.PepList = GetSLADetails(list.PepList.ToList());


            list.HeaderInfo = "Requests Approaching SLA";

            dashBoard.UserSLARequests = list;


            #endregion


            #region User Rejected

            list = new DisplayPepInformationListViewModel();

            list.PepList = Mapper.Map<IEnumerable<CDDGPep>, IEnumerable<DisplayListViewModel>>(pepList.Where(x => x.PepRequestStatusId == 5)).ToList();

            list.PepList = GetSLADetails(list.PepList.ToList());

            list.HeaderInfo = "Rejected Requests";

            dashBoard.UserRejectedRequests = list;


            #endregion


　

            return dashBoard;

        }


        public PEPChangeRequestEntity AddNewChangeRequest(PEPEntity PEP)

        {

            PEPChangeRequestEntity changeRequest = new PEPChangeRequestEntity();

            Mapper.CreateMap<PEPEntity, CDDGChangeRequest>();

            var a = Mapper.Map<PEPEntity, CDDGChangeRequest>(PEP);

            var result = changeRequestDataAccess.AddNew(a);

            //todo: use automapper to do reverse mapping

            // Ecn.ECNID = result.EcnId;

            changeRequest.ChangeRequestId = result.ChangeRequestId;

            return changeRequest;

        }


        public int UpdateCRforPEP(PEPEntity pepdetails)

        {

            Mapper.CreateMap<PEPEntity, CDDGPep>();

            //Mapper.CreateMap<PEPRequestStatuEntity, CDDGPEPRequestStatu>();


　

            // Mapper.CreateMap<PEPEntity, CDDGPep>().ForMember(cv => cv.CDDGPEPRequestStatu, m => m.MapFrom(s => s.PEPRequestStatu));

            var a = Mapper.Map<PEPEntity, CDDGPep>(pepdetails);

            //CDDGPep a = new CDDGPep();

            //a.PepRequestStatusId = pepdetails.PepRequestStatusId;

            //a.PreviousPepRequestStatusid = pepdetails.PreviousPepRequestStatusid;

            //a.PepId = (int)pepdetails.PepId;

            var result = pepdetailsdataccess.UpdateCRforPEP(a);

            return result;

        }


        public int AcceptPEPDeterminationFormCR(PEPEntity pepdetailsforaccept)

        {

            int? pepid = pepdetailsforaccept.PepId;

            int crid = pepdetailsforaccept.CRId;

            var pepDB = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid);

            if (pepDB.PepRequestStatusId == 6)

            {

                pepDB.PepRequestStatusId = 3;

                pepDB.PreviousPepRequestStatusid = null;

                var pepCrs = changeRequestDataAccess.GetAll().Where(x => x.PepId == pepid && x.EndDate == null && x.PepRequestStatusId == 2).ToList();


                pepCrs.ForEach(x => x.EndDate = DateTime.Now);

                pepCrs.ForEach(x => x.PepRequestStatusId =3);


                foreach (var cr in pepCrs)

                {

                    changeRequestDataAccess.Update(cr);

                }

                bool hasCRECN = ecndataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRECN)

                {

                    var ecnChangeStatustoComplete = ecndataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    ecnChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    ecnChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 3);

                    foreach (CDDGEcn ecn in ecnChangeStatustoComplete)

                    {

                        ecndataaccess.Update(ecn);

                    }

                }


　

                //lobpep

                bool hasCRlobpep = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRlobpep)

                {

                    var lobpepChangeStatustoComplete = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    lobpepChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    lobpepChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 3);

                    foreach (CDDGLobPep lob in lobpepChangeStatustoComplete)

                    {

                        lobpepdataaccess.Update(lob);

                    }

                   

                }


　

　

                //cddgattachment


                //CDDGEcns.Any(x => x.Ecn.ToLower().Contains(searchDetails.ecn.ToLower())


                bool hasCRattachment = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRattachment)

                {

                    var attachmentChangeStatustoComplete = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    attachmentChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    attachmentChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 3);

                    foreach (CDDGAttachment att in attachmentChangeStatustoComplete)

                    {

                        attachmentdataaccess.Update(att);

                    }

                   

                }


　

　

                //primary pep

                bool hasCRprimarypep = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRprimarypep)

                {

                    var primarypepChangeStatustoComplete = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    primarypepChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    primarypepChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 3);

                    foreach (CDDGPrimaryPep pri in primarypepChangeStatustoComplete)

                    {

                        primarypepdataaccess.Update(pri);

                    }

                }

                pepDB.PepDeterminationComments = pepdetailsforaccept.PepDeterminationComments;

                var result = pepdetailsdataccess.Update(pepDB);

                return result;

            }

            else {

                var pep = changeRequestDataAccess.GetAll().Where(x => x.PepId == pepid && x.EndDate == null && x.PepRequestStatusId == 2).ToList();


                var pepentity = pep.OrderBy(x => x.CreatedTS).FirstOrDefault();


                if (pepentity.ChangeRequestId != crid)

                {

                    return 0;

                }

                else

                {

                    Mapper.CreateMap<CDDGChangeRequest, CDDGPep>();

                    var cddgpep = Mapper.Map<CDDGPep>(pepentity);


                    cddgpep.PepDeterminationComments = pepdetailsforaccept.PepDeterminationComments;

                    cddgpep.IsPep = pepDB.IsPep;

                    cddgpep.IsHoganFlagSet = pepDB.IsHoganFlagSet;

                    cddgpep.ReasonNotPepId = pepDB.ReasonNotPepId;

                    cddgpep.DeterminationUpdationDate = pepDB.DeterminationUpdationDate;

                    cddgpep.PepLevelId = pepDB.PepLevelId;

                    cddgpep.PepTypeId = pepDB.PepTypeId;

                    cddgpep.HoganFlagDate = pepDB.HoganFlagDate;

                    pepdetailsdataccess.Update(cddgpep);


                    pepentity.EndDate = DateTime.Now;

                    //pepentity.PepRequestStatusId = 4;

                    changeRequestDataAccess.Update(pepentity);


　

                    if (pep.Count() == 1)

                    {

                        pepDB.PepRequestStatusId = pepDB.PreviousPepRequestStatusid;

                        pepDB.PreviousPepRequestStatusid = null;

                        pepDB.CreatedTS = DateTime.Now;

                        pepdetailsdataccess.UpdateCRforPEPwithDate(pepDB);

                    }


　

                    //ECN


                    bool hasCRECN = ecndataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                    if (hasCRECN)

                    {

                        var ecnChangeStatustoComplete = ecndataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                        ecnChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                        //ecnChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                        foreach (CDDGEcn ecn in ecnChangeStatustoComplete)

                        {

                            ecndataaccess.Update(ecn);

                        }

                        var data = ecndataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                        data.ToList().ForEach(x => x.PepRequestStatusID = 1);

                        foreach (CDDGEcn ecn in data)

                        {

                            ecndataaccess.Update(ecn);

                        }

                    }


　

                    //lobpep

                    bool hasCRlobpep = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                    if (hasCRlobpep)

                    {

                        var lobpepChangeStatustoComplete = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                        lobpepChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                        // lobpepChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                        foreach (CDDGLobPep lob in lobpepChangeStatustoComplete)

                        {

                            lobpepdataaccess.Update(lob);

                        }

                        var lobpep = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                        lobpep.ToList().ForEach(x => x.PepRequestStatusID = 1);

                        foreach (CDDGLobPep lob in lobpep)

                        {

                            lobpepdataaccess.Update(lob);

                        }

                    }


　

　

                    //cddgattachment


                    //CDDGEcns.Any(x => x.Ecn.ToLower().Contains(searchDetails.ecn.ToLower())


                    bool hasCRattachment = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                    if (hasCRattachment)

                    {

                        //var attachmentChangeStatustoComplete = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                        //attachmentChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                        //// attachmentChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                        //foreach (CDDGAttachment att in attachmentChangeStatustoComplete)

                        //{

                        //    attachmentdataaccess.Update(att);

                        //}

                        var attachment = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                        attachment.ToList().ForEach(x => x.PepRequestStatusID = 1);

                        foreach (CDDGAttachment att in attachment)

                        {

                            attachmentdataaccess.Update(att);

                        }

                    }


　

　

                    //primary pep

                    bool hasCRprimarypep = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                    if (hasCRprimarypep)

                    {

                        var primarypepChangeStatustoComplete = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                        primarypepChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                        // primarypepChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                        foreach (CDDGPrimaryPep pri in primarypepChangeStatustoComplete)

                        {

                            primarypepdataaccess.Update(pri);

                        }

                        var primarypep = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                        primarypep.ToList().ForEach(x => x.PepRequestStatusID = 1);

                        foreach (CDDGPrimaryPep pri in primarypep)

                        {

                            primarypepdataaccess.Update(pri);

                        }

                    }


　

　

                    //request assignment

                    //bool hasCRreassignment = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                    //if (hasCRreassignment)

                    //{

                    //    var reqAssignmentChangeStatustoComplete = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    //    reqAssignmentChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    //    // reqAssignmentChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                    //    foreach (CDDGRequestAssignment req in reqAssignmentChangeStatustoComplete)

                    //    {

                    //        requestAssignmentDataAccess.Update(req);

                    //    }

                    //    var reqAssignment = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                    //    reqAssignment.ToList().ForEach(x => x.PepRequestStatusID = 1);

                    //    foreach (CDDGRequestAssignment req in reqAssignment)

                    //    {

                    //        requestAssignmentDataAccess.Update(req);

                    //    }

                    //}


                    return 1;

                }

            }


　

        }


        public int CancelPepRequest(int? pepId, string cancelcomments)

        {

            var pep = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepId);

            pep.PreviousPepRequestStatusid = pep.PepRequestStatusId;

            pep.PepRequestStatusId = 6;

            pep.PepCancellationComments = cancelcomments;

            var result = pepdetailsdataccess.Update(pep);

            return result;

        }


        public int RejectPEPDeterminationFormCR(PEPEntity pepdetailsforreject)

        {

            int? pepid = pepdetailsforreject.PepId;

            int crid = pepdetailsforreject.CRId;

            var pepDB = pepdetailsdataccess.FindSingleBy(x => x.PepId == pepid);

            if (pepDB.PepRequestStatusId == 6)

            {


                pepDB.PepRequestStatusId = pepDB.PreviousPepRequestStatusid;

                if (pepDB.PreviousPepRequestStatusid == 5)

                {


                    var reqassignmentDetail = requestAssignmentDataAccess.FindSingleBy(x => x.PepId == pepid && x.EndDate == null && x.CDDGChangeRequest == null);

                    var reqassignmentDetailUpdate = requestAssignmentDataAccess.FindSingleBy(x => x.PepId == pepid && x.EndDate == null && x.CDDGChangeRequest == null);


                    //var allrequestassignedbypepid = _pepservice.GetAllrequeststAssignmentbypepid(pepid);


　

                    UserEntity userEn = Mapper.Map<UserEntity>(userDetailsDataAccess.FindSingleBy(x => x.LanID.Equals(pepDB.CreatedBy)));


                    //var requestassignedpreviously = allrequestassignedbypepid.Where(x => x.UserId != userEn.UserID).FirstOrDefault();


                    //todo: where to check if the user is no more in system or inactive.


                    reqassignmentDetail.UserId = userEn.UserID;

                    reqassignmentDetail.ReassignedDate = DateTime.Now;


　

                    //reqassignmentDetail.UpdatedBy = (string)Session["userId"];

                    reqassignmentDetail.UpdatedTS = DateTime.Now;


                    //Add the request assignment table row.

                    var resultReqAssignment = requestAssignmentDataAccess.AddNew(reqassignmentDetail);

                    //_pepservice.AssignPepRequest(pepdetails); 


                    // Update the request assignment table row.

                    var rowToBeEndDated = requestAssignmentDataAccess.FindSingleBy(x => x.PepId == pepid && x.EndDate == null && x.UserId != userEn.UserID);

                    rowToBeEndDated.EndDate = DateTime.Now;

                    //rowToBeEndDated.UpdatedBy = (string)Session["userId"];

                    rowToBeEndDated.UpdatedTS = DateTime.Now;

                    int resultReq = requestAssignmentDataAccess.Update(rowToBeEndDated);

                }

                pepDB.PreviousPepRequestStatusid = null;

                pepDB.PepDeterminationComments = pepdetailsforreject.PepDeterminationComments;

                var result = pepdetailsdataccess.Update(pepDB);


                

                return result;

            }

            else {

                var pep = changeRequestDataAccess.GetAll().Where(x => x.PepId == pepid && x.EndDate == null && x.PepRequestStatusId == 2).ToList();


                var pepentity = pep.Where(x => x.ChangeRequestId == crid).FirstOrDefault();


                Mapper.CreateMap<CDDGChangeRequest, CDDGPep>();

                var cddgpep = Mapper.Map<CDDGPep>(pepentity);


                pepDB.PepDeterminationComments = pepdetailsforreject.PepDeterminationComments;

                pepdetailsdataccess.UpdatepepforRejectwithComments(pepDB);


                pepentity.EndDate = DateTime.Now;

                pepentity.PepRequestStatusId = 5;

                changeRequestDataAccess.Update(pepentity);


　

                if (pep.Count() == 1)

                {

                    pepDB.PepRequestStatusId = pepDB.PreviousPepRequestStatusid;

                    pepDB.PreviousPepRequestStatusid = null;

                    pepdetailsdataccess.UpdateCRforPEP(pepDB);


                }


　

                //ECN


                bool hasCRECN = ecndataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRECN)

                {

                    //var ecnChangeStatustoComplete = ecndataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    //ecnChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    //ecnChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 3);

                    //foreach (CDDGEcn ecn in ecnChangeStatustoComplete)

                    //{

                    //    ecndataaccess.Update(ecn);

                    //}

                    var data = ecndataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                    data.ToList().ForEach(x => x.PepRequestStatusID = 5);

                    foreach (CDDGEcn ecn in data)

                    {

                        ecndataaccess.Update(ecn);

                    }

                }


                //lobpep

                bool hasCRlobpep = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRlobpep)

                {

                    //var lobpepChangeStatustoComplete = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    //lobpepChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    //lobpepChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                    //foreach (CDDGLobPep lob in lobpepChangeStatustoComplete)

                    //{

                    //    lobpepdataaccess.Update(lob);

                    //}

                    var lobpep = lobpepdataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                    lobpep.ToList().ForEach(x => x.PepRequestStatusID = 5);

                    foreach (CDDGLobPep lob in lobpep)

                    {

                        lobpepdataaccess.Update(lob);

                    }

                }


　

　

                //cddgattachment


                //CDDGEcns.Any(x => x.Ecn.ToLower().Contains(searchDetails.ecn.ToLower())


                bool hasCRattachment = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRattachment)

                {

                    //var attachmentChangeStatustoComplete = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    //attachmentChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    //attachmentChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                    //foreach (CDDGAttachment att in attachmentChangeStatustoComplete)

                    //{

                    //    attachmentdataaccess.Update(att);

                    //}

                    var attachment = attachmentdataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                    attachment.ToList().ForEach(x => x.PepRequestStatusID = 5);

                    foreach (CDDGAttachment att in attachment)

                    {

                        attachmentdataaccess.Update(att);

                    }

                }


　

　

                //primary pep

                bool hasCRprimarypep = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                if (hasCRprimarypep)

                {

                    //var primarypepChangeStatustoComplete = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                    //primarypepChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                    //primarypepChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                    //foreach (CDDGPrimaryPep pri in primarypepChangeStatustoComplete)

                    //{

                    //    primarypepdataaccess.Update(pri);

                    //}

                    var primarypep = primarypepdataaccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                    primarypep.ToList().ForEach(x => x.PepRequestStatusID = 5);

                    foreach (CDDGPrimaryPep pri in primarypep)

                    {

                        primarypepdataaccess.Update(pri);

                    }

                }


　

　

                //request assignment

                //bool hasCRreassignment = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pepid).Any(x => x.PepRequestStatusID.Value == 2);

                //if (hasCRreassignment)

                //{

                //    //var reqAssignmentChangeStatustoComplete = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pepid && x.PepRequestStatusID == 1 && x.EndDate == null).ToList();

                //    //reqAssignmentChangeStatustoComplete.ForEach(x => x.EndDate = DateTime.Now);

                //    //reqAssignmentChangeStatustoComplete.ForEach(x => x.PepRequestStatusID = 4);

                //    //foreach (CDDGRequestAssignment req in reqAssignmentChangeStatustoComplete)

                //    //{

                //    //    requestAssignmentDataAccess.Update(req);

                //    //}

                //    var reqAssignment = requestAssignmentDataAccess.GetAll().Where(x => x.PepId == pepid && x.ChangeRequestID == pepentity.ChangeRequestId);

                //    reqAssignment.ToList().ForEach(x => x.PepRequestStatusID = 5);

                //    foreach (CDDGRequestAssignment req in reqAssignment)

                //    {

                //        requestAssignmentDataAccess.Update(req);

                //    }

                //}


                return 1;

            }

        }


        public IEnumerable<PepRequestAutoAssignmentEntity> GetCPTMembersTeamAssignments()

        {

            var result = requestAutoAssignmentDataAccess.GetAll().Where(x=>x.EndDate==null);

            Mapper.CreateMap<CDDGPepRequestAutoAssignment, PepRequestAutoAssignmentEntity>();

            

            //.ForMember(a => a.RoleName, b => b.MapFrom(c => c.CDDGUser.CDDGUserRoles.Where(x=>x.UserID== c.UserId).Select(x => x.CDDGRole.RoleName).FirstOrDefault().ToString()));


            var pepautoassignmententity = Mapper.Map<IEnumerable<CDDGPepRequestAutoAssignment>, IEnumerable<PepRequestAutoAssignmentEntity>>(result);

            pepautoassignmententity.ToList().ForEach(x => x.RoleName = "CPT- PEP Determination Team");

            pepautoassignmententity.ToList().ForEach(x =>

            {

                if (x.AutoAssignmentBlackOutStartDate != null)

                    x.AutoAssignmentBlackOutStartDate = x.AutoAssignmentBlackOutStartDate.Value.Date;

                if (x.AutoAssignmentBlackOutEndDate != null)

                    x.AutoAssignmentBlackOutEndDate = x.AutoAssignmentBlackOutEndDate.Value.Date;

            });

            return pepautoassignmententity;

        }


        public int updateCPTMembersTeamAssignments(PepRequestAutoAssignmentEntity entity)

        {

            if (entity.NolongerTeamMember)

            {

                var user = userDetailsDataAccess.FindSingleBy(x => x.UserID == entity.UserId);

                user.EndDate = DateTime.Now;

                userDetailsDataAccess.Update(user);

            }


            Mapper.CreateMap<PepRequestAutoAssignmentEntity, CDDGPepRequestAutoAssignment>();

            var a = Mapper.Map<CDDGPepRequestAutoAssignment>(entity);

            var result = requestAutoAssignmentDataAccess.Update(a);

            return result;

        }


        public IEnumerable<PEPChangeRequestEntity> GEtCrsforpepid(int? pepId)

        {

            var data = changeRequestDataAccess.GetAll().Where(x => x.PepId == pepId && x.EndDate == null);

            Mapper.CreateMap<CDDGChangeRequest, PEPChangeRequestEntity>();

            var result = Mapper.Map<IEnumerable<CDDGChangeRequest>, IEnumerable<PEPChangeRequestEntity>>(data);

            return result;

        }


        public PEPChangeRequestEntity GetCrDetailsbyCrid(int? changeRequestID)

        {

            var Crdetail= changeRequestDataAccess.FindSingleBy(x => x.ChangeRequestId == changeRequestID);

            Mapper.CreateMap<CDDGChangeRequest, PEPChangeRequestEntity>();

            var Cr = Mapper.Map<PEPChangeRequestEntity>(Crdetail);

            return Cr;

        }


        public PEPEntity GetSinglePep(int pepid)

        {

            var pep = pepdetailsdataccess.GetAllPepWithChildDetails().Where(x => x.PepId == pepid).FirstOrDefault();

            Mapper.CreateMap<CDDGPep, PEPEntity>();

            var pepentity = Mapper.Map<PEPEntity>(pep);

            return pepentity;


        }

    }

}

#endregion
        
