using System;
using System.Web;
using System.Web.Mvc;
using System.Configuration;
using WF.ERMT.Application.Entities;
using WF.ERMT.Application.Services.UserDetails;
using WF.ERMT.Application.Core.Logging.EntLibLogging.Logger;
using WF.ERMT.Application.Configurations.CommonConfig.Configurations;
using System.Collections.Generic;
using System.Linq;
using WF.ERMT.Application.Services.PEPDetails;
using Microsoft.Reporting.WebForms;
using System.Web.UI.WebControls;
using WF.ERMT.Application.Web.CustomFiltersAttributes;
using WF.ERMT.Application.Entities.CustomEntities;
using Autofac;
using CommonMasterData;
using AutoMapper;
using WF.ERMT.Application.Web.Utility;
using WF.ERMT.Application.Documentum;
using WF.ERMT.Application.Web.Models;
using Newtonsoft.Json;
using System.Transactions;
using System.IO;
//using WF.ERMT.Application.DataEntities.EntityFramework;
//using WF.ERMT.Application.Documentum;

namespace WF.ERMT.Application.Web.Controllers
{
    public class PEPDetailsController : Controller
    {
        //
        // GET: /PEPDetails/

        #region Initialization
        private readonly PEPDetails _pepservice;
        private readonly UserDetails _userservice;

        private readonly MasterData _masterdataservice;
        public PEPDetailsController(PEPDetails pepservice, MasterData masterdataservice, UserDetails userservice)
        {
            this._pepservice = pepservice;
            this._masterdataservice = masterdataservice;
            this._userservice = userservice;
        }
        #endregion

        #region Action Methods for LOB Users
        [CustomActionLoggingFilter]
        public ActionResult PEPDeterminationForm()
        {
            //var item = _pepservice.GetAllPEPDetails();
            //int currentpepID= item.Select(i => i.T_PEPID).LastOrDefault();
            PEPEntity customEntity = new PEPEntity();

            // ViewBag.PepTypesList = MasterDataUtilities.GetPepTypeList(_masterdataservice, false, true);
            //customEntity.T_PEPID = currentpepID + 1;
            customEntity.searchFlag = "none";
            InitializePepDetails(customEntity);
            return View(customEntity);
        }

        private void InitializePepDetails(PEPEntity customEntity)
        {

            customEntity.RequestorFirstName = ((UserEntity)Session["UserDetails"]).FirstName;
            customEntity.RequestorLastName = ((UserEntity)Session["UserDetails"]).LastName;
            customEntity.RequestorEmail = ((UserEntity)Session["UserDetails"]).Email;
            customEntity.RequestorAU = ((UserEntity)Session["UserDetails"]).AU;
            if (customEntity.PepId == null)
                customEntity.InitialRequestDate = DateTime.Now;
            GetMasterDataListForPepDetermination();

            if (customEntity.LOB == null)
            {
                customEntity.LOB = new List<string>();
                customEntity.LOB.Add("");
            }

            if (customEntity.MajorLOB == null)
            {
                customEntity.MajorLOB = new List<string>();
                customEntity.MajorLOB.Add("");
            }

            if (customEntity.PrimaryPepLastName == null)
            {
                customEntity.PrimaryPepLastName = new List<string>();
                customEntity.PrimaryPepLastName.Add("");
            }
            if (customEntity.PrimaryPepLastName2 == null)
            {
                customEntity.PrimaryPepLastName2 = new List<string>();
                customEntity.PrimaryPepLastName2.Add("");
            }
            if (customEntity.PrimaryPepMiddleName == null)
            {
                customEntity.PrimaryPepMiddleName = new List<string>();
                customEntity.PrimaryPepMiddleName.Add("");
            }
            if (customEntity.PrimaryPepFirstName == null)
            {
                customEntity.PrimaryPepFirstName = new List<string>();
                customEntity.PrimaryPepFirstName.Add("");
            }
            if (customEntity.PrimaryPepAKAName == null)
            {
                customEntity.PrimaryPepAKAName = new List<string>();
                customEntity.PrimaryPepAKAName.Add("");
            }

            if (customEntity.PrimaryPepPositionOpenField == null)
            {
                customEntity.PrimaryPepPositionOpenField = new List<string>();
                customEntity.PrimaryPepPositionOpenField.Add("");
            }

            if (customEntity.PrimaryPepPosition == null)
            {
                customEntity.PrimaryPepPosition = new List<string>();
                customEntity.PrimaryPepPosition.Add("");
            }

            if (customEntity.PrimaryPepAssociation == null)
            {
                customEntity.PrimaryPepAssociation = new List<string>();
                customEntity.PrimaryPepAssociation.Add("");
            }

            if (customEntity.PepAssociatedCountry == null)
            {
                customEntity.PepAssociatedCountry = new List<string>();
                customEntity.PepAssociatedCountry.Add("");
            }

            if (customEntity.PrimaryPepCountry == null)
            {
                customEntity.PrimaryPepCountry = new List<string>();
                customEntity.PrimaryPepCountry.Add("");
            }

            if (customEntity.PrimaryPepBSAApproval == null)
            {
                customEntity.PrimaryPepBSAApproval = new List<string>();
                customEntity.PrimaryPepBSAApproval.Add("");
            }

            if (customEntity.PrimaryPepCountryRiskDesignation == null)
            {
                customEntity.PrimaryPepCountryRiskDesignation = new List<string>();
                customEntity.PrimaryPepCountryRiskDesignation.Add("");
            }

            if (customEntity.PrimaryPepCountryLobDate == null)
            {
                customEntity.PrimaryPepCountryLobDate = new List<string>();
                customEntity.PrimaryPepCountryLobDate.Add("");
            }

            if (customEntity.PrimarypepCountryLOBCSV == null)
            {
                customEntity.PrimarypepCountryLOBCSV = new List<string>();
                customEntity.PrimarypepCountryLOBCSV.Add("");
            }

            if ((customEntity.PrimarypepCountryLOB == null) || (customEntity.PrimarypepCountryLOB.Count == 0))
            {
                List<string> g = new List<string>();
                g.Add("");
                customEntity.PrimarypepCountryLOB = new List<List<string>>();
                customEntity.PrimarypepCountryLOB.Add(g);
            }

　
　
            if (customEntity.PrimaryPepAssociatedCountryBSAApproval == null)
            {
                customEntity.PrimaryPepAssociatedCountryBSAApproval = new List<string>();
                customEntity.PrimaryPepAssociatedCountryBSAApproval.Add("");
            }

            if (customEntity.PrimaryPepAssociatedCountryRiskDesignation == null)
            {
                customEntity.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                customEntity.PrimaryPepAssociatedCountryRiskDesignation.Add("");
            }

            //if (customEntity.PrimaryPepAssociatedCountryLobDate == null)
            //{
            //    customEntity.PrimaryPepAssociatedCountryLobDate = new List<string>();
            //    customEntity.PrimaryPepAssociatedCountryLobDate.Add("");
            //}

            if (customEntity.PrimarypepAssociatedCountryLOBCSV == null)
            {
                customEntity.PrimarypepAssociatedCountryLOBCSV = new List<string>();
                customEntity.PrimarypepAssociatedCountryLOBCSV.Add("");
            }

            if ((customEntity.PrimarypepAssociatedCountryLOB == null) || (customEntity.PrimarypepAssociatedCountryLOB.Count == 0))
            {
                List<string> g = new List<string>();
                g.Add("");
                customEntity.PrimarypepAssociatedCountryLOB = new List<List<string>>();
                customEntity.PrimarypepAssociatedCountryLOB.Add(g);
            }

            if (customEntity.ECN == null)
            {
                customEntity.ECN = new List<string>();
                customEntity.ECN.Add("");
            }

            if (customEntity.Flagged == null)
            {
                customEntity.Flagged = new List<string>();
                customEntity.Flagged.Add("");
            }

            if (customEntity.DateFlagged == null)
            {
                customEntity.DateFlagged = new List<string>();
                customEntity.DateFlagged.Add("");
            }

            if (customEntity.PrimaryPepId == null)
            {
                customEntity.PrimaryPepId = new List<int>();
                customEntity.PrimaryPepId.Add(0);
            }

        }

        private void GetMasterDataListForPepDetermination()
        {
            ViewData["Quarters"] = MasterDataUtilities.GetQuarterList(_masterdataservice, false, true);
            ViewData["Lobs"] = MasterDataUtilities.GetLobList(_masterdataservice, false, true);
            ViewData["Countries"] = MasterDataUtilities.GetCountryList(_masterdataservice, false, true);
            ViewData["Determinations"] = MasterDataUtilities.GetDeterminationList(_masterdataservice, false, true);
            ViewData["PepTypes"] = MasterDataUtilities.GetPepTypeList(_masterdataservice, false, true);
            ViewData["PepLevels"] = MasterDataUtilities.GetPepLevelList(_masterdataservice, false, true);
            ViewData["PepFlagStatusHogan"] = MasterDataUtilities.GetAllPepFlagsHoganList(_masterdataservice, false, true);
            ViewData["PrimaryPepPositions"] = MasterDataUtilities.GetAllPrimaryPepPositionsList(_masterdataservice, false, true);
            ViewData["PrimaryPepAssociations"] = MasterDataUtilities.GetAllPrimaryPepAssociationsList(_masterdataservice, false, false);
            ViewData["PepRequestStatus"] = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);
            ViewData["CountryRiskDesignations"] = MasterDataUtilities.GetCountryRiskDesignations(_masterdataservice, false, true);
            ViewData["BSAApprovals"] = MasterDataUtilities.GetBSAApproval(_masterdataservice, false, true);
            ViewData["PepRequestStatus"] = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);
            ViewData["YesNo"] = MasterDataUtilities.GetYesNoList(true);
            //ViewData["YesNoWithoutEmpty"] = MasterDataUtilities.GetYesNoList();
            ViewData["CustomerType"] = new List<string> { "Entity", "Individual" };
            ViewData["CustomerStatus"] = MasterDataUtilities.GetCustomerStatusList(_masterdataservice, false);
            ViewData["BookingOffices"] = MasterDataUtilities.GetBookingOfficeList(_masterdataservice, false, true);
            ViewData["WFBranches"] = MasterDataUtilities.GetWFBranchesList(_masterdataservice, false, true);
            ViewData["ServiceRequestTypes"] = MasterDataUtilities.GetServiceRequestTypeList(_masterdataservice, false, true);
            ViewData["ReasonsNotPep"] = MasterDataUtilities.GetReasonsNotPepList(_masterdataservice, false, true);
            ViewData["LobMulti"] = MasterDataUtilities.GetLobList(_masterdataservice, false);
            //ViewData["LobPrimaryPep"] = MasterDataUtilities.GetLobList(_masterdataservice, false, true);

        }
        [CustomActionLoggingFilter]
        public ActionResult GetPEPDeterminationForm(int pepid)
        {
            GetMasterDataListForPepDetermination();
            var item = _pepservice.GetSinglePEPbyid(pepid);
            item.searchFlag = "none";
            item.success = false;
            return View("PEPDeterminationForm", item);

        }

        public ActionResult GetPEPDeterminationFormCR(int pepid, int crid)
        {
            GetMasterDataListForPepDetermination();
            if (crid == 0)
            {
                return RedirectToAction("GetPEPDeterminationForm", new { pepid = pepid });
            }
            else {
                var item = _pepservice.GetSinglePEPbyidforCR(pepid, crid);
                item.success = false;
                item.searchFlag = "";
                item.CRId = crid;
                item.changedprops = JsonConvert.SerializeObject(item.changedpropertiesforCR);
                return View("GetPEPDeterminationCRFormForCPT", item);
            }

        }

        [CustomActionLoggingFilter]
        public ActionResult PEPDeterminationSearchForm(string typeofSearch)
        {

            //var item = _pepservice.GetAllPEPFormsCreatedByLOBUser("u279376").OrderByDescending(i=>i.CreatedDate);
            ViewBag.isSearch = false;
            ViewBag.isValidationError = false;
            //ViewBag.typeofSearch = typeofSearch;
            // return View(item);
            SearchDetailsViewModel searchDetails = new SearchDetailsViewModel();
            searchDetails.SearchCriteria = new SearchPEPEntity();
            searchDetails.SearchCriteria.typeofSearch = typeofSearch;
            searchDetails.SearchResult = new DisplayPepInformationListViewModel();
            searchDetails.SearchResult.PepList = new List<DisplayListViewModel>();
            return View(searchDetails);

        }

        [HttpPost]
        [CustomActionLoggingFilter]
        public ActionResult PEPDeterminationSearchFormDetails(SearchPEPEntity searchCriteria)
        {
            string typeOfSearch = searchCriteria.typeofSearch;
            var userId = (string)Session["userId"];
            searchCriteria.userid = userId;
            if (searchCriteria.pepid != 0 || !string.IsNullOrWhiteSpace(searchCriteria.wcis) || !string.IsNullOrWhiteSpace(searchCriteria.ecn) || !string.IsNullOrWhiteSpace(searchCriteria.entity) || !string.IsNullOrWhiteSpace(searchCriteria.customername) || !string.IsNullOrWhiteSpace(searchCriteria.primarypep))
            {
                var item = _pepservice.GetPEPSearchDetails(searchCriteria);

                if (item.SearchResult.PepList.Count() > 0)
                {
                    if (searchCriteria.filter == "ExactMatch")
                    {
                        if (item.SearchResult.PepList.Count() == 1)
                        {
                            int pepid = item.SearchResult.PepList.Select(i => i.PepId).FirstOrDefault();
                            return RedirectToAction("GetPEPDeterminationForm", new { pepid = pepid });
                        }

                    }
                    ViewBag.isSearch = true;
                    ViewBag.isValidationError = false;
                    item.SearchCriteria = searchCriteria;
                    return View("PEPDeterminationSearchForm", item);
                }

                else
                {
                    ViewBag.isSearch = true;
                    ViewBag.isValidationError = false;
                    SearchDetailsViewModel searchDetails = new SearchDetailsViewModel();
                    searchDetails.SearchCriteria = searchCriteria;
                    searchDetails.SearchResult = new DisplayPepInformationListViewModel();
                    searchDetails.SearchResult.PepList = new List<DisplayListViewModel>();
                    ModelState.AddModelError("Error", "No Search Results found.");
                    return View("PEPDeterminationSearchForm", searchDetails);
                }
            }
            else
            {
                ViewBag.isValidationError = true;
                ViewBag.isSearch = false;
                SearchDetailsViewModel searchDetails = new SearchDetailsViewModel();
                searchDetails.SearchCriteria = searchCriteria;
                searchDetails.SearchResult = new DisplayPepInformationListViewModel();
                searchDetails.SearchResult.PepList = new List<DisplayListViewModel>();
                ModelState.AddModelError("ValidationError", "Please enter a value in any field");
                return View("PEPDeterminationSearchForm", searchDetails);
            }

　
        }

        private string SaveUploadedFileToStore(HttpPostedFileBase file)
        {
            if (file != null)
            {

　
                //string pepAttachmentFolderPath = ConfigurationManager.AppSettings["PepAttachmentFolderPath"];
                //string saveFileName = Guid.NewGuid().ToString() + "_" + System.IO.Path.GetFileName(file.FileName);
                //string targetpath = System.IO.Path.Combine(pepAttachmentFolderPath, saveFileName);
                //file.SaveAs(targetpath);
                //return saveFileName;

                DMSDoc objDms = new DMSDoc();
                DMSParams dmsParams = new DMSParams();
                dmsParams.DMS_URL = "http://dfs-uat.wellsfargo.com/axis2/services/DasStoreContentService_V1X0?wsdl";
                dmsParams.DMS_SenderID = ConfigurationManager.AppSettings["DMS_SenderID"];
                dmsParams.DMS_SenderPassword = ConfigurationManager.AppSettings["DMS_Pwd"];
                dmsParams.DMS_DestinationSystem = ConfigurationManager.AppSettings["DMS_DestinationSystem"];
                dmsParams.DMS_OriginationSystem = ConfigurationManager.AppSettings["DMS_OriginationSystem"];
                //string pepAttachmentFolderPath = ConfigurationManager.AppSettings["PepAttachmentFolderPath"];
                // string saveFileName = System.IO.Path.GetFileName(file.FileName);
                //string targetpath = System.IO.Path.Combine(pepAttachmentFolderPath, saveFileName);
                BinaryReader b = new BinaryReader(file.InputStream);
                //byte[] bytes = System.IO.File.ReadAllBytes(file.FileName); 
                byte[] bytes = b.ReadBytes(file.ContentLength);

                //byte[] bytes = System.IO.File.ReadAllBytes(file.FileName);
                dmsParams.DMS_ActiveMonths = ConfigurationManager.AppSettings["DMS_ActiveMonths"];
                dmsParams.DMS_Docbase = ConfigurationManager.AppSettings["DMS_Docbase"];
                dmsParams.ChronicleId = ConfigurationManager.AppSettings["ChronicleId"];
                dmsParams.DMS_RecClassCode = ConfigurationManager.AppSettings["DMS_RecClassCode"];
                dmsParams.DMS_InValidExtensions = ConfigurationManager.AppSettings["DMS_InValidExtensions"];

                objDms = DMSCall.CheckInDoc("PEP", file.FileName, bytes, "1PIT", dmsParams);
                return objDms.DocUrl;

　
            }
            return null;
        }

        [CustomActionLoggingFilter]
        public ActionResult CreatePepDeterminationFormCR(PEPEntity pepdetails)
        {
            if (pepdetails.PrimarypepCountryLOB != null)
            {
                ModelState["PrimarypepCountryLOB"].Errors.Clear();
            }

            if (pepdetails.PrimarypepAssociatedCountryLOB != null)
            {
                ModelState["PrimarypepAssociatedCountryLOB"].Errors.Clear();
            }

            if (pepdetails.EntityFormationCountryLOB != null)
            {
                ModelState["EntityFormationCountryLOB"].Errors.Clear();
            }

            if (pepdetails.CountryofcitizenshipLOB != null)
            {
                ModelState["CountryofcitizenshipLOB"].Errors.Clear();
            }

            GetMasterDataListForPepDetermination();
            foreach (string csv in pepdetails.PrimarypepCountryLOBCSV)
            {
                if (pepdetails.PrimarypepCountryLOB != null)
                    pepdetails.PrimarypepCountryLOB.Add(csv.Split(',').ToList());
            }

            foreach (string csv in pepdetails.PrimarypepAssociatedCountryLOBCSV)
            {
                if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                    pepdetails.PrimarypepAssociatedCountryLOB.Add(csv.Split(',').ToList());
            }

　
　
            if (pepdetails.ECN != null)
            {
                int counter = 0;
                foreach (var ecn in pepdetails.ECN)
                {
                    if ((pepdetails.Flagged[counter] == "Y") && (string.IsNullOrWhiteSpace(pepdetails.DateFlagged[counter])))
                    {
                        ModelState.AddModelError("Flagged", "Please provide flagged date");

                    }
                    counter++;

                }
            }

　
　
            //if (pepdetails.AdditionalEcn != null)
            //{
            //    foreach (var addecn in pepdetails.AdditionalEcn)
            //    {
            //        if (pepdetails.ECNID1 == addecn)
            //        { 
            //            ModelState.AddModelError("ECNID1", "Same ECN has been added as a seconday ECN. Please change either.");
            //            continue;
            //        }
            //    }
            //}

            //if (pepdetails.ECN[0] == "")
            //{
            //    ModelState.AddModelError("ECN" + 0.ToString(), "Enter Ecn");
            //}

            HashSet<string> setEcn = new HashSet<string>();
            //int e = -1;
            for (int j = 0; j < pepdetails.ECN.Count; j++)
            {
                var regexvalidator = new RegexStringValidator("^[0-9]{0,255}$");
                try
                {
                    regexvalidator.Validate(pepdetails.ECN[j]);
                    //check for duplicate ECNs
                    if (!string.IsNullOrWhiteSpace(pepdetails.ECN[j]))
                    {
                        if (setEcn.Contains(pepdetails.ECN[j]))
                        {
                            ModelState.AddModelError("ECN" + j.ToString(), "ECN can not be duplicate");
                        }
                        else
                        {
                            setEcn.Add(pepdetails.ECN[j]);
                        }
                    }
                }
                catch
                {
                    ModelState.AddModelError("ECN" + j.ToString(), "ECN must be numeric");
                }
            }

            if ((pepdetails.LOB.Count == 1) && (pepdetails.LOB[0] == "-1"))
            {
                ModelState.AddModelError("LOB", "Atleast one LOB is required");
            }

            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
            {
                if (pepdetails.PrimaryPepFirstName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepFirstName" + i.ToString(), "Enter First Name");
                }
                if (pepdetails.PrimaryPepLastName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepLastName" + i.ToString(), "Enter Last Name");
                }
                if (pepdetails.PrimaryPepAKAName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAKAName" + i.ToString(), "Enter AKA Name");
                }
                if (pepdetails.PrimaryPepPosition[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepPosition" + i.ToString(), "Select position");
                }
                if ((pepdetails.PrimaryPepPosition[i] == "4") && (pepdetails.PrimaryPepPositionOpenField[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepPositionOpenField" + i.ToString(), "Enter the position");
                }

                if (pepdetails.PrimaryPepAssociation[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAssociation" + i.ToString(), "Select association");
                }
                if (pepdetails.PepAssociatedCountry[i] == "-1")
                {
                    ModelState.AddModelError("PepAssociatedCountry" + i.ToString(), "Select associated country");
                }
                if (pepdetails.PrimaryPepCountry[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepCountry" + i.ToString(), "Select country");
                }

                if ((pepdetails.PrimaryPepCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimarypepCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepCountryLOB" + i.ToString(), "Select LOB");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimaryPepCountryLobDate[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepCountryLobDate" + i.ToString(), "Select Date");
                }

　
　
                if ((pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepAssociatedCountryBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "1") && (pepdetails.PrimarypepAssociatedCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepAssociatedCountryLOB" + i.ToString(), "Select LOB");
                }
            }

            if (pepdetails.WFBranchId == -1)
            {
                ModelState.AddModelError("WFBranchId", "Select Branch");
            }

            if (pepdetails.ServiceRequestTypeId == -1)
            {
                ModelState.AddModelError("ServiceRequestTypeId", "Select Request Type");
            }

            if (pepdetails.BookingOfficeId == -1)
            {
                ModelState.AddModelError("BookingOfficeId", "Select Booking office");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.PEPEntityName == null))
            {
                ModelState.AddModelError("PEPEntityName", "Enter Entity name");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountry == "-1"))
            {
                ModelState.AddModelError("EntityFormationCountry", "Select Entity formation country");
            }

　
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualFirstName == null))
            {
                ModelState.AddModelError("IndividualFirstName", "Enter First name");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualLastName == null))
            {
                ModelState.AddModelError("IndividualLastName", "Enter Last name");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualAKAName == null))
            {
                ModelState.AddModelError("IndividualAKAName", "Enter AKA name ");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipId == -1))
            {
                ModelState.AddModelError("CountryofcitizenshipId", "Select Country of citizenship");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipBSAApproval == "-1") && (pepdetails.CountryofcitizenshipRiskDesignation == "High"))
            {
                ModelState.AddModelError("CountryofcitizenshipBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipLOB == null) && (pepdetails.CountryofcitizenshipBSAApproval == "1"))
            {
                ModelState.AddModelError("CountryofcitizenshipLOB", "Select LOB");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryBSAApproval == "-1") && (pepdetails.EntityFormationCountryRiskDesignation == "High"))
            {
                ModelState.AddModelError("EntityFormationCountryBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryLOB == null) && (pepdetails.EntityFormationCountryBSAApproval == "1"))
            {
                ModelState.AddModelError("EntityFormationCountryLOB", "Select LOB");
            }

            if (ModelState.IsValid)
            {
                TransactionOptions TransOpt = new TransactionOptions();
                TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;

                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
                {
                    var statusList = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);
                    PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "CR").FirstOrDefault();
                    if (pepdetails.PreviousPepRequestStatusid == null)
                    {
                        pepdetails.PreviousPepRequestStatusid = pepdetails.PepRequestStatusId;
                    }

                    pepdetails.CreatedBy = (string)Session["userId"];
                    pepdetails.CreatedTS = DateTime.Now;

                    if (pepdetails.PepLevelId == -1)
                        pepdetails.PepLevelId = null;
                    if (pepdetails.ReasonNotPepId == -1)
                        pepdetails.ReasonNotPepId = null;

                    try
                    {
                        int ecnCounter = 1;

                        CustomerEntity cust = new CustomerEntity();
                        cust.CustomerName = pepdetails.Customer_Name;
                        cust.CustomerStatus = Int32.Parse(pepdetails.CustomerStatusId);
                        cust.CreatedBy = (string)Session["userId"];
                        cust.CreatedTS = DateTime.Now;

                        List<CustomerEntity> customerwithBSAApprovalCountry = new List<CustomerEntity>();

                        if (pepdetails.CustomerType == "Entity")
                        {
                            cust.IsEntity = true;
                            cust.EntityName = pepdetails.PEPEntityName;
                            cust.EntityFormationCountry = Int32.Parse(pepdetails.EntityFormationCountry);

　
                            if (pepdetails.EntityFormationCountryRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.EntityFormationCountryBSAApproval) && (pepdetails.EntityFormationCountryBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.EntityFormationCountryBSAApproval);

                            }

　
                        }
                        else
                        {
                            cust.IsEntity = false;
                            cust.IndividualFirstName = pepdetails.IndividualFirstName;
                            cust.IndividualLastName = pepdetails.IndividualLastName;
                            cust.IndividualLastName2 = pepdetails.IndividualLastName2;
                            cust.IndividualMiddleName = pepdetails.IndividualMiddleName;
                            cust.IndividualAKAName = pepdetails.IndividualAKAName;
                            cust.IndividualDoB = pepdetails.DateofBirth;
                            cust.IndividualCitizenshipCountry = pepdetails.CountryofcitizenshipId;

                            if (pepdetails.CountryofcitizenshipRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.CountryofcitizenshipBSAApproval) && (pepdetails.CountryofcitizenshipBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.CountryofcitizenshipBSAApproval);

                            }

                        }

　
                        cust = _pepservice.AddNewCustomer(cust);
                        pepdetails.CustomerId = cust.CustomerID;

                        if (cust.CountryBSAApprovalId == 1)
                            customerwithBSAApprovalCountry.Add(cust);

　
                        if ((pepdetails.EntityFormationCountryLOB != null) && (pepdetails.CustomerType == "Entity"))
                        {
                            int p = 0;
                            foreach (var addlob in pepdetails.EntityFormationCountryLOB)
                            {
                                if (addlob == "-1")
                                {
                                    //p--;
                                    continue;
                                }
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);
                            }
                            p++;
                        }

                        else if ((pepdetails.CountryofcitizenshipLOB != null) && (pepdetails.CustomerType == "Individual"))
                        {
                            int p = 0;
                            foreach (var addlob in pepdetails.CountryofcitizenshipLOB)
                            {
                                if (addlob == "-1")
                                {
                                    //p--;
                                    continue;
                                }
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);

                            }
                            p++;
                        }

　
                        if (pepdetails.PepTypeId == -1)
                        {
                            pepdetails.PepTypeId = null;
                        }

　
                        pepdetails.PepRequestStatusId = statusEntity.PEPRequestStatusID;
                        pepdetails.PepRequestStatus = "CR";
                        var crs = _pepservice.GEtCrsforpepid(pepdetails.PepId);
                        if (crs.Count() == 0)
                        {
                            pepdetails.CrNo = 1;

                        }
                        else {
                            pepdetails.CrNo = (crs.ToList().Last().CrNo + 1);
                        }
                        var pepCR = _pepservice.AddNewChangeRequest(pepdetails);

                        //var pepprevious = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                        //if (pepprevious.PreviousPepRequestStatusid == null)
                        // {
                        //pepdetails.PreviousPepRequestStatusid = pepprevious.PepRequestStatusId;

                        //}

　
                        var result = _pepservice.UpdateCRforPEP(pepdetails);

                        pepdetails.CRId = pepCR.ChangeRequestId;
                        _pepservice.AssignPepRequest(pepdetails);

　
                        for (int i = 0; i < pepdetails.ECN.Count; i++)
                        {

                            EcnEntity ecna = new EcnEntity();
                            ecna.PEPID = pepdetails.PepId;
                            ecna.ECN = pepdetails.ECN[i];
                            if (pepdetails.Flagged[i] == "Y")
                            {
                                ecna.IsFlagged = true;
                                ecna.DateFlagged = Convert.ToDateTime(pepdetails.DateFlagged[i]);
                            }
                            if (pepdetails.Flagged[i] == "N")
                            {
                                ecna.IsFlagged = false;
                            }
                            ecna.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                            ecna.EcnSeqVal = ecnCounter.ToString();
                            ecna.EcnSeqValNum = ecnCounter.ToString();
                            ecna.CreatedBy = (string)Session["userId"];
                            ecna.CreatedTS = DateTime.Now;
                            ecna.ChangeRequestID = pepCR.ChangeRequestId;

                            ecna = _pepservice.AddNewEcn(ecna);
                            ecnCounter++;
                        }

　
                        //Add new Lob
                        if (pepdetails.LOB != null)
                        {
                            foreach (var addlob in pepdetails.LOB)
                            {
                                if (addlob == "-1")
                                    continue;
                                LobPepEntity lobpep = new LobPepEntity();
                                lobpep.PepId = pepdetails.PepId;
                                lobpep.LobId = Int32.Parse(addlob);
                                /*lobpep.Lobflag = 1;*/// 1 for LOB normal
                                lobpep.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                                lobpep.ChangeRequestID = pepCR.ChangeRequestId;
                                lobpep.CreatedBy = (string)Session["userId"];
                                lobpep.CreatedTS = DateTime.Now;
                                lobpep = _pepservice.AddNewLobPep(lobpep);
                            }
                        }

　
                        List<PrimaryPepEntity> lppe = new List<PrimaryPepEntity>();
                        List<PrimaryPepEntity> lppe1 = new List<PrimaryPepEntity>();

                        // Add new Primary Pep
                        if (pepdetails.PrimaryPepFirstName != null)
                        {
                            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
                            {
                                PrimaryPepEntity primarypep = new PrimaryPepEntity();
                                primarypep.PepId = pepdetails.PepId;
                                primarypep.FirstName = pepdetails.PrimaryPepFirstName[i];
                                primarypep.LastName = pepdetails.PrimaryPepLastName[i];
                                primarypep.MiddleName = pepdetails.PrimaryPepMiddleName[i];
                                primarypep.LastName2 = pepdetails.PrimaryPepLastName2[i];
                                primarypep.AKAName = pepdetails.PrimaryPepAKAName[i];

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociation[i]) && (pepdetails.PrimaryPepAssociation[i] != "-1"))
                                    primarypep.PrimaryPepAssociationId = Int32.Parse(pepdetails.PrimaryPepAssociation[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PepAssociatedCountry[i]) && (pepdetails.PepAssociatedCountry[i] != "-1"))
                                    primarypep.PrimaryPepAssociatedCountryId = Int32.Parse(pepdetails.PepAssociatedCountry[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepPosition[i]) && (pepdetails.PrimaryPepPosition[i] != "-1"))
                                    primarypep.PrimaryPepPositionId = Int32.Parse(pepdetails.PrimaryPepPosition[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepCountry[i]) && (pepdetails.PrimaryPepCountry[i] != "-1"))
                                    primarypep.PrimaryPepCountryId = Int32.Parse(pepdetails.PrimaryPepCountry[i]);

                                if (pepdetails.PrimaryPepCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                        primarypep.CountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepBSAApproval[i]);
                                    if (primarypep.CountryBSAApprovalId == 1)
                                    {
                                        if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                            if (pepdetails.PrimaryPepCountryLobDate != null)
                                            {
                                                primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                            }
                                        primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                    }
                                }

　
                                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))
                                        primarypep.AssociatedCountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]);
                                    //if (primarypep.AssociatedCountryBSAApprovalId == 1)
                                    //{
                                    //    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))
                                    //        if (pepdetails.PrimaryPepAssociatedCountryLobDate != null)
                                    //        {
                                    //            primarypep.AssociatedCountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepAssociatedCountryLobDate[i]);
                                    //        }
                                    //    primarypep.AssociatedCountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepAssociatedCountryLobDate[i]);
                                    //}
                                }

　
　
　
　
                                primarypep.CreatedBy = (string)Session["userId"];
                                primarypep.CreatedTS = DateTime.Now;
                                primarypep.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                                primarypep.ChangeRequestID = pepCR.ChangeRequestId;
                                primarypep.PreviousPrimaryPepId = pepdetails.PrimaryPepId[i];
                                primarypep = _pepservice.AddNewPrimaryPep(primarypep);
                                if (primarypep.CountryBSAApprovalId == 1)
                                    lppe.Add(primarypep);
                                if (primarypep.AssociatedCountryBSAApprovalId == 1)
                                    lppe1.Add(primarypep);

                            }
                        }

　
                        if (pepdetails.PrimarypepCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepCountryLobEntity primarypeplob = new PrimaryPepCountryLobEntity();
                                    primarypeplob.PrimaryPepId = lppe[p].PrimaryPepId;
                                    primarypeplob.LobId = Int32.Parse(addlob);
                                    primarypeplob.CreatedBy = (string)Session["userId"];
                                    primarypeplob.CreatedTS = DateTime.Now;
                                    primarypeplob = _pepservice.AddNewPrimaryPepLob(primarypeplob);
                                    hasAnyValidLOB = true;
                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

                        if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepAssociatedCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob = new PrimaryPepAssociatedCountryLobEntity();
                                    primarypepassociatedcountrylob.PrimaryPepId = lppe1[p].PrimaryPepId;
                                    primarypepassociatedcountrylob.LobId = Int32.Parse(addlob);
                                    primarypepassociatedcountrylob.CreatedBy = (string)Session["userId"];
                                    primarypepassociatedcountrylob.CreatedTS = DateTime.Now;
                                    primarypepassociatedcountrylob = _pepservice.AddNewPrimaryPepAssociatedCountryLob(primarypepassociatedcountrylob);
                                    hasAnyValidLOB = true;
                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
                        //Add Uploaded Attachment
                        if (pepdetails.UploadedFile != null)
                        {
                            var storagePath = SaveUploadedFileToStore(pepdetails.UploadedFile);

                            AttachmentEntity attachment = new AttachmentEntity();
                            attachment.FileStoragePath = storagePath;
                            attachment.FileName = System.IO.Path.GetFileName(pepdetails.UploadedFile.FileName);

                            attachment.PepId = pepdetails.PepId;
                            attachment.CreatedBy = (string)Session["userId"];
                            attachment.CreatedTS = DateTime.Now;
                            attachment.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                            attachment.ChangeRequestID = pepCR.ChangeRequestId;
                            attachment = _pepservice.AddNewAttachment(attachment);

                            pepdetails.Attachment = attachment;
                        }

　
                        trans.Complete();
                        pepdetails.success = true;
                        pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Success", "CR submitted successfully!");
                        return View("PEPDeterminationForm", pepdetails);
                    }
                    catch (Exception ex)
                    {
                        trans.Dispose();
                        pepdetails.success = false;
                        pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Failure", "CR could not be created!");
                        pepdetails.PEPRequestStatu = _pepservice.GetAllPEPDetails().Where(i => i.PepId == pepdetails.PepId).Select(i => i.PEPRequestStatu).FirstOrDefault();
                        pepdetails.PepRequestStatus = pepdetails.PEPRequestStatu.StatusName;

                        if (pepdetails.LOB == null)
                        {
                            pepdetails.LOB = new List<string>();
                            pepdetails.LOB.Add("");
                        }

                        if (pepdetails.MajorLOB == null)
                        {
                            pepdetails.MajorLOB = new List<string>();
                            pepdetails.MajorLOB.Add("");
                        }
                        if (pepdetails.PrimaryPepCountry == null)
                        {
                            pepdetails.PrimaryPepCountry = new List<string>();
                            pepdetails.PrimaryPepCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                        }

                        if (pepdetails.PepAssociatedCountry == null)
                        {
                            pepdetails.PepAssociatedCountry = new List<string>();
                            pepdetails.PepAssociatedCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                        }
                        return View("PEPDeterminationForm", pepdetails);
                    }
                }
            }
            else {
                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");
                if (pepdetails.PepId == null)
                    pepdetails.InitialRequestDate = DateTime.Now;
                pepdetails.success = false;
                pepdetails.searchFlag = "none";
                if (pepdetails.LOB == null)
                {
                    pepdetails.LOB = new List<string>();
                    pepdetails.LOB.Add("");
                }

                if (pepdetails.MajorLOB == null)
                {
                    pepdetails.MajorLOB = new List<string>();
                    pepdetails.MajorLOB.Add("");
                }
                if (pepdetails.PrimaryPepCountry == null)
                {
                    pepdetails.PrimaryPepCountry = new List<string>();
                    pepdetails.PrimaryPepCountry.Add("");
                }
                if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                }

                if (pepdetails.PepAssociatedCountry == null)
                {
                    pepdetails.PepAssociatedCountry = new List<string>();
                    pepdetails.PepAssociatedCountry.Add("");
                }
                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                }

                return View("PEPDeterminationForm", pepdetails);
            }

        }

        [CustomActionLoggingFilter]
        public ActionResult SavePEPDeterminationForm(PEPEntity pepdetails)
        {
            if (pepdetails.PrimarypepCountryLOB != null)
            {
                ModelState["PrimarypepCountryLOB"].Errors.Clear();
            }

            if (pepdetails.PrimarypepAssociatedCountryLOB != null)
            {
                ModelState["PrimarypepAssociatedCountryLOB"].Errors.Clear();
            }

            if (pepdetails.EntityFormationCountryLOB != null)
            {
                ModelState["EntityFormationCountryLOB"].Errors.Clear();
            }

            if (pepdetails.CountryofcitizenshipLOB != null)
            {
                ModelState["CountryofcitizenshipLOB"].Errors.Clear();
            }

            GetMasterDataListForPepDetermination();
            foreach (string csv in pepdetails.PrimarypepCountryLOBCSV)
            {
                if (pepdetails.PrimarypepCountryLOB != null)
                    pepdetails.PrimarypepCountryLOB.Add(csv.Split(',').ToList());
            }

            foreach (string csv in pepdetails.PrimarypepAssociatedCountryLOBCSV)
            {
                if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                    pepdetails.PrimarypepAssociatedCountryLOB.Add(csv.Split(',').ToList());
            }

            var isPrimaryECNProvided = pepdetails.PrimaryEcnNotProvided;

            if (pepdetails.ECN != null)
            {
                int counter = 0;
                foreach (var ecn in pepdetails.ECN)
                {
                    if ((pepdetails.Flagged[counter] == "Y") && (string.IsNullOrWhiteSpace(pepdetails.DateFlagged[counter])))
                    {
                        ModelState.AddModelError("Flagged", "Please provide flagged date");

                    }
                    counter++;

                }
            }

            if (pepdetails.ECN != null)
            {
                if ((pepdetails.ECN[0] == "") && (pepdetails.PrimaryEcnNotProvided == false))
                {
                    ModelState.AddModelError("PrimaryEcnNotProvided", "Either provide ECN or check this checkbox");
                }
            }
            if (pepdetails.ECN != null)
            {
                if ((pepdetails.ECN[0] != "") && (pepdetails.PrimaryEcnNotProvided == true))
                {
                    ModelState.AddModelError("PrimaryEcnNotProvided", "ECN is already provided, uncheck this checkbox");
                }
            }

            //if (pepdetails.AdditionalEcn != null)
            //{
            //    foreach (var addecn in pepdetails.AdditionalEcn)
            //    {
            //        if (pepdetails.ECNID1 == addecn)
            //        { 
            //            ModelState.AddModelError("ECNID1", "Same ECN has been added as a seconday ECN. Please change either.");
            //            continue;
            //        }
            //    }
            //}

　
　
            HashSet<string> setEcn = new HashSet<string>();
            //int e = -1;
            for (int j = 0; j < pepdetails.ECN.Count; j++)
            {
                var regexvalidator = new RegexStringValidator("^[0-9]{0,255}$");
                try
                {
                    regexvalidator.Validate(pepdetails.ECN[j]);
                    //check for duplicate ECNs
                    if (!string.IsNullOrWhiteSpace(pepdetails.ECN[j]))
                    {
                        if (setEcn.Contains(pepdetails.ECN[j]))
                        {
                            ModelState.AddModelError("ECN" + j.ToString(), "ECN can not be duplicate");
                        }
                        else
                        {
                            setEcn.Add(pepdetails.ECN[j]);
                        }
                    }
                }
                catch
                {
                    ModelState.AddModelError("ECN" + j.ToString(), "ECN must be numeric");
                }
            }

            if ((pepdetails.LOB.Count == 1) && (pepdetails.LOB[0] == "-1"))
            {
                ModelState.AddModelError("LOB", "Atleast one LOB is required");
            }

            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
            {
                if (pepdetails.PrimaryPepFirstName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepFirstName" + i.ToString(), "Enter First Name");
                }
                if (pepdetails.PrimaryPepLastName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepLastName" + i.ToString(), "Enter Last Name");
                }
                if (pepdetails.PrimaryPepAKAName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAKAName" + i.ToString(), "Enter AKA Name");
                }
                if (pepdetails.PrimaryPepPosition[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepPosition" + i.ToString(), "Select position");
                }
                if ((pepdetails.PrimaryPepPosition[i] == "4") && (pepdetails.PrimaryPepPositionOpenField[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepPositionOpenField" + i.ToString(), "Enter the position");
                }

                if (pepdetails.PrimaryPepAssociation[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAssociation" + i.ToString(), "Select association");
                }
                if (pepdetails.PepAssociatedCountry[i] == "-1")
                {
                    ModelState.AddModelError("PepAssociatedCountry" + i.ToString(), "Select associated country");
                }
                if (pepdetails.PrimaryPepCountry[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepCountry" + i.ToString(), "Select country");
                }

                if ((pepdetails.PrimaryPepCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimarypepCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepCountryLOB" + i.ToString(), "Select LOB");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimaryPepCountryLobDate[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepCountryLobDate" + i.ToString(), "Select Date");
                }

　
　
                if ((pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepAssociatedCountryBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "1") && (pepdetails.PrimarypepAssociatedCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepAssociatedCountryLOB" + i.ToString(), "Select LOB");
                }

　
            }

            if (pepdetails.WFBranchId == -1)
            {
                ModelState.AddModelError("WFBranchId", "Select Branch");
            }

            if (pepdetails.ServiceRequestTypeId == -1)
            {
                ModelState.AddModelError("ServiceRequestTypeId", "Select Request Type");
            }

            if (pepdetails.BookingOfficeId == -1)
            {
                ModelState.AddModelError("BookingOfficeId", "Select Booking office");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.PEPEntityName == null))
            {
                ModelState.AddModelError("PEPEntityName", "Enter Entity name");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountry == "-1"))
            {
                ModelState.AddModelError("EntityFormationCountry", "Select Entity formation country");
            }

　
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualFirstName == null))
            {
                ModelState.AddModelError("IndividualFirstName", "Enter First name");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualLastName == null))
            {
                ModelState.AddModelError("IndividualLastName", "Enter Last name");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualAKAName == null))
            {
                ModelState.AddModelError("IndividualAKAName", "Enter AKA name ");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipId == -1))
            {
                ModelState.AddModelError("CountryofcitizenshipId", "Select Country of citizenship");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipBSAApproval == "-1") && (pepdetails.CountryofcitizenshipRiskDesignation == "High"))
            {
                ModelState.AddModelError("CountryofcitizenshipBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipLOB == null) && (pepdetails.CountryofcitizenshipBSAApproval == "1"))
            {
                ModelState.AddModelError("CountryofcitizenshipLOB", "Select LOB");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryBSAApproval == "-1") && (pepdetails.EntityFormationCountryRiskDesignation == "High"))
            {
                ModelState.AddModelError("EntityFormationCountryBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryLOB == null) && (pepdetails.EntityFormationCountryBSAApproval == "1"))
            {
                ModelState.AddModelError("EntityFormationCountryLOB", "Select LOB");
            }

　
            if (ModelState.IsValid)
            {
                TransactionOptions TransOpt = new TransactionOptions();
                TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;

                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
                {

                    var statusList = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);
                    PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Pending").FirstOrDefault();
                    pepdetails.PepRequestStatusId = statusEntity.PEPRequestStatusID;
                    pepdetails.PepRequestStatus = "Pending";

                    pepdetails.CreatedBy = (string)Session["userId"];
                    pepdetails.CreatedTS = DateTime.Now;

                    if (pepdetails.PepLevelId == -1)
                        pepdetails.PepLevelId = null;
                    if (pepdetails.ReasonNotPepId == -1)
                        pepdetails.ReasonNotPepId = null;

                    try
                    {
                        int ecnCounter = 1;

                        CustomerEntity cust = new CustomerEntity();
                        cust.CustomerName = pepdetails.Customer_Name;
                        cust.CustomerStatus = Int32.Parse(pepdetails.CustomerStatusId);
                        cust.CreatedBy = (string)Session["userId"];
                        cust.CreatedTS = DateTime.Now;

                        List<CustomerEntity> customerwithBSAApprovalCountry = new List<CustomerEntity>();

                        if (pepdetails.CustomerType == "Entity")
                        {
                            cust.IsEntity = true;
                            cust.EntityName = pepdetails.PEPEntityName;
                            cust.EntityFormationCountry = Int32.Parse(pepdetails.EntityFormationCountry);

　
                            if (pepdetails.EntityFormationCountryRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.EntityFormationCountryBSAApproval) && (pepdetails.EntityFormationCountryBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.EntityFormationCountryBSAApproval);

                            }

　
                        }
                        else
                        {
                            cust.IsEntity = false;
                            cust.IndividualFirstName = pepdetails.IndividualFirstName;
                            cust.IndividualLastName = pepdetails.IndividualLastName;
                            cust.IndividualLastName2 = pepdetails.IndividualLastName2;
                            cust.IndividualMiddleName = pepdetails.IndividualMiddleName;
                            cust.IndividualAKAName = pepdetails.IndividualAKAName;
                            cust.IndividualDoB = pepdetails.DateofBirth;
                            cust.IndividualCitizenshipCountry = pepdetails.CountryofcitizenshipId;

                            if (pepdetails.CountryofcitizenshipRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.CountryofcitizenshipBSAApproval) && (pepdetails.CountryofcitizenshipBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.CountryofcitizenshipBSAApproval);

                            }

                        }

　
                        cust = _pepservice.AddNewCustomer(cust);
                        pepdetails.CustomerId = cust.CustomerID;

                        if (cust.CountryBSAApprovalId == 1)
                            customerwithBSAApprovalCountry.Add(cust);

　
                        if ((pepdetails.EntityFormationCountryLOB != null) && (pepdetails.CustomerType == "Entity"))
                        {
                            foreach (var addlob in pepdetails.EntityFormationCountryLOB)
                            {
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);
                            }
                        }

                        else if ((pepdetails.CountryofcitizenshipLOB != null) && (pepdetails.CustomerType == "Individual"))
                        {
                            foreach (var addlob in pepdetails.CountryofcitizenshipLOB)
                            {
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);

                            }
                        }

　
　
                        if (pepdetails.PepTypeId == -1)
                        {
                            pepdetails.PepTypeId = null;
                        }

                        pepdetails = _pepservice.AddNew(pepdetails);

　
　
　
                        for (int i = 0; i < pepdetails.ECN.Count; i++)
                        {

                            EcnEntity ecna = new EcnEntity();
                            ecna.PEPID = pepdetails.PepId;
                            ecna.ECN = pepdetails.ECN[i];
                            if (i == 0)
                            {
                                ecna.PrimaryEcnNotProvided = isPrimaryECNProvided;
                            }
                            if ((i > 0) && (pepdetails.ECN[i] == ""))
                            {
                                continue;
                            }
                            if (pepdetails.Flagged[i] == "Y")
                            {
                                ecna.IsFlagged = true;
                                ecna.DateFlagged = Convert.ToDateTime(pepdetails.DateFlagged[i]);
                            }
                            if (pepdetails.Flagged[i] == "N")
                            {
                                ecna.IsFlagged = false;
                            }
                            ecna.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                            ecna.EcnSeqVal = ecnCounter.ToString();
                            ecna.EcnSeqValNum = ecnCounter.ToString();
                            ecna.CreatedBy = (string)Session["userId"];
                            ecna.CreatedTS = DateTime.Now;

                            ecna = _pepservice.AddNewEcn(ecna);
                            ecnCounter++;
                        }

                        //Add new Lob
                        if (pepdetails.LOB != null)
                        {
                            foreach (var addlob in pepdetails.LOB)
                            {
                                if (addlob == "-1")
                                    continue;
                                LobPepEntity lobpep = new LobPepEntity();
                                lobpep.PepId = pepdetails.PepId;
                                lobpep.LobId = Int32.Parse(addlob);
                                /*lobpep.Lobflag = 1;*/// 1 for LOB normal
                                lobpep.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                                lobpep.CreatedBy = (string)Session["userId"];
                                lobpep.CreatedTS = DateTime.Now;
                                lobpep = _pepservice.AddNewLobPep(lobpep);
                            }
                        }

　
                        List<PrimaryPepEntity> lppe = new List<PrimaryPepEntity>();
                        List<PrimaryPepEntity> lppe1 = new List<PrimaryPepEntity>();

                        // Add new Primary Pep
                        if (pepdetails.PrimaryPepFirstName != null)
                        {
                            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
                            {
                                PrimaryPepEntity primarypep = new PrimaryPepEntity();
                                primarypep.PepId = pepdetails.PepId;
                                primarypep.FirstName = pepdetails.PrimaryPepFirstName[i];
                                primarypep.LastName = pepdetails.PrimaryPepLastName[i];
                                primarypep.MiddleName = pepdetails.PrimaryPepMiddleName[i];
                                primarypep.LastName2 = pepdetails.PrimaryPepLastName2[i];
                                primarypep.AKAName = pepdetails.PrimaryPepAKAName[i];
                                primarypep.PrimaryPepPositionOpenField = pepdetails.PrimaryPepPositionOpenField[i];

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociation[i]) && (pepdetails.PrimaryPepAssociation[i] != "-1"))
                                    primarypep.PrimaryPepAssociationId = Int32.Parse(pepdetails.PrimaryPepAssociation[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PepAssociatedCountry[i]) && (pepdetails.PepAssociatedCountry[i] != "-1"))
                                    primarypep.PrimaryPepAssociatedCountryId = Int32.Parse(pepdetails.PepAssociatedCountry[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepPosition[i]) && (pepdetails.PrimaryPepPosition[i] != "-1"))
                                    primarypep.PrimaryPepPositionId = Int32.Parse(pepdetails.PrimaryPepPosition[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepCountry[i]) && (pepdetails.PrimaryPepCountry[i] != "-1"))
                                    primarypep.PrimaryPepCountryId = Int32.Parse(pepdetails.PrimaryPepCountry[i]);

                                if (pepdetails.PrimaryPepCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                        primarypep.CountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepBSAApproval[i]);
                                    if (primarypep.CountryBSAApprovalId == 1)
                                    {
                                        if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                            if (pepdetails.PrimaryPepCountryLobDate != null)
                                            {
                                                primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                            }
                                        primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                    }
                                }

　
                                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))
                                        primarypep.AssociatedCountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]);
                                    //if (primarypep.AssociatedCountryBSAApprovalId == 1)
                                    //{
                                    //    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))
                                    //        if (pepdetails.PrimaryPepAssociatedCountryLobDate != null)
                                    //        {
                                    //            primarypep.AssociatedCountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepAssociatedCountryLobDate[i]);
                                    //        }
                                    //    primarypep.AssociatedCountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepAssociatedCountryLobDate[i]);
                                    //}
                                }

　
　
　
　
                                primarypep.CreatedBy = (string)Session["userId"];
                                primarypep.CreatedTS = DateTime.Now;
                                primarypep.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                                primarypep = _pepservice.AddNewPrimaryPep(primarypep);
                                if (primarypep.CountryBSAApprovalId == 1)
                                    lppe.Add(primarypep);
                                if (primarypep.AssociatedCountryBSAApprovalId == 1)
                                    lppe1.Add(primarypep);

                            }
                        }

　
                        if (pepdetails.PrimarypepCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepCountryLobEntity primarypeplob = new PrimaryPepCountryLobEntity();
                                    primarypeplob.PrimaryPepId = lppe[p].PrimaryPepId;
                                    primarypeplob.LobId = Int32.Parse(addlob);
                                    primarypeplob.CreatedBy = (string)Session["userId"];
                                    primarypeplob.CreatedTS = DateTime.Now;
                                    primarypeplob = _pepservice.AddNewPrimaryPepLob(primarypeplob);
                                    hasAnyValidLOB = true;

                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
                        if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepAssociatedCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob = new PrimaryPepAssociatedCountryLobEntity();
                                    primarypepassociatedcountrylob.PrimaryPepId = lppe1[p].PrimaryPepId;
                                    primarypepassociatedcountrylob.LobId = Int32.Parse(addlob);
                                    primarypepassociatedcountrylob.CreatedBy = (string)Session["userId"];
                                    primarypepassociatedcountrylob.CreatedTS = DateTime.Now;
                                    primarypepassociatedcountrylob = _pepservice.AddNewPrimaryPepAssociatedCountryLob(primarypepassociatedcountrylob);
                                    hasAnyValidLOB = true;

                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
　
　
　
　
　
                        //Add Uploaded Attachment
                        if (pepdetails.UploadedFile != null)
                        {
                            var storagePath = SaveUploadedFileToStore(pepdetails.UploadedFile);

                            AttachmentEntity attachment = new AttachmentEntity();
                            attachment.FileStoragePath = storagePath;
                            attachment.FileName = System.IO.Path.GetFileName(pepdetails.UploadedFile.FileName);

                            attachment.PepId = pepdetails.PepId;
                            attachment.CreatedBy = (string)Session["userId"];
                            attachment.CreatedTS = DateTime.Now;
                            attachment.PepRequestStatusID = statusEntity.PEPRequestStatusID;
                            attachment = _pepservice.AddNewAttachment(attachment);

                            pepdetails.Attachment = attachment;
                        }

                        trans.Complete();
                        pepdetails.IsNewPep = true;
                        pepdetails.success = true;
                        pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Success", "Form submitted successfully!");
                        return View("PEPDeterminationForm", pepdetails);
                    }
                    catch (Exception ex)
                    {
                        trans.Dispose();
                        pepdetails.success = false;
                        pepdetails.PepId = null;
                        pepdetails.PepRequestStatus = null;
                        pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Failure", "PEP Request could not be created!");
                        if (pepdetails.LOB == null)
                        {
                            pepdetails.LOB = new List<string>();
                            pepdetails.LOB.Add("");
                        }

                        if (pepdetails.MajorLOB == null)
                        {
                            pepdetails.MajorLOB = new List<string>();
                            pepdetails.MajorLOB.Add("");
                        }
                        if (pepdetails.PrimaryPepCountry == null)
                        {
                            pepdetails.PrimaryPepCountry = new List<string>();
                            pepdetails.PrimaryPepCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                        }

                        if (pepdetails.PepAssociatedCountry == null)
                        {
                            pepdetails.PepAssociatedCountry = new List<string>();
                            pepdetails.PepAssociatedCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                        }
                        return View("PEPDeterminationForm", pepdetails);
                    }

                }

            }
            else {
                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");
                if (pepdetails.PepId == null)
                    pepdetails.InitialRequestDate = DateTime.Now;
                pepdetails.success = false;
                pepdetails.searchFlag = "none";
                if (pepdetails.LOB == null)
                {
                    pepdetails.LOB = new List<string>();
                    pepdetails.LOB.Add("");
                }

                if (pepdetails.MajorLOB == null)
                {
                    pepdetails.MajorLOB = new List<string>();
                    pepdetails.MajorLOB.Add("");
                }
                if (pepdetails.PrimaryPepCountry == null)
                {
                    pepdetails.PrimaryPepCountry = new List<string>();
                    pepdetails.PrimaryPepCountry.Add("");
                }
                if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                }

                if (pepdetails.PepAssociatedCountry == null)
                {
                    pepdetails.PepAssociatedCountry = new List<string>();
                    pepdetails.PepAssociatedCountry.Add("");
                }
                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                }

                return View("PEPDeterminationForm", pepdetails);
            }
        }

        [CustomActionLoggingFilter]
        public ActionResult LOBDasboardPage()
        {
            var userId = (string)Session["userId"];

            //var item = _pepservice.GetAllPEPDetails();
            var item = _pepservice.GetAllPEPFormsCreatedByLOBUser(userId);
            //var countDb= item.Count();
            //item = item.Take(3);
            return View(item);
        }

        [CustomActionLoggingFilter]
        public ActionResult GetLOBDasboardPageCount(int count)
        {
            var item = _pepservice.GetAllPEPDetails();
            //var countDb= item.Count();
            item = item.Take(count);
            return View("LOBDasboardPage");
        }

        public ActionResult CancelPepRequest(int pepid, string cancelcomments)
        {

            TransactionOptions TransOpt = new TransactionOptions();
            TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;
            var pepdetails = new PEPEntity();

            using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
            {
                try
                {
                    GetMasterDataListForPepDetermination();
                    var item = _pepservice.CancelPepRequest(pepid, cancelcomments);
                    pepdetails = _pepservice.GetSinglePEPbyid(pepid);
                    pepdetails.success = true;
                    pepdetails.searchFlag = "none";
                    ModelState.AddModelError("Success", "PEP Request Submitted Successfully for Cancellation!");
                    trans.Complete();
                }
                catch (Exception ex)
                {
                    trans.Dispose();
                    pepdetails = _pepservice.GetSinglePEPbyid(pepid);
                    pepdetails.success = true;
                    pepdetails.searchFlag = "none";
                    ModelState.AddModelError("Success", "PEP Request Submission failed for Cancellation!");

                }
            }
            return View("PEPDeterminationForm", pepdetails);
        }

        [CustomActionLoggingFilter]
        public ActionResult UpdatePEPFormAfterRejectFromCPTMember(PEPEntity pepdetails)
        {
            if (pepdetails.PrimarypepCountryLOB != null)
            {
                ModelState["PrimarypepCountryLOB"].Errors.Clear();
            }

            if (pepdetails.PrimarypepAssociatedCountryLOB != null)
            {
                ModelState["PrimarypepAssociatedCountryLOB"].Errors.Clear();
            }

            if (pepdetails.EntityFormationCountryLOB != null)
            {
                ModelState["EntityFormationCountryLOB"].Errors.Clear();
            }

            if (pepdetails.CountryofcitizenshipLOB != null)
            {
                ModelState["CountryofcitizenshipLOB"].Errors.Clear();
            }

            GetMasterDataListForPepDetermination();
            foreach (string csv in pepdetails.PrimarypepCountryLOBCSV)
            {
                if (pepdetails.PrimarypepCountryLOB != null)
                    pepdetails.PrimarypepCountryLOB.Add(csv.Split(',').ToList());
            }

            foreach (string csv in pepdetails.PrimarypepAssociatedCountryLOBCSV)
            {
                if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                    pepdetails.PrimarypepAssociatedCountryLOB.Add(csv.Split(',').ToList());
            }

　
            //if (pepdetails.ECN != null)
            //{
            //    int counter = 0;
            //    foreach (var ecn in pepdetails.ECN)
            //    {
            //        if ((pepdetails.Flagged[counter] == "Y") && (string.IsNullOrWhiteSpace(pepdetails.DateFlagged[counter])))
            //        {
            //            ModelState.AddModelError("Flagged", "Please provide flagged date");

            //        }
            //        counter++;

            //    }
            //}

            if (pepdetails.ECN != null)
            {
                if ((pepdetails.ECN[0] == "") && (pepdetails.PrimaryEcnNotProvided == false))
                {
                    ModelState.AddModelError("PrimaryEcnNotProvided", "Either provide ECN or check this checkbox");
                }
            }
            if (pepdetails.ECN != null)
            {
                if ((pepdetails.ECN[0] != "") && (pepdetails.PrimaryEcnNotProvided == true))
                {
                    ModelState.AddModelError("PrimaryEcnNotProvided", "ECN is already provided, uncheck this checkbox");
                }
            }

　
　
　
            HashSet<string> setEcn = new HashSet<string>();
            for (int j = 0; j < pepdetails.ECN.Count; j++)
            {
                var regexvalidator = new RegexStringValidator("^[0-9]{0,255}$");
                try
                {
                    regexvalidator.Validate(pepdetails.ECN[j]);
                    //check for duplicate ECNs
                    if (!string.IsNullOrWhiteSpace(pepdetails.ECN[j]))
                    {
                        if (setEcn.Contains(pepdetails.ECN[j]))
                        {
                            ModelState.AddModelError("ECN" + j.ToString(), "ECN can not be duplicate");
                        }
                        else
                        {
                            setEcn.Add(pepdetails.ECN[j]);
                        }
                    }
                }
                catch
                {
                    ModelState.AddModelError("ECN" + j.ToString(), "ECN must be numeric");
                }
            }

            if ((pepdetails.LOB.Count == 1) && (pepdetails.LOB[0] == "-1"))
            {
                ModelState.AddModelError("LOB", "Atleast one LOB is required");
            }

            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
            {
                if (pepdetails.PrimaryPepFirstName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepFirstName" + i.ToString(), "Enter First Name");
                }
                if (pepdetails.PrimaryPepLastName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepLastName" + i.ToString(), "Enter Last Name");
                }
                if (pepdetails.PrimaryPepAKAName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAKAName" + i.ToString(), "Enter AKA Name");
                }
                if (pepdetails.PrimaryPepPosition[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepPosition" + i.ToString(), "Select position");
                }
                if ((pepdetails.PrimaryPepPosition[i] == "4") && (pepdetails.PrimaryPepPositionOpenField[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepPositionOpenField" + i.ToString(), "Enter the position");
                }

                if (pepdetails.PrimaryPepAssociation[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAssociation" + i.ToString(), "Select association");
                }
                if (pepdetails.PepAssociatedCountry[i] == "-1")
                {
                    ModelState.AddModelError("PepAssociatedCountry" + i.ToString(), "Select associated country");
                }
                if (pepdetails.PrimaryPepCountry[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepCountry" + i.ToString(), "Select country");
                }

                if ((pepdetails.PrimaryPepCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimarypepCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepCountryLOB" + i.ToString(), "Select LOB");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimaryPepCountryLobDate[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepCountryLobDate" + i.ToString(), "Select Date");
                }

　
　
                if ((pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepAssociatedCountryBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "1") && (pepdetails.PrimarypepAssociatedCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepAssociatedCountryLOB" + i.ToString(), "Select LOB");
                }
            }

            if (pepdetails.WFBranchId == -1)
            {
                ModelState.AddModelError("WFBranchId", "Select Branch");
            }

            if (pepdetails.ServiceRequestTypeId == -1)
            {
                ModelState.AddModelError("ServiceRequestTypeId", "Select Request Type");
            }

            if (pepdetails.BookingOfficeId == -1)
            {
                ModelState.AddModelError("BookingOfficeId", "Select Booking office");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.PEPEntityName == null))
            {
                ModelState.AddModelError("PEPEntityName", "Enter Entity name");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountry == "-1"))
            {
                ModelState.AddModelError("EntityFormationCountry", "Select Entity formation country");
            }

　
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualFirstName == null))
            {
                ModelState.AddModelError("IndividualFirstName", "Enter First name");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualLastName == null))
            {
                ModelState.AddModelError("IndividualLastName", "Enter Last name");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualAKAName == null))
            {
                ModelState.AddModelError("IndividualAKAName", "Enter AKA name ");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipId == -1))
            {
                ModelState.AddModelError("CountryofcitizenshipId", "Select Country of citizenship");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipBSAApproval == "-1") && (pepdetails.CountryofcitizenshipRiskDesignation == "High"))
            {
                ModelState.AddModelError("CountryofcitizenshipBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipLOB == null) && (pepdetails.CountryofcitizenshipBSAApproval == "1"))
            {
                ModelState.AddModelError("CountryofcitizenshipLOB", "Select LOB");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryBSAApproval == "-1") && (pepdetails.EntityFormationCountryRiskDesignation == "High"))
            {
                ModelState.AddModelError("EntityFormationCountryBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryLOB == null) && (pepdetails.EntityFormationCountryBSAApproval == "1"))
            {
                ModelState.AddModelError("EntityFormationCountryLOB", "Select LOB");
            }

            if (ModelState.IsValid)
            {
                var existingPep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                TransactionOptions TransOpt = new TransactionOptions();
                TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;

                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
                {
                    //add the row to be updated in history table.
                    var goingToBeChangedRow = existingPep;
                    Mapper.CreateMap<PEPEntity, PepHistoryEntity>();
                    var mappedEntity = Mapper.Map<PEPEntity, PepHistoryEntity>(goingToBeChangedRow);
                    mappedEntity.CreatedBy = (string)Session["userId"];
                    mappedEntity.CreatedTS = DateTime.Now;
                    mappedEntity.UpdatedBy = null;
                    mappedEntity.UpdatedTS = null;
                    var addedToPepHistory = _pepservice.AddNewPepHistory(mappedEntity);

　
                    var statusList = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);
                    PEPRequestStatuEntity statusPendingEntity = statusList.Where(x => x.StatusName == "Pending").FirstOrDefault();
                    existingPep.PepRequestStatusId = statusPendingEntity.PEPRequestStatusID;
                    existingPep.PreviousPepRequestStatusid = pepdetails.PepRequestStatusId;
                    pepdetails.PepRequestStatus = "Pending";

                    //Update the related rows in different pep related tables except attachment
                    _pepservice.UpdateRowsFromRelatedTablesForRejectionWorkflow(pepdetails.PepId.Value);

                    //Update CreatedTS to reset the SLA clock.
                    existingPep.CreatedTS = DateTime.Now;

　
                    //todo: check on following three
                    existingPep.CreatedBy = (string)Session["userId"];
                    existingPep.UpdatedBy = (string)Session["userId"];
                    existingPep.UpdatedTS = DateTime.Now;

                    pepdetails.PepDeterminationComments = existingPep.PepDeterminationComments;
                    pepdetails.DeterminationUpdationDate = existingPep.DeterminationUpdationDate;
                    pepdetails.PepLevelId = existingPep.PepLevelId;
                    pepdetails.ReasonNotPepId = existingPep.ReasonNotPepId;
                    pepdetails.PepTypeId = existingPep.PepTypeId;
                    pepdetails.HoganFlagDate = existingPep.HoganFlagDate;
                    pepdetails.Pep = existingPep.Pep;

　
                    if (pepdetails.PepLevelId == -1)
                        pepdetails.PepLevelId = null;
                    if (pepdetails.ReasonNotPepId == -1)
                        pepdetails.ReasonNotPepId = null;
                    if (pepdetails.PepTypeId == -1)
                        pepdetails.PepTypeId = null;

　
                    try
                    {
                        int ecnCounter = 1;

                        CustomerEntity cust = new CustomerEntity();
                        cust.CustomerName = pepdetails.Customer_Name;
                        cust.CustomerStatus = Int32.Parse(pepdetails.CustomerStatusId);
                        cust.CreatedBy = (string)Session["userId"];
                        cust.CreatedTS = DateTime.Now;

                        List<CustomerEntity> customerwithBSAApprovalCountry = new List<CustomerEntity>();

                        if (pepdetails.CustomerType == "Entity")
                        {
                            cust.IsEntity = true;
                            cust.EntityName = pepdetails.PEPEntityName;
                            cust.EntityFormationCountry = Int32.Parse(pepdetails.EntityFormationCountry);

　
                            if (pepdetails.EntityFormationCountryRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.EntityFormationCountryBSAApproval) && (pepdetails.EntityFormationCountryBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.EntityFormationCountryBSAApproval);

                            }

　
                        }
                        else
                        {
                            cust.IsEntity = false;
                            cust.IndividualFirstName = pepdetails.IndividualFirstName;
                            cust.IndividualLastName = pepdetails.IndividualLastName;
                            cust.IndividualLastName2 = pepdetails.IndividualLastName2;
                            cust.IndividualMiddleName = pepdetails.IndividualMiddleName;
                            cust.IndividualAKAName = pepdetails.IndividualAKAName;
                            cust.IndividualDoB = pepdetails.DateofBirth;
                            cust.IndividualCitizenshipCountry = pepdetails.CountryofcitizenshipId;

                            if (pepdetails.CountryofcitizenshipRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.CountryofcitizenshipBSAApproval) && (pepdetails.CountryofcitizenshipBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.CountryofcitizenshipBSAApproval);

                            }

                        }

　
                        cust = _pepservice.AddNewCustomer(cust);
                        existingPep.CustomerId = cust.CustomerID;

                        if (cust.CountryBSAApprovalId == 1)
                            customerwithBSAApprovalCountry.Add(cust);

　
                        if ((pepdetails.EntityFormationCountryLOB != null) && (pepdetails.CustomerType == "Entity"))
                        {
                            foreach (var addlob in pepdetails.EntityFormationCountryLOB)
                            {
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);
                            }
                        }

                        else if ((pepdetails.CountryofcitizenshipLOB != null) && (pepdetails.CustomerType == "Individual"))
                        {
                            foreach (var addlob in pepdetails.CountryofcitizenshipLOB)
                            {
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);

                            }
                        }

　
　
　
　
                        existingPep.RequestorComments = pepdetails.RequestorComments;
                        existingPep.WFBranchId = pepdetails.WFBranchId;
                        existingPep.BookingOfficeId = pepdetails.BookingOfficeId;
                        existingPep.WCISNumber = pepdetails.WCISNumber;
                        existingPep.ServiceRequestTypeId = pepdetails.ServiceRequestTypeId;

                        //Update the record in PEP table.
                        int updatePEPRecord = _pepservice.Update(existingPep);

                        var reqassignmentDetail = _pepservice.GetSingleRequestAssignmentRowbyid(pepdetails.PepId, "PEP");
                        var reqassignmentDetailUpdate = _pepservice.GetSingleRequestAssignmentRowbyid(pepdetails.PepId, "PEP");

　
                        UserEntity userEn = _userservice.FindUserByEmailID(reqassignmentDetail.UpdatedBy);

                        //todo: where to check if the user is no more in system or inactive.

                        reqassignmentDetail.UserId = userEn.UserID;
                        reqassignmentDetail.ReassignedDate = DateTime.Now;

　
                        reqassignmentDetail.UpdatedBy = (string)Session["userId"];
                        reqassignmentDetail.UpdatedTS = DateTime.Now;

                        //Add the request assignment table row.
                        var resultReqAssignment = _pepservice.AddNew(reqassignmentDetail);

                        //Update the request assignment table row.
                        var rowToBeEndDated = reqassignmentDetailUpdate;
                        rowToBeEndDated.EndDate = DateTime.Now;
                        rowToBeEndDated.UpdatedBy = (string)Session["userId"];
                        rowToBeEndDated.UpdatedTS = DateTime.Now;
                        int resultReq = _pepservice.UpdateRequestAssignmentRow(rowToBeEndDated);

                        for (int i = 0; i < pepdetails.ECN.Count; i++)
                        {

                            EcnEntity ecna = new EcnEntity();
                            ecna.PEPID = pepdetails.PepId;
                            ecna.ECN = pepdetails.ECN[i];
                            if (i == 0)
                            {
                                ecna.PrimaryEcnNotProvided = pepdetails.PrimaryEcnNotProvided;
                            }
                            if (pepdetails.Flagged[i] == "Y")
                            {
                                ecna.IsFlagged = true;
                                ecna.DateFlagged = Convert.ToDateTime(pepdetails.DateFlagged[i]);
                            }
                            if (pepdetails.Flagged[i] == "N")
                            {
                                ecna.IsFlagged = false;
                            }
                            ecna.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                            ecna.EcnSeqVal = ecnCounter.ToString();
                            ecna.EcnSeqValNum = ecnCounter.ToString();
                            ecna.CreatedBy = (string)Session["userId"];
                            ecna.CreatedTS = DateTime.Now;

                            ecna = _pepservice.AddNewEcn(ecna);
                            ecnCounter++;
                        }

　
                        //Add new Lob
                        if (pepdetails.LOB != null)
                        {
                            foreach (var addlob in pepdetails.LOB)
                            {
                                if (addlob == "-1")
                                    continue;
                                LobPepEntity lobpep = new LobPepEntity();
                                lobpep.PepId = pepdetails.PepId;
                                lobpep.LobId = Int32.Parse(addlob);
                                /*lobpep.Lobflag = 1;*/// 1 for LOB normal
                                lobpep.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                                lobpep.CreatedBy = (string)Session["userId"];
                                lobpep.CreatedTS = DateTime.Now;
                                lobpep = _pepservice.AddNewLobPep(lobpep);
                            }
                        }

　
                        List<PrimaryPepEntity> lppe = new List<PrimaryPepEntity>();
                        List<PrimaryPepEntity> lppe1 = new List<PrimaryPepEntity>();

                        // Add new Primary Pep
                        if (pepdetails.PrimaryPepFirstName != null)
                        {
                            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
                            {
                                PrimaryPepEntity primarypep = new PrimaryPepEntity();
                                primarypep.PepId = pepdetails.PepId;
                                primarypep.FirstName = pepdetails.PrimaryPepFirstName[i];
                                primarypep.LastName = pepdetails.PrimaryPepLastName[i];
                                primarypep.MiddleName = pepdetails.PrimaryPepMiddleName[i];
                                primarypep.LastName2 = pepdetails.PrimaryPepLastName2[i];
                                primarypep.AKAName = pepdetails.PrimaryPepAKAName[i];
                                primarypep.PrimaryPepPositionOpenField = pepdetails.PrimaryPepPositionOpenField[i];

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociation[i]) && (pepdetails.PrimaryPepAssociation[i] != "-1"))
                                    primarypep.PrimaryPepAssociationId = Int32.Parse(pepdetails.PrimaryPepAssociation[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PepAssociatedCountry[i]) && (pepdetails.PepAssociatedCountry[i] != "-1"))
                                    primarypep.PrimaryPepAssociatedCountryId = Int32.Parse(pepdetails.PepAssociatedCountry[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepPosition[i]) && (pepdetails.PrimaryPepPosition[i] != "-1"))
                                    primarypep.PrimaryPepPositionId = Int32.Parse(pepdetails.PrimaryPepPosition[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepCountry[i]) && (pepdetails.PrimaryPepCountry[i] != "-1"))
                                    primarypep.PrimaryPepCountryId = Int32.Parse(pepdetails.PrimaryPepCountry[i]);

                                if (pepdetails.PrimaryPepCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                        primarypep.CountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepBSAApproval[i]);
                                    if (primarypep.CountryBSAApprovalId == 1)
                                    {
                                        if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                            if (pepdetails.PrimaryPepCountryLobDate != null)
                                            {
                                                primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                            }
                                        primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                    }
                                }

　
                                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))
                                        primarypep.AssociatedCountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]);
                                }

                                primarypep.CreatedBy = (string)Session["userId"];
                                primarypep.CreatedTS = DateTime.Now;
                                primarypep.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                                primarypep = _pepservice.AddNewPrimaryPep(primarypep);
                                if (primarypep.CountryBSAApprovalId == 1)
                                    lppe.Add(primarypep);
                                if (primarypep.AssociatedCountryBSAApprovalId == 1)
                                    lppe1.Add(primarypep);

                            }
                        }

　
                        if (pepdetails.PrimarypepCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepCountryLobEntity primarypeplob = new PrimaryPepCountryLobEntity();
                                    primarypeplob.PrimaryPepId = lppe[p].PrimaryPepId;
                                    primarypeplob.LobId = Int32.Parse(addlob);
                                    primarypeplob.CreatedBy = (string)Session["userId"];
                                    primarypeplob.CreatedTS = DateTime.Now;
                                    primarypeplob = _pepservice.AddNewPrimaryPepLob(primarypeplob);
                                    hasAnyValidLOB = true;

                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
                        if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepAssociatedCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob = new PrimaryPepAssociatedCountryLobEntity();
                                    primarypepassociatedcountrylob.PrimaryPepId = lppe1[p].PrimaryPepId;
                                    primarypepassociatedcountrylob.LobId = Int32.Parse(addlob);
                                    primarypepassociatedcountrylob.CreatedBy = (string)Session["userId"];
                                    primarypepassociatedcountrylob.CreatedTS = DateTime.Now;
                                    primarypepassociatedcountrylob = _pepservice.AddNewPrimaryPepAssociatedCountryLob(primarypepassociatedcountrylob);
                                    hasAnyValidLOB = true;

                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
　
                        //Add Uploaded Attachment
                        if (pepdetails.UploadedFile != null)
                        {
                            //check if an attachment already exists.
                            var existingAttachment = _pepservice.GetAttachmentRelatedtoPepId(pepdetails.PepId.Value);

                            //if exists then end date it.
                            if (existingAttachment != null)
                            {
                                existingAttachment.EndDate = DateTime.Now;
                                existingAttachment.UpdatedBy = (string)Session["userId"];
                                existingAttachment.UpdatedTS = DateTime.Now;
                                var result = _pepservice.UpdateAttachment(existingAttachment);
                            }

                            var storagePath = SaveUploadedFileToStore(pepdetails.UploadedFile);

                            AttachmentEntity attachment = new AttachmentEntity();
                            attachment.FileStoragePath = storagePath;
                            attachment.FileName = System.IO.Path.GetFileName(pepdetails.UploadedFile.FileName);

                            attachment.PepId = pepdetails.PepId;
                            attachment.CreatedBy = (string)Session["userId"];
                            attachment.CreatedTS = DateTime.Now;
                            attachment.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                            attachment = _pepservice.AddNewAttachment(attachment);

                            pepdetails.Attachment = attachment;
                        }
                        trans.Complete();
                        pepdetails.success = true;
                        pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Success", "Request submitted successfully!");
                        return View("PEPDeterminationForm", pepdetails);
                    }
                    catch (Exception ex)
                    {
                        trans.Dispose();
                        pepdetails.success = false;
                        pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Failure", "PEP Request could not be updated!");
                        if (pepdetails.LOB == null)
                        {
                            pepdetails.LOB = new List<string>();
                            pepdetails.LOB.Add("");
                        }

                        if (pepdetails.MajorLOB == null)
                        {
                            pepdetails.MajorLOB = new List<string>();
                            pepdetails.MajorLOB.Add("");
                        }
                        if (pepdetails.PrimaryPepCountry == null)
                        {
                            pepdetails.PrimaryPepCountry = new List<string>();
                            pepdetails.PrimaryPepCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                        }

                        if (pepdetails.PepAssociatedCountry == null)
                        {
                            pepdetails.PepAssociatedCountry = new List<string>();
                            pepdetails.PepAssociatedCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                        }
                        return View("PEPDeterminationForm", pepdetails);
                    }
                }
            }
            else {
                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");
                if (pepdetails.PepId == null)
                    pepdetails.InitialRequestDate = DateTime.Now;
                pepdetails.success = false;
                pepdetails.searchFlag = "none";
                if (pepdetails.LOB == null)
                {
                    pepdetails.LOB = new List<string>();
                    pepdetails.LOB.Add("");
                }

                if (pepdetails.MajorLOB == null)
                {
                    pepdetails.MajorLOB = new List<string>();
                    pepdetails.MajorLOB.Add("");
                }
                if (pepdetails.PrimaryPepCountry == null)
                {
                    pepdetails.PrimaryPepCountry = new List<string>();
                    pepdetails.PrimaryPepCountry.Add("");
                }
                if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                }

                if (pepdetails.PepAssociatedCountry == null)
                {
                    pepdetails.PepAssociatedCountry = new List<string>();
                    pepdetails.PepAssociatedCountry.Add("");
                }
                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                }

                return View("PEPDeterminationForm", pepdetails);
            }
        }

        #endregion

        #region Action Methods for PDT Users

        public ActionResult GetPEPDeterminationCRFormForCPT(int pepid, int crid)
        {
            GetMasterDataListForPepDetermination();
            var item = _pepservice.GetSinglePEPbyidforCR(pepid, crid);

            item.success = false;
            item.searchFlag = "";
            item.CRId = crid;
            item.changedprops = JsonConvert.SerializeObject(item.changedpropertiesforCR);
            return View(item);
        }

        public ActionResult AcceptPEPDeterminationFormCR(PEPEntity pepdetails)
        {
            TransactionOptions TransOpt = new TransactionOptions();
            TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;
            var pep = new PEPEntity();

            using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
            {
                try
                {
                    GetMasterDataListForPepDetermination();
                    var existingPep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                    var goingToBeChangedRow = existingPep;
                    Mapper.CreateMap<PEPEntity, PepHistoryEntity>();
                    var mappedEntity = Mapper.Map<PEPEntity, PepHistoryEntity>(goingToBeChangedRow);
                    mappedEntity.CreatedBy = (string)Session["userId"];
                    mappedEntity.CreatedTS = DateTime.Now;
                    mappedEntity.UpdatedBy = null;
                    mappedEntity.UpdatedTS = null;
                    var addedToPepHistory = _pepservice.AddNewPepHistory(mappedEntity);

                    var result = _pepservice.AcceptPEPDeterminationFormCR(pepdetails.PepId, pepdetails.CRId);

                    if (result == 1)
                    {
                        pep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                        pep.success = true;
                        pep.searchFlag = "none";
                        pep.CRId = pepdetails.CRId;
                        pep.CrNo = pepdetails.CrNo;
                        Dictionary<string, List<string>> addpro = new Dictionary<string, List<string>>();
                        addpro.Add("prop", new List<string> { "prop1" });
                        pep.changedprops = JsonConvert.SerializeObject(addpro);
                        if (pepdetails.PepRequestStatus == "CR")
                        {
                            ModelState.AddModelError("Success", "CR Accepted!");
                        }
                        else
                        {
                            ModelState.AddModelError("Success", "PEP Request Cancelled!");
                        }
                        EmailNotification.CRAccepted(pep);
                    }
                    else
                    {

                        ModelState.AddModelError("Success", "CR Cannot be accepted, Please take action on CR raised prior to this!");
                        pep = _pepservice.GetSinglePEPbyidforCR(pepdetails.PepId, pepdetails.CRId);
                        pep.changedprops = JsonConvert.SerializeObject(pep.changedpropertiesforCR);
                        pep.CRId = pepdetails.CRId;
                        pep.success = true;
                        pep.searchFlag = "none";

                    }
                    trans.Complete();
                }
                catch (Exception ex)
                {
                    trans.Dispose();
                    if (pepdetails.PepRequestStatus == "CR")
                    {
                        ModelState.AddModelError("Success", "CR Not Accepted!");
                    }
                    else
                    {
                        ModelState.AddModelError("Success", "PEP Request  Not Cancelled!");
                    }
                    pep = _pepservice.GetSinglePEPbyidforCR(pepdetails.PepId, pepdetails.CRId);
                    pep.changedprops = JsonConvert.SerializeObject(pep.changedpropertiesforCR);
                    pep.CRId = pepdetails.CRId;
                    pep.success = true;
                    pep.searchFlag = "none";

                }
            }
            return View("GetPEPDeterminationCRFormForCPT", pep);

　
        }

        public ActionResult RejectPEPDeterminationFormCR(PEPEntity pepdetails)
        {
            TransactionOptions TransOpt = new TransactionOptions();
            TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;
            var pep = new PEPEntity();

            using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
            {
                try
                {
                    GetMasterDataListForPepDetermination();
                    _pepservice.RejectPEPDeterminationFormCR(pepdetails.PepId, pepdetails.CRId);
                    pep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);
                    pep.success = true;
                    pep.searchFlag = "none";
                    pep.CRId = pepdetails.CRId;
                    pep.CrNo = pepdetails.CrNo;
                    Dictionary<string, List<string>> addpro = new Dictionary<string, List<string>>();
                    addpro.Add("prop", new List<string> { "prop1" });
                    pep.changedprops = JsonConvert.SerializeObject(addpro);
                    if (pepdetails.PepRequestStatus == "CR")
                    {
                        ModelState.AddModelError("Success", "CR Rejected!");
                    }
                    else {
                        ModelState.AddModelError("Success", "PEP Cancellation request Rejected!");
                    }
                    trans.Complete();
                    EmailNotification.CRRejected(pep);
                }
                catch (Exception ex)
                {
                    trans.Dispose();
                    if (pepdetails.PepRequestStatus == "CR")
                    {
                        ModelState.AddModelError("Success", "CR Not Rejected!");
                    }
                    else
                    {
                        ModelState.AddModelError("Success", "PEP Cancellation request Not Rejected!");
                    }
                    pep = _pepservice.GetSinglePEPbyidforCR(pepdetails.PepId, pepdetails.CRId);
                    pep.changedprops = JsonConvert.SerializeObject(pep.changedpropertiesforCR);
                    pep.CRId = pepdetails.CRId;
                    pep.success = true;
                    pep.searchFlag = "none";

                }
            }

            return View("GetPEPDeterminationCRFormForCPT", pep);
        }

        [CustomActionLoggingFilter]
        public ActionResult PDTSearchAllRequestsForApproval()
        {
            //var item = _pepservice.GetAllPendingApprovalPEPForms().OrderByDescending(i=>i.CreatedDate);
            // return View(item);
            ViewBag.isSearch = false;
            ViewBag.isValidationError = false;
            ViewBag.typeofSearch = "normal";
            SearchDetailsViewModel model = new SearchDetailsViewModel();
            model.SearchCriteria = new SearchPEPEntity();
            return View(model);
        }

        [OutputCache(VaryByParam = "*", Duration = 0, NoStore = true)]
        [CustomActionLoggingFilter]
        public ActionResult PEPPendingApprovalFormDetails(SearchPEPEntity SearchPendingApprovalDetails)
        {

            if (SearchPendingApprovalDetails.pepid != 0 || !string.IsNullOrEmpty(SearchPendingApprovalDetails.ecn) || !string.IsNullOrWhiteSpace(SearchPendingApprovalDetails.entity) || !string.IsNullOrWhiteSpace(SearchPendingApprovalDetails.customername) || !string.IsNullOrWhiteSpace(SearchPendingApprovalDetails.primarypep))
            {
                var item = _pepservice.GetPEPSearchDetails(SearchPendingApprovalDetails);
                ViewBag.isSearch = true;
                ViewBag.isValidationError = false;
                ViewBag.typeofSearch = "normal";
                item.SearchCriteria = SearchPendingApprovalDetails;
                if (item.SearchResult.PepList.Count() > 0)
                {
                    if (SearchPendingApprovalDetails.filter == "ExactMatch")
                    {
                        if (item.SearchResult.PepList.Count() == 1)
                        {
                            int pepid = item.SearchResult.PepList.Select(i => i.PepId).FirstOrDefault();
                            return RedirectToAction("GetPEPDeterminationSearchFormForApproval", new { PEPID = pepid });
                        }
                    }
                    return View("PDTSearchAllRequestsForApproval", item);
                }

                else
                {

                    ModelState.AddModelError("Error", "No Search Results found!");
                    SearchDetailsViewModel searchDetails = new SearchDetailsViewModel();
                    searchDetails.SearchCriteria = SearchPendingApprovalDetails;
                    //searchDetails.SearchCriteria = searchCriteria;
                    searchDetails.SearchResult = new DisplayPepInformationListViewModel();
                    searchDetails.SearchResult.PepList = new List<DisplayListViewModel>();
                    //ModelState.AddModelError("Error", "No Search Results found.");
                    //todo: To create T_PEPDetailsCustomEntity
                    return View("PDTSearchAllRequestsForApproval", searchDetails);
                }
            }
            else
            {
                return RedirectToAction("PDTSearchAllRequestsForApproval");
            }

　
        }

        [CustomActionLoggingFilter]
        public ActionResult GetPEPDeterminationSearchFormForApproval(int PEPID)
        {
            var PEPDetails = _pepservice.GetSinglePEPbyid(PEPID);
            //if (PEPDetails.PEPRequestStatu.StatusName == "CR" || PEPDetails.PEPRequestStatu.StatusName == "RequestForCancellation")
            //{
            //    return RedirectToAction("GetPEPDeterminationCRFormForCPT", new { pepid = PEPID});
            //}
            // else {
            GetMasterDataListForPepDetermination();
            PEPDetails.searchFlag = "block";
            if ((PEPDetails.PepRequestStatus == "Pending") && (!(PEPDetails.DeterminationUpdationDate.HasValue)))
            {
                PEPDetails.DeterminationUpdationDate = DateTime.Now;
            }
            //return View("PEPDeterminationFormForApproval", PEPDetails);
            return View("PEPDeterminationForm", PEPDetails);
            // }
        }

        [CustomActionLoggingFilter]
        public ActionResult UpdatePEPDeterminationForm(PEPEntity pepdetails)
        {
            if (pepdetails.PrimarypepCountryLOB != null)
            {
                ModelState["PrimarypepCountryLOB"].Errors.Clear();
            }

            if (pepdetails.PrimarypepAssociatedCountryLOB != null)
            {
                ModelState["PrimarypepAssociatedCountryLOB"].Errors.Clear();
            }

            if (pepdetails.EntityFormationCountryLOB != null)
            {
                ModelState["EntityFormationCountryLOB"].Errors.Clear();
            }

            if (pepdetails.CountryofcitizenshipLOB != null)
            {
                ModelState["CountryofcitizenshipLOB"].Errors.Clear();
            }

            GetMasterDataListForPepDetermination();
            foreach (string csv in pepdetails.PrimarypepCountryLOBCSV)
            {
                if (pepdetails.PrimarypepCountryLOB != null)
                    pepdetails.PrimarypepCountryLOB.Add(csv.Split(',').ToList());
            }

            foreach (string csv in pepdetails.PrimarypepAssociatedCountryLOBCSV)
            {
                if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                    pepdetails.PrimarypepAssociatedCountryLOB.Add(csv.Split(',').ToList());
            }

　
            if (pepdetails.ECN != null)
            {
                int counter = 0;
                foreach (var ecn in pepdetails.ECN)
                {
                    if ((pepdetails.Flagged[counter] == "Y") && (string.IsNullOrWhiteSpace(pepdetails.DateFlagged[counter])))
                    {
                        ModelState.AddModelError("Flagged" + counter.ToString(), "Please provide flagged date");

                    }
                    counter++;

                }
            }

            if (pepdetails.ECN != null)
            {
                if ((pepdetails.ECN[0] == "") && (pepdetails.PrimaryEcnNotProvided == false))
                {
                    ModelState.AddModelError("PrimaryEcnNotProvided", "Either provide ECN or check this checkbox");
                }
            }
            if (pepdetails.ECN != null)
            {
                if ((pepdetails.ECN[0] != "") && (pepdetails.PrimaryEcnNotProvided == true))
                {
                    ModelState.AddModelError("PrimaryEcnNotProvided", "ECN is already provided, uncheck this checkbox");
                }
            }

            HashSet<string> setEcn = new HashSet<string>();
            for (int j = 0; j < pepdetails.ECN.Count; j++)
            {
                var regexvalidator = new RegexStringValidator("^[0-9]{0,255}$");
                try
                {
                    regexvalidator.Validate(pepdetails.ECN[j]);
                    //check for duplicate ECNs
                    if (!string.IsNullOrWhiteSpace(pepdetails.ECN[j]))
                    {
                        if (setEcn.Contains(pepdetails.ECN[j]))
                        {
                            ModelState.AddModelError("ECN" + j.ToString(), "ECN can not be duplicate");
                        }
                        else
                        {
                            setEcn.Add(pepdetails.ECN[j]);
                        }
                    }
                }
                catch
                {
                    ModelState.AddModelError("ECN" + j.ToString(), "ECN must be numeric");
                }
            }

            if (pepdetails.LOB != null)
            { 
            if ((pepdetails.LOB.Count == 1) && (pepdetails.LOB[0] == "-1"))
            {
                ModelState.AddModelError("LOB", "Atleast one LOB is required");
            }
            }
            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
            {
                if (pepdetails.PrimaryPepFirstName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepFirstName" + i.ToString(), "Enter First Name");
                }
                if (pepdetails.PrimaryPepLastName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepLastName" + i.ToString(), "Enter Last Name");
                }
                if (pepdetails.PrimaryPepAKAName[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAKAName" + i.ToString(), "Enter AKA Name");
                }
                if (pepdetails.PrimaryPepPosition[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepPosition" + i.ToString(), "Select position");
                }
                if ((pepdetails.PrimaryPepPosition[i] == "4") && (pepdetails.PrimaryPepPositionOpenField[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepPositionOpenField" + i.ToString(), "Enter the position");
                }

                if (pepdetails.PrimaryPepAssociation[i] == "")
                {
                    ModelState.AddModelError("PrimaryPepAssociation" + i.ToString(), "Select association");
                }
                if (pepdetails.PepAssociatedCountry[i] == "-1")
                {
                    ModelState.AddModelError("PepAssociatedCountry" + i.ToString(), "Select associated country");
                }
                if (pepdetails.PrimaryPepCountry[i] == "-1")
                {
                    ModelState.AddModelError("PrimaryPepCountry" + i.ToString(), "Select country");
                }

                if ((pepdetails.PrimaryPepCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimarypepCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepCountryLOB" + i.ToString(), "Select LOB");
                }

                if ((pepdetails.PrimaryPepBSAApproval[i] == "1") && (pepdetails.PrimaryPepCountryLobDate[i] == ""))
                {
                    ModelState.AddModelError("PrimaryPepCountryLobDate" + i.ToString(), "Select Date");
                }

　
　
                if ((pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High") && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "-1"))
                {
                    ModelState.AddModelError("PrimaryPepAssociatedCountryBSAApproval" + i.ToString(), "Select BSA Approval state");
                }

                if ((pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] == "1") && (pepdetails.PrimarypepAssociatedCountryLOBCSV[i] == ""))
                {
                    ModelState.AddModelError("PrimarypepAssociatedCountryLOB" + i.ToString(), "Select LOB");
                }
            }

            if (pepdetails.WFBranchId == -1)
            {
                ModelState.AddModelError("WFBranchId", "Select Branch");
            }

            if (pepdetails.ServiceRequestTypeId == -1)
            {
                ModelState.AddModelError("ServiceRequestTypeId", "Select Request Type");
            }

            if (pepdetails.BookingOfficeId == -1)
            {
                ModelState.AddModelError("BookingOfficeId", "Select Booking office");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.PEPEntityName == null))
            {
                ModelState.AddModelError("PEPEntityName", "Enter Entity name");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountry == "-1"))
            {
                ModelState.AddModelError("EntityFormationCountry", "Select Entity formation country");
            }

　
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualFirstName == null))
            {
                ModelState.AddModelError("IndividualFirstName", "Enter First name");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualLastName == null))
            {
                ModelState.AddModelError("IndividualLastName", "Enter Last name");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.IndividualAKAName == null))
            {
                ModelState.AddModelError("IndividualAKAName", "Enter AKA name ");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipId == -1))
            {
                ModelState.AddModelError("CountryofcitizenshipId", "Select Country of citizenship");
            }

            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipBSAApproval == "-1") && (pepdetails.CountryofcitizenshipRiskDesignation == "High"))
            {
                ModelState.AddModelError("CountryofcitizenshipBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Individual") && (pepdetails.CountryofcitizenshipLOB == null) && (pepdetails.CountryofcitizenshipBSAApproval == "1"))
            {
                ModelState.AddModelError("CountryofcitizenshipLOB", "Select LOB");
            }

            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryBSAApproval == "-1") && (pepdetails.EntityFormationCountryRiskDesignation == "High"))
            {
                ModelState.AddModelError("EntityFormationCountryBSAApproval", "Select BSA approval state");
            }
            if ((pepdetails.CustomerType == "Entity") && (pepdetails.EntityFormationCountryLOB == null) && (pepdetails.EntityFormationCountryBSAApproval == "1"))
            {
                ModelState.AddModelError("EntityFormationCountryLOB", "Select LOB");
            }

            if (pepdetails.BtnSubmit == "Submit")
            {

                if ((pepdetails.Pep == "Y") && (pepdetails.PepTypeId == -1))
                {
                    ModelState.AddModelError("PepTypeId", "Enter Pep Type ");
                }
                if ((pepdetails.Pep == "Y") && (pepdetails.PepLevelId == -1))
                {
                    ModelState.AddModelError("PepLevelId", "Select Pep Level");
                }

                if ((pepdetails.Pep == "Y") && ((pepdetails.HoganFlagged == "") || (pepdetails.HoganFlagged == null)))
                {
                    ModelState.AddModelError("HoganFlagged", "Select one");
                }
                if ((pepdetails.Pep == "Y") && (pepdetails.HoganFlagged == "Y") && (pepdetails.HoganFlagDate == null))
                {
                    ModelState.AddModelError("HoganFlagDate", "Select Flag date");
                }

                if ((pepdetails.Pep == "N") && (pepdetails.ReasonNotPepId == -1))
                {
                    ModelState.AddModelError("ReasonNotPepId", "Select a reason");
                }
                if (pepdetails.PepDeterminationComments == null)
                {
                    ModelState.AddModelError("PepDeterminationComments", "Enter comments");
                }
                if ((pepdetails.Pep == null) || (pepdetails.Pep == ""))
                {
                    ModelState.AddModelError("Pep", "Select one");
                }

            }

　
            if (pepdetails.BtnSubmit == "Reject")
            {
                if (pepdetails.PepDeterminationComments == null)
                {
                    ModelState.AddModelError("PepDeterminationComments", "Enter comments");
                }
            }

　
            if (ModelState.IsValid)
            {
                ModelState.Clear();
                TransactionOptions TransOpt = new TransactionOptions();
                TransOpt.IsolationLevel = System.Transactions.IsolationLevel.ReadUncommitted;

                using (var trans = new TransactionScope(TransactionScopeOption.Required, TransOpt))
                {
                    var existingPep = _pepservice.GetSinglePEPbyid(pepdetails.PepId);

                    //add the row to be updated in history table.
                    var goingToBeChangedRow = existingPep;
                    Mapper.CreateMap<PEPEntity, PepHistoryEntity>();
                    var mappedEntity = Mapper.Map<PEPEntity, PepHistoryEntity>(goingToBeChangedRow);
                    mappedEntity.CreatedBy = (string)Session["userId"];
                    mappedEntity.CreatedTS = DateTime.Now;
                    mappedEntity.UpdatedBy = null;
                    mappedEntity.UpdatedTS = null;
                    var addedToPepHistory = _pepservice.AddNewPepHistory(mappedEntity);

                    if (pepdetails.BtnSubmit == "Reject")
                    {

                        existingPep.IsPep = null;
                        pepdetails.Pep = null;

                        existingPep.PepTypeId = null;
                        existingPep.PepLevelId = null;
                        existingPep.IsHoganFlagSet = null;
                        existingPep.HoganFlagDate = null;

                        pepdetails.PepTypeId = null;
                        pepdetails.PepLevelId = null;
                        pepdetails.HoganFlagged = null;
                        pepdetails.HoganFlagDate = null;

                        existingPep.ReasonNotPepId = null;
                        pepdetails.ReasonNotPepId = null;

                    }
                    else {

                        if (pepdetails.Pep == "Y")
                        {
                            existingPep.IsPep = true;
                            existingPep.Pep = pepdetails.Pep;
                            existingPep.PepTypeId = pepdetails.PepTypeId;
                            existingPep.PepLevelId = pepdetails.PepLevelId;
                            if (pepdetails.HoganFlagged == "Y")
                            {
                                pepdetails.IsHoganFlagSet = true;

                            }
                            else if (pepdetails.HoganFlagged == "N")
                            {
                                pepdetails.IsHoganFlagSet = false;

                            }
                            existingPep.IsHoganFlagSet = pepdetails.IsHoganFlagSet;
                            existingPep.HoganFlagged = pepdetails.HoganFlagged;
                            existingPep.HoganFlagDate = pepdetails.HoganFlagDate;
                            existingPep.ReasonNotPepId = null;
                        }
                        else if (pepdetails.Pep == "N")
                        {
                            existingPep.IsPep = false;
                            existingPep.Pep = pepdetails.Pep;
                            existingPep.ReasonNotPepId = pepdetails.ReasonNotPepId;
                            existingPep.PepTypeId = null;
                            existingPep.PepLevelId = null;
                            existingPep.HoganFlagged = pepdetails.HoganFlagged;
                            existingPep.IsHoganFlagSet = null;
                            existingPep.HoganFlagDate = null;
                        }

                        else if ((pepdetails.Pep == "") || (pepdetails.Pep == null))
                        {
                            existingPep.IsPep = null;
                            existingPep.Pep = pepdetails.Pep;
                            existingPep.PepTypeId = null;
                            existingPep.PepLevelId = null;
                            existingPep.IsHoganFlagSet = null;
                            existingPep.HoganFlagged = pepdetails.HoganFlagged;
                            existingPep.HoganFlagDate = null;
                            existingPep.ReasonNotPepId = null;
                        }

　
                    }
                    existingPep.PepDeterminationComments = pepdetails.PepDeterminationComments;
                    existingPep.DeterminationUpdationDate = DateTime.Now;

                    //Update the related rows in different pep related tables except attachment
                    _pepservice.UpdateRowsFromRelatedTablesForRejectionWorkflow(pepdetails.PepId.Value);

                    //todo: check on following three
                    existingPep.CreatedBy = (string)Session["userId"];
                    existingPep.UpdatedBy = (string)Session["userId"];
                    existingPep.UpdatedTS = DateTime.Now;

                    if (pepdetails.PepLevelId == -1)
                        existingPep.PepLevelId = null;
                    if (pepdetails.ReasonNotPepId == -1)
                        existingPep.ReasonNotPepId = null;
                    if (pepdetails.PepTypeId == -1)
                        existingPep.PepTypeId = null;

                    existingPep.RequestorComments = pepdetails.RequestorComments;
                    existingPep.WFBranchId = pepdetails.WFBranchId;
                    existingPep.BookingOfficeId = pepdetails.BookingOfficeId;
                    existingPep.WCISNumber = pepdetails.WCISNumber;
                    existingPep.ServiceRequestTypeId = pepdetails.ServiceRequestTypeId;

　
                    var statusList = MasterDataUtilities.GetPepRequestStatusList(_masterdataservice, false);
                    PEPRequestStatuEntity statusPendingEntity = statusList.Where(x => x.StatusName == "Pending").FirstOrDefault();

　
                    if (pepdetails.BtnSubmit == "Submit")
                    {
                        PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Completed").FirstOrDefault();
                        existingPep.PepRequestStatusId = statusEntity.PEPRequestStatusID;
                        pepdetails.PepRequestStatus = "Completed";

                    }
                    //else if (pepdetails.BtnSubmit == "Save")
                    //{

                    //    PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Pending").FirstOrDefault();
                    //    existingPep.PepRequestStatusId = statusEntity.PEPRequestStatusID;
                    //    pepdetails.PepRequestStatus = "Pending";

　
                    //}
                    else if (pepdetails.BtnSubmit == "Reject")
                    {
                        PEPRequestStatuEntity statusEntity = statusList.Where(x => x.StatusName == "Rejected").FirstOrDefault();
                        existingPep.PepRequestStatusId = statusEntity.PEPRequestStatusID;
                        pepdetails.PepRequestStatus = "Rejected";

　
　
                        //Get the request assignment table row.

                        var reqassignmentDetail = _pepservice.GetSingleRequestAssignmentRowbyid(existingPep.PepId, "PEP");
                        var reqassignmentDetailUpdate = _pepservice.GetSingleRequestAssignmentRowbyid(existingPep.PepId, "PEP");

　
                        UserEntity userEn = _userservice.FindUserByEmailID(existingPep.CreatedBy);
                        reqassignmentDetail.UserId = userEn.UserID;
                        reqassignmentDetail.ReassignedDate = DateTime.Now;
                        reqassignmentDetail.UpdatedBy = (string)Session["userId"];
                        reqassignmentDetail.UpdatedTS = DateTime.Now;

　
                        //add a new row.

                        var addedRow = _pepservice.AddNew(reqassignmentDetail);

                        //Update the request assignment table row.
                        var rowToBeEndDated = reqassignmentDetailUpdate;
                        rowToBeEndDated.EndDate = DateTime.Now;
                        rowToBeEndDated.UpdatedBy = (string)Session["userId"];
                        rowToBeEndDated.UpdatedTS = DateTime.Now;

                        int result = _pepservice.UpdateRequestAssignmentRow(rowToBeEndDated);

                    }

                    try
                    {
                        int ecnCounter = 1;

                        CustomerEntity cust = new CustomerEntity();
                        cust.CustomerName = pepdetails.Customer_Name;
                        cust.CustomerStatus = Int32.Parse(pepdetails.CustomerStatusId);
                        cust.CreatedBy = (string)Session["userId"];
                        cust.CreatedTS = DateTime.Now;

                        List<CustomerEntity> customerwithBSAApprovalCountry = new List<CustomerEntity>();

                        if (pepdetails.CustomerType == "Entity")
                        {
                            cust.IsEntity = true;
                            cust.EntityName = pepdetails.PEPEntityName;
                            cust.EntityFormationCountry = Int32.Parse(pepdetails.EntityFormationCountry);

　
                            if (pepdetails.EntityFormationCountryRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.EntityFormationCountryBSAApproval) && (pepdetails.EntityFormationCountryBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.EntityFormationCountryBSAApproval);

                            }

　
                        }
                        else
                        {
                            cust.IsEntity = false;
                            cust.IndividualFirstName = pepdetails.IndividualFirstName;
                            cust.IndividualLastName = pepdetails.IndividualLastName;
                            cust.IndividualLastName2 = pepdetails.IndividualLastName2;
                            cust.IndividualMiddleName = pepdetails.IndividualMiddleName;
                            cust.IndividualAKAName = pepdetails.IndividualAKAName;
                            cust.IndividualDoB = pepdetails.DateofBirth;
                            cust.IndividualCitizenshipCountry = pepdetails.CountryofcitizenshipId;

                            if (pepdetails.CountryofcitizenshipRiskDesignation == "High")
                            {
                                if (!string.IsNullOrWhiteSpace(pepdetails.CountryofcitizenshipBSAApproval) && (pepdetails.CountryofcitizenshipBSAApproval != "-1"))
                                    cust.CountryBSAApprovalId = Int32.Parse(pepdetails.CountryofcitizenshipBSAApproval);

                            }

                        }

　
                        cust = _pepservice.AddNewCustomer(cust);
                        existingPep.CustomerId = cust.CustomerID;

                        if (cust.CountryBSAApprovalId == 1)
                            customerwithBSAApprovalCountry.Add(cust);

　
                        if ((pepdetails.EntityFormationCountryLOB != null) && (pepdetails.CustomerType == "Entity"))
                        {
                            foreach (var addlob in pepdetails.EntityFormationCountryLOB)
                            {
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);
                            }
                        }

                        else if ((pepdetails.CountryofcitizenshipLOB != null) && (pepdetails.CustomerType == "Individual"))
                        {
                            foreach (var addlob in pepdetails.CountryofcitizenshipLOB)
                            {
                                CustomerCountryLobEntity custcountrylob = new CustomerCountryLobEntity();
                                custcountrylob.CustomerId = cust.CustomerID;
                                custcountrylob.LobId = Int32.Parse(addlob);
                                custcountrylob.CreatedBy = (string)Session["userId"];
                                custcountrylob.CreatedTS = DateTime.Now;
                                custcountrylob = _pepservice.AddNewCustomerCountryLob(custcountrylob);

                            }
                        }

                        //Update the record in PEP table.
                        int updatePEPRecord = _pepservice.Update(existingPep);

　
　
                        for (int i = 0; i < pepdetails.ECN.Count; i++)
                        {

                            EcnEntity ecna = new EcnEntity();
                            ecna.PEPID = pepdetails.PepId;
                            ecna.ECN = pepdetails.ECN[i];
                            if (i == 0)
                            {
                                ecna.PrimaryEcnNotProvided = pepdetails.PrimaryEcnNotProvided;
                            }
                            if (pepdetails.Flagged[i] == "Y")
                            {
                                ecna.IsFlagged = true;
                                ecna.DateFlagged = Convert.ToDateTime(pepdetails.DateFlagged[i]);
                            }
                            if (pepdetails.Flagged[i] == "N")
                            {
                                ecna.IsFlagged = false;
                            }
                            ecna.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                            ecna.EcnSeqVal = ecnCounter.ToString();
                            ecna.EcnSeqValNum = ecnCounter.ToString();
                            ecna.CreatedBy = (string)Session["userId"];
                            ecna.CreatedTS = DateTime.Now;

                            ecna = _pepservice.AddNewEcn(ecna);
                            ecnCounter++;
                        }

　
                        //Add new Lob
                        if (pepdetails.LOB != null)
                        {
                            foreach (var addlob in pepdetails.LOB)
                            {
                                if (addlob == "-1")
                                    continue;
                                LobPepEntity lobpep = new LobPepEntity();
                                lobpep.PepId = pepdetails.PepId;
                                lobpep.LobId = Int32.Parse(addlob);

                                lobpep.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                                lobpep.CreatedBy = (string)Session["userId"];
                                lobpep.CreatedTS = DateTime.Now;
                                lobpep = _pepservice.AddNewLobPep(lobpep);
                            }
                        }

　
                        List<PrimaryPepEntity> lppe = new List<PrimaryPepEntity>();
                        List<PrimaryPepEntity> lppe1 = new List<PrimaryPepEntity>();

                        // Add new Primary Pep
                        if (pepdetails.PrimaryPepFirstName != null)
                        {
                            for (int i = 0; i < pepdetails.PrimaryPepFirstName.Count; i++)
                            {
                                PrimaryPepEntity primarypep = new PrimaryPepEntity();
                                primarypep.PepId = pepdetails.PepId;
                                primarypep.FirstName = pepdetails.PrimaryPepFirstName[i];
                                primarypep.LastName = pepdetails.PrimaryPepLastName[i];
                                primarypep.MiddleName = pepdetails.PrimaryPepMiddleName[i];
                                primarypep.LastName2 = pepdetails.PrimaryPepLastName2[i];
                                primarypep.AKAName = pepdetails.PrimaryPepAKAName[i];
                                primarypep.PrimaryPepPositionOpenField = pepdetails.PrimaryPepPositionOpenField[i];

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociation[i]) && (pepdetails.PrimaryPepAssociation[i] != "-1"))
                                    primarypep.PrimaryPepAssociationId = Int32.Parse(pepdetails.PrimaryPepAssociation[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PepAssociatedCountry[i]) && (pepdetails.PepAssociatedCountry[i] != "-1"))
                                    primarypep.PrimaryPepAssociatedCountryId = Int32.Parse(pepdetails.PepAssociatedCountry[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepPosition[i]) && (pepdetails.PrimaryPepPosition[i] != "-1"))
                                    primarypep.PrimaryPepPositionId = Int32.Parse(pepdetails.PrimaryPepPosition[i]);

                                if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepCountry[i]) && (pepdetails.PrimaryPepCountry[i] != "-1"))
                                    primarypep.PrimaryPepCountryId = Int32.Parse(pepdetails.PrimaryPepCountry[i]);

                                if (pepdetails.PrimaryPepCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                        primarypep.CountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepBSAApproval[i]);
                                    if (primarypep.CountryBSAApprovalId == 1)
                                    {
                                        if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepBSAApproval[i]) && (pepdetails.PrimaryPepBSAApproval[i] != "-1"))
                                            if (pepdetails.PrimaryPepCountryLobDate != null)
                                            {
                                                primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                            }
                                        primarypep.CountryLobDate = Convert.ToDateTime(pepdetails.PrimaryPepCountryLobDate[i]);
                                    }
                                }

　
                                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation[i] == "High")
                                {
                                    if (!string.IsNullOrWhiteSpace(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]) && (pepdetails.PrimaryPepAssociatedCountryBSAApproval[i] != "-1"))
                                        primarypep.AssociatedCountryBSAApprovalId = Int32.Parse(pepdetails.PrimaryPepAssociatedCountryBSAApproval[i]);
                                }

                                primarypep.CreatedBy = (string)Session["userId"];
                                primarypep.CreatedTS = DateTime.Now;
                                primarypep.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                                primarypep = _pepservice.AddNewPrimaryPep(primarypep);
                                if (primarypep.CountryBSAApprovalId == 1)
                                    lppe.Add(primarypep);
                                if (primarypep.AssociatedCountryBSAApprovalId == 1)
                                    lppe1.Add(primarypep);

                            }
                        }

　
                        if (pepdetails.PrimarypepCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepCountryLobEntity primarypeplob = new PrimaryPepCountryLobEntity();
                                    primarypeplob.PrimaryPepId = lppe[p].PrimaryPepId;
                                    primarypeplob.LobId = Int32.Parse(addlob);
                                    primarypeplob.CreatedBy = (string)Session["userId"];
                                    primarypeplob.CreatedTS = DateTime.Now;
                                    primarypeplob = _pepservice.AddNewPrimaryPepLob(primarypeplob);
                                    hasAnyValidLOB = true;

                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
                        if (pepdetails.PrimarypepAssociatedCountryLOB != null)
                        {
                            int p = 0;
                            foreach (var addloblist in pepdetails.PrimarypepAssociatedCountryLOB)
                            {
                                bool hasAnyValidLOB = false;
                                foreach (var addlob in addloblist)
                                {
                                    if (string.IsNullOrWhiteSpace(addlob))
                                    {
                                        continue;
                                    }
                                    PrimaryPepAssociatedCountryLobEntity primarypepassociatedcountrylob = new PrimaryPepAssociatedCountryLobEntity();
                                    primarypepassociatedcountrylob.PrimaryPepId = lppe1[p].PrimaryPepId;
                                    primarypepassociatedcountrylob.LobId = Int32.Parse(addlob);
                                    primarypepassociatedcountrylob.CreatedBy = (string)Session["userId"];
                                    primarypepassociatedcountrylob.CreatedTS = DateTime.Now;
                                    primarypepassociatedcountrylob = _pepservice.AddNewPrimaryPepAssociatedCountryLob(primarypepassociatedcountrylob);
                                    hasAnyValidLOB = true;

                                }
                                if (hasAnyValidLOB)
                                {
                                    p++;
                                }
                            }
                        }

　
　
                        //Add Uploaded Attachment
                        if (pepdetails.UploadedFile != null)
                        {
                            //check if an attachment already exists.
                            var existingAttachment = _pepservice.GetAttachmentRelatedtoPepId(pepdetails.PepId.Value);

                            //if exists then end date it.
                            if (existingAttachment != null)
                            {
                                existingAttachment.EndDate = DateTime.Now;
                                existingAttachment.UpdatedBy = (string)Session["userId"];
                                existingAttachment.UpdatedTS = DateTime.Now;
                                var result = _pepservice.UpdateAttachment(existingAttachment);
                            }

                            var storagePath = SaveUploadedFileToStore(pepdetails.UploadedFile);

                            AttachmentEntity attachment = new AttachmentEntity();
                            attachment.FileStoragePath = storagePath;
                            attachment.FileName = System.IO.Path.GetFileName(pepdetails.UploadedFile.FileName);

                            attachment.PepId = pepdetails.PepId;
                            attachment.CreatedBy = (string)Session["userId"];
                            attachment.CreatedTS = DateTime.Now;
                            attachment.PepRequestStatusID = statusPendingEntity.PEPRequestStatusID;
                            attachment = _pepservice.AddNewAttachment(attachment);

                            pepdetails.Attachment = attachment;
                        }

                       
                        if (existingPep.PepRequestStatus == "Completed")
                        {
                            EmailNotification.PEPStatusChangedtoCompleted(existingPep);
                        }
                        if (existingPep.PepRequestStatus == "Rejected")
                        {
                            EmailNotification.PEPStatusChangedtoRejected(existingPep);
                        }

                        trans.Complete();
                        pepdetails.success = true;
                        //todo: check the status and accordingly show the message.
                        ModelState.AddModelError("Success", "Form updated successfully!");
                        return View("PEPDeterminationForm", pepdetails);

　
　
                        //pepdetails.success = true;
                        //pepdetails.searchFlag = "none";
                        //ModelState.AddModelError("Success", "Form submitted successfully!");
                        //return View("PEPDeterminationForm", pepdetails);
                    }
                    catch (Exception ex)
                    {

                        //InitializePepDetails(PEPDetails);
                        //PEPDetails.success = false;
                        //ModelState.AddModelError("Failure", "PEP details not updated");
                        //return View("PEPDeterminationForm", PEPDetails);

　
                        trans.Dispose();
                        pepdetails.success = false;
                        //pepdetails.searchFlag = "none";
                        ModelState.AddModelError("Failure", "PEP Request could not be updated!");
                        if (pepdetails.LOB == null)
                        {
                            pepdetails.LOB = new List<string>();
                            pepdetails.LOB.Add("");
                        }

                        if (pepdetails.MajorLOB == null)
                        {
                            pepdetails.MajorLOB = new List<string>();
                            pepdetails.MajorLOB.Add("");
                        }
                        if (pepdetails.PrimaryPepCountry == null)
                        {
                            pepdetails.PrimaryPepCountry = new List<string>();
                            pepdetails.PrimaryPepCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                        }

                        if (pepdetails.PepAssociatedCountry == null)
                        {
                            pepdetails.PepAssociatedCountry = new List<string>();
                            pepdetails.PepAssociatedCountry.Add("");
                        }

                        if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                        {
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                            pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                        }
                        return View("PEPDeterminationForm", pepdetails);
                    }
                }
            }
            else {
                ModelState.AddModelError("ModelStateNotValid", "Please correct the errors shown below!");
                if (pepdetails.PepId == null)
                    pepdetails.InitialRequestDate = DateTime.Now;
                pepdetails.success = false;
                //pepdetails.searchFlag = "none";
                if (pepdetails.LOB == null)
                {
                    pepdetails.LOB = new List<string>();
                    pepdetails.LOB.Add("");
                }

                if (pepdetails.MajorLOB == null)
                {
                    pepdetails.MajorLOB = new List<string>();
                    pepdetails.MajorLOB.Add("");
                }
                if (pepdetails.PrimaryPepCountry == null)
                {
                    pepdetails.PrimaryPepCountry = new List<string>();
                    pepdetails.PrimaryPepCountry.Add("");
                }
                if (pepdetails.PrimaryPepCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepCountryRiskDesignation.Add("");
                }

                if (pepdetails.PepAssociatedCountry == null)
                {
                    pepdetails.PepAssociatedCountry = new List<string>();
                    pepdetails.PepAssociatedCountry.Add("");
                }
                if (pepdetails.PrimaryPepAssociatedCountryRiskDesignation == null)
                {
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation = new List<string>();
                    pepdetails.PrimaryPepAssociatedCountryRiskDesignation.Add("");
                }

                return View("PEPDeterminationForm", pepdetails);
            }
        }

        [CustomActionLoggingFilter]
        public ActionResult PDTDashboardPage()
        {
            //var item = _pepservice.GetAllPEPDetails();
            //   var item = _pepservice.GetAllPendingApprovalPEPForms().OrderByDescending(i => i.CreatedTS);
            //int id = 105;
            var userDetails = (UserEntity)Session["UserDetails"];

            var item = _pepservice.GetPDTDashboardDetails(userDetails.UserID);
            //var countDb= item.Count();
            // item = item.Take(3);
            return View(item);
        }
        [CustomActionLoggingFilter]
        public ActionResult ReportsViewerPage()
        {
            return Redirect("../Reports/Report.aspx");
        }
        //added below method for displaying report based on selected report name .
        [AllowAnonymous]
        [CustomActionLoggingFilter]
        public ActionResult ReportTemplate(string ReportName, string ReportDescription, int Width, int Height)
        {
            var reptinfo = new ReportParams
            {
                RptName = ReportName,
                ReportDescription = ReportDescription,
                ReportURL = string.Format("../../Reports/PEPReports.aspx?ReportName={0}&Height={1}", ReportName, Height),
                Width = Width,
                Height = Height
            };
            return View(reptinfo);
        }
        //added below method for  displaying all Monthly /Weekly PEP report Links
        [CustomActionLoggingFilter]
        public ActionResult ReportView()
        {
            return View();
        }
        #endregion
        //Ends
        #region Action Methods for PDT Manager

        [CustomActionLoggingFilter]
        public ActionResult PDTManagerDashboardPage()
        {
            var model = _pepservice.GetPDTManagerDashboardDetails();

　
            return View(model);
        }

        [CustomActionLoggingFilter]
        public PartialViewResult GetPepListForUser(int userId, string pepStatus)
        {

            var model = _pepservice.GetPepListForUserId(userId, pepStatus);
            ViewData["id"] = "1";
            if (pepStatus.Contains("2|3|6"))
            {
                model.HeaderInfo = "Change/Canceled Requests for " + model.HeaderInfo;
                return PartialView("_DisplayPepInformationListCR", model);
            }
            else
            {
                if (pepStatus.Contains("5"))
                {
                    model.HeaderInfo = "Rejected Requests for " + model.HeaderInfo;
                }
                else if (pepStatus.Contains("SLA"))
                {
                    model.HeaderInfo = "Requests Approaching SLA for " + model.HeaderInfo;
                }
                else {
                    model.HeaderInfo = "Pending Requests for " + model.HeaderInfo;
                }
                return PartialView("_DisplayPepInformationList", model);
            }
        }

        [CustomActionLoggingFilter]
        [OutputCache(VaryByParam = "*", Duration = 0, NoStore = true)]
        public ActionResult CPTMembersTeamAssignments()
        {
            var model = _pepservice.GetCPTMembersTeamAssignments();
            if (model.ToList().Any(x => x.TotalTeamAutoAssignmentEnabled == false))
            {
                var index = model.ToList().FindIndex(x => x.TotalTeamAutoAssignmentEnabled == false);
                model.ToList()[index] = model.ToList()[0];
                var item = model.ToList()[index];
                model.ToList()[0] = item;

            }
            ViewBag.isSuccess = true;
            if (TempData["Message"] != null && TempData["Message"].ToString() == "Update")
            {
                ModelState.AddModelError("Success", "Team assignments saved successfully");
            }

            return View(model);
        }
        [OutputCache(VaryByParam = "*", Duration = 0, NoStore = true)]
        public ActionResult UpdateCPTMembersTeamAssignments(List<PepRequestAutoAssignmentEntity> PepRequestAutoAssignmentEntity)
        {
            bool isvalidate = false;
            bool isvalidatestartdategreater = false;

            bool totalteamassignmentenabled = PepRequestAutoAssignmentEntity.Any(x => x.TotalTeamAutoAssignmentEnabled == false);
            if (totalteamassignmentenabled)
            {

                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    x.AssignmentThresholdPercentage = 0;
                    x.TotalTeamAutoAssignmentEnabled = false;
                });

                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    if (x.IsAutoAssignmentEnabled == false)
                    {
                        if ((x.AutoAssignmentBlackOutStartDate == null || x.AutoAssignmentBlackOutEndDate == null) && !(x.NolongerTeamMember))
                        {
                            isvalidate = true;
                        }
                    }

                });

                if (isvalidate)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Please provide Start Date and End Date for the Employees having Auto Assignment NO and No Longer Team member Not Selected");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

　
　
                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    if (x.IsAutoAssignmentEnabled == false)
                    {
                        if ((x.AutoAssignmentBlackOutStartDate >= x.AutoAssignmentBlackOutEndDate) && !(x.NolongerTeamMember))
                        {
                            isvalidatestartdategreater = true;
                        }
                    }

                });
                if (isvalidatestartdategreater)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Start Date Cannot be greater than or equal to End Date for the Employees having Auto Assignment NO and No Longer Team member Not Selected");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

　
　
                foreach (var entity in PepRequestAutoAssignmentEntity)
                {
                    if (entity.NolongerTeamMember)
                    {
                        entity.EndDate = DateTime.Now;
                    }
                    int result = _pepservice.updateCPTMembersTeamAssignments(entity);

                }
                //var model = _pepservice.UpdateCPTMembersTeamAssignments();

                ViewBag.isSuccess = true;
                TempData["Message"] = "Update";
                return RedirectToAction("CPTMembersTeamAssignments");
            }
            else {
                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    x.TotalTeamAutoAssignmentEnabled = true;
                });

                bool isvalidthreshold = false;

                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    if (x.IsAutoAssignmentEnabled == false)
                    {
                        if (x.AssignmentThresholdPercentage > 0)
                        {
                            isvalidthreshold = true;
                        }
                    }

                });
                if (isvalidthreshold)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Threshold Percentage Cannot be more than 0 for Employees having Auto Assignment NO");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

                bool isvalidAssignedThreshold = false;
                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    if (x.IsAutoAssignmentEnabled==true && x.AssignmentThresholdPercentage == 0)
                    {
                        isvalidAssignedThreshold = true;
                    }

                });
                if (isvalidAssignedThreshold)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Threshold Percentage should be greater than 0 for Employees having Auto Assignment Yes");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

                var totalthreshold = PepRequestAutoAssignmentEntity.Sum(x => x.AssignmentThresholdPercentage);
                if (totalthreshold != 100)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Total threshold percentage of employees is not equal to 100");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

                bool isvalidateDate = false;

                bool isvalidatestartdategreaterY = false;

　
　
                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    if (x.IsAutoAssignmentEnabled == false)
                    {
                        if ((x.AutoAssignmentBlackOutStartDate == null || x.AutoAssignmentBlackOutEndDate == null) && !(x.NolongerTeamMember))
                        {
                            isvalidateDate = true;
                        }
                    }

                });

                if (isvalidateDate)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Please provide Start Date and End Date for the Employees having Auto Assignment NO and No Longer Team member Not Selected");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

                PepRequestAutoAssignmentEntity.ForEach(x =>
                {
                    if (x.IsAutoAssignmentEnabled == false)
                    {
                        if ((x.AutoAssignmentBlackOutStartDate >= x.AutoAssignmentBlackOutEndDate) && !(x.NolongerTeamMember))
                        {
                            isvalidatestartdategreaterY = true;
                        }
                    }

                });
                if (isvalidatestartdategreaterY)
                {
                    ViewBag.isSuccess = false;
                    ModelState.AddModelError("Error", "Not Saved! Start Date Cannot be greater than or equal to End Date for the Employees having Auto Assignment NO and No Longer Team member Not Selected");
                    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                }

　
                //var isendategreater = PepRequestAutoAssignmentEntity.Any(x => x.AutoAssignmentBlackOutEndDate > DateTime.Now);
                //if (isendategreater)
                //{
                //    ViewBag.isSuccess = false;
                //    ModelState.AddModelError("Error", "Not Saved! End Date is greater than today's date ");
                //    return View("CPTMembersTeamAssignments", PepRequestAutoAssignmentEntity);
                //}

　
　
                foreach (var entity in PepRequestAutoAssignmentEntity)
                {
                    if (entity.NolongerTeamMember)
                    {
                        entity.EndDate = DateTime.Now;
                    }
                    int result = _pepservice.updateCPTMembersTeamAssignments(entity);

                }
                //var model = _pepservice.UpdateCPTMembersTeamAssignments();

                ViewBag.isSuccess = true;
                TempData["Message"] = "Update";
                return RedirectToAction("CPTMembersTeamAssignments");
            }

        }

        public ActionResult TeamRequestAssignmentOverride(int UserID)
        {
            ViewData["ActiveCPTUsers"] = MasterDataUtilities.GetAllActiveCPTUsersForReassignmentList(_masterdataservice, UserID, true);
            List<RequestAssignmentEntity> listOfPepRequestOfUser = MasterDataUtilities.GetAllPendingPepRequestIDsForUser(_masterdataservice, UserID);
            List<RequestAssignmentEntity> listOfOpenChangeRequestOfUser = MasterDataUtilities.GetAllOpenChangeRequestsForUser(_masterdataservice, UserID);
            List<RequestAssignmentOverrideRecordEntity> listOfRecords = new List<RequestAssignmentOverrideRecordEntity>();
            RequestAssignmentOverrideEntity requestAssignOverrideModel = new RequestAssignmentOverrideEntity();

            if ((listOfPepRequestOfUser.Count != 0) || (listOfOpenChangeRequestOfUser.Count != 0))
            {
                requestAssignOverrideModel.isAnyOpenRequestForUser = true;
                List<DateTime> listOfCreationDateOfRequestOfUser = MasterDataUtilities.GetAllPendingPepRequestCreationDateForUser(_masterdataservice, UserID);
                List<DateTime?> listOfCreationDateOfChangeRequestOfUser = MasterDataUtilities.GetAllOpenChangeRequestCreationDateForUser(_masterdataservice, UserID);

　
　
　
　
                for (int i = 0; i < listOfPepRequestOfUser.Count; i++)
                {
                    RequestAssignmentOverrideRecordEntity record = new RequestAssignmentOverrideRecordEntity();
                    record.RequestID = listOfPepRequestOfUser[i].PepId;
                    record.RequestType = "PEP";
                    record.RequestCreationDateTime = listOfCreationDateOfRequestOfUser[i];
                    record.ReassignedFlag = false;

                    listOfRecords.Add(record);
                }
                for (int j = 0; j < listOfOpenChangeRequestOfUser.Count; j++)
                {
                    RequestAssignmentOverrideRecordEntity record = new RequestAssignmentOverrideRecordEntity();
                    record.RequestID = listOfOpenChangeRequestOfUser[j].PepId;
                    record.ChangeRequestID = listOfOpenChangeRequestOfUser[j].ChangeRequestID;
                    var crdetails= _pepservice.GetCrDetailsbyCrid(listOfOpenChangeRequestOfUser[j].ChangeRequestID);

                    record.PepwithCrno = crdetails.PepId.ToString() +"-" + crdetails.CrNo;
                    record.RequestType = "CR";
                    record.RequestCreationDateTime = Convert.ToDateTime(listOfCreationDateOfChangeRequestOfUser[j]);
                    record.ReassignedFlag = false;

                    listOfRecords.Add(record);
                }

            }
            else
            {
                requestAssignOverrideModel.isAnyOpenRequestForUser = false;
                ModelState.AddModelError("isAnyOpenRequestForUser", "No Open Request Available For this Member!");
            }

            requestAssignOverrideModel.CurrentlyAssignedToUserID = UserID;
            UserEntity userEn = _userservice.FindUserByID(UserID);
            requestAssignOverrideModel.CurrentlyAssignedToUserFullName = userEn.FirstName + " " + userEn.LastName;
            requestAssignOverrideModel.Records = listOfRecords;
            return View("TeamRequestAssignmentOverride", requestAssignOverrideModel);
        }
        public ActionResult UpdateTeamRequestAssignmentOverride(RequestAssignmentOverrideEntity RequestAssignmentOverrideDetails)
        {
            for (int i = 0; i < RequestAssignmentOverrideDetails.Records.Count; i++)
            {
                var currentRecord = RequestAssignmentOverrideDetails.Records[i];
                if (currentRecord.ReassignedFlag)
                {
                    if (currentRecord.ReAssignedToUserID == -1)
                    {
                        ModelState.AddModelError("Records[" + i + "].ReAssignedToUserID", "Please select a team member");
                    }
                }
                if (currentRecord.ReAssignedToUserID != -1)
                {
                    if (!currentRecord.ReassignedFlag)
                    {
                        ModelState.AddModelError("Records[" + i + "].ReassignedFlag", "Please check the checkbox");
                    }
                }
            }
            ViewData["ActiveCPTUsers"] = MasterDataUtilities.GetAllActiveCPTUsersForReassignmentList(_masterdataservice, RequestAssignmentOverrideDetails.CurrentlyAssignedToUserID, true);
            UserEntity userEn = _userservice.FindUserByID(RequestAssignmentOverrideDetails.CurrentlyAssignedToUserID);
            RequestAssignmentOverrideDetails.CurrentlyAssignedToUserFullName = userEn.FirstName + " " + userEn.LastName;
            if (ModelState.IsValid)
            {

                try
                {
                    foreach (var i in RequestAssignmentOverrideDetails.Records)
                    {
                        if (i.ReassignedFlag)
                        {
                            RequestAssignmentEntity reqassignmentDetail = new RequestAssignmentEntity();
                            
                            if (i.RequestType == "CR") {
                                i.RequestID = i.ChangeRequestID;
                            }
                            reqassignmentDetail = _pepservice.GetSingleRequestAssignmentRowbyid(i.RequestID, i.RequestType);
                            reqassignmentDetail.UserId = i.ReAssignedToUserID;
                            reqassignmentDetail.ReassignedDate = DateTime.Now;
                            //todo: correct the column length and uncomment it.
                            //reqassignmentDetail.UpdatedBy = ((UserEntity)Session["UserDetails"]).Email;
                            reqassignmentDetail.UpdatedTS = DateTime.Now;
                            int result = _pepservice.UpdateRequestAssignmentRow(reqassignmentDetail);
                        }

                    }
                    RequestAssignmentOverrideDetails.Records = RequestAssignmentOverrideDetails.Records.Where(x => x.ReassignedFlag == false).ToList();
                    RequestAssignmentOverrideDetails.isSuccess = true;
                    ModelState.Clear(); //required for checkbox state not clearing issue
                    ModelState.AddModelError("Success", "Assignment(s) successfully reassigned.");
                    return View("TeamRequestAssignmentOverride", RequestAssignmentOverrideDetails);
                }
                catch (Exception ex)
                {
                    RequestAssignmentOverrideDetails.isSuccess = false;
                    ModelState.AddModelError("Error", "Assignment(s) could not be reassigned.");
                    return View("TeamRequestAssignmentOverride", RequestAssignmentOverrideDetails);
                }
            }
            else
            {
                RequestAssignmentOverrideDetails.isSuccess = false;
                return View("TeamRequestAssignmentOverride", RequestAssignmentOverrideDetails);
            }
        }

        #endregion

        [CustomActionLoggingFilter]
        public ActionResult CPTAuditorDashboardPage()
        {
            return View();
        }

        #region Private Methods
        /// <summary>
        /// Extracts User information from server variables once user is authenticated from Channel Secure
        /// </summary>
        /// <returns></returns>
        private string GetUserIdFromRequest()
        {
            string userId = null;
            var request = System.Web.HttpContext.Current.Request;

            userId = request["UID"];

            if (string.IsNullOrEmpty(userId))
            {
                userId = request.ServerVariables["HTTP_UID"];
            }

            if (string.IsNullOrEmpty(userId))
            {
                userId = request.ServerVariables["HTTP_CSSAMACCOUNTNAME"];
            }

            if (string.IsNullOrEmpty(userId))
            {
                userId = request.ServerVariables["HTTP_SM_UNIVERSALID"];
            }

            if (string.Compare(ConfigurationManager.AppSettings["Environment"], "Dev", true) == 0)
            {
                userId = ConfigurationManager.AppSettings["DevUserId"];
            }

            Session["UserLoggedOn"] = true;
            return userId;
        }
        #endregion

　
    }
}
